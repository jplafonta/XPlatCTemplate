#include "TestAppPch.h"
#include "TestContext.h"
#include "TestApp.h"
#include "AutoGen<%- featureGroup.name %>Tests.h"
#include "XAsyncHelper.h"

<%
function debugLogProp(varName, propName, propCoutName, property, prefix, padding) 
{
    var propType = getPublicPropertyType(property, false);
    var propTypeWithConst = getPublicPropertyType(property, true);
    if (propType == "PFJsonObject") {%>
<%- padding %>if( <%- varName %>-><%- propName %>.stringValue ) { ss << "  <%- propCoutName %> " << <%- varName %>-><%- propName %>.stringValue; Log(ss); } else { ss << "  <%- propName %> = nullptr"; Log(ss); }<%} else 
if (propTypeWithConst == "PFClientRegion const*") {%>
<%- padding %>if( <%- varName %>-><%- propName %> ) { ss << "  <%- propCoutName %> " << (int)*<%- varName %>-><%- propName %>; Log(ss); }<%} else 
if (propType == "PFClientRegion" || propType == "PFClientAdActivity") {%>
<%- padding %>ss << "  <%- propCoutName %> " << (int)<%- varName %>-><%- propName %>; Log(ss);<%} else 
if (propType == "bool const*" || propType == "const char*") {%>
<%- padding %>if( <%- varName %>-><%- propName %> ) { ss << "  <%- propCoutName %> " << <%- varName %>-><%- propName %>; Log(ss); } else { ss << "  <%- propCoutName %> = nullptr"; Log(ss); }<%} else {%>
<%- padding %>ss << "  <%- propCoutName %> " << <%- varName %>-><%- propName %>; Log(ss);<%} %> // Class: <%-propType%> <%
}

function debugLogCollection(varName, propName, property, prefix, apiName) {
    var propType = getPublicPropertyType(property, false);
%>    
    ss << "  <%- propName %>Count " << <%- varName %>-><%- propName %>Count; Log(ss);

    // <%- propType %>
    for( uint32_t i=0; i<<%- varName %>-><%- propName %>Count; i++ )
    {<%
        if( property.isclass && !property.collection )
        {
            var datatype = property.datatype;
            for (var propIdx = 0; propIdx < datatype.properties.length; propIdx++) 
            {
                var property = datatype.properties[propIdx];
                var isInternal = false;
                var innerPropName = getPropertyName(property, isInternal);
                var innerPropType = getPublicPropertyType(property, prefix, true);
                debugLogProp(varName, propName + "[i]->" + innerPropName, propName + "[\"<<i<<\"]->" + innerPropName, property, prefix, "        ");
            }
        }
        else
        {
            if( propType == "PFJsonObject" ) {%>
            ss << "  <%- varName + "->" + propName %>[" << i << "]:" << <%- varName + "->" + propName %>[i].stringValue; Log(ss);
            <%} else if( property.collection === "map") {%>
            ss << "  <%- varName + "->" + propName %>[" << i << "]:" << <%- varName + "->" + propName %>[i].key << "=" << <%- varName + "->" + propName %>[i].value; Log(ss);
            <%}
            else {%>
            ss << "  <%- varName + "->" + propName %>[" << i << "]:" << <%- varName + "->" + propName %>[i]; Log(ss); // <%- propType %><%  
            }
        }
        %>
    } <%
}
%>namespace PlayFabUnit
{
<% 
var hasFillBeenDefinedMap = {};
var hasValidateBeenDefinedMap = {};
for (var i = 0; i < featureGroup.calls.length; i++) 
{
    var call = featureGroup.calls[i];
%>
#pragma region <%- call.name %>

<%
    var testName = "Test" + featureGroup.name + call.name;
    let testStatusListStatus = testStatusMap[testName];
    let passingWithDataTest = (testStatusListStatus == "PassingWithData");
    var addDebugMarker = (!passingWithDataTest);

    for (var j = 0; j < prerequisiteCalls[call.name].length; j++)
    {
        var prereqCall = prerequisiteCalls[call.name][j];

        if(prereqCall.requestDatatype && !(call.name + "Prereq" + prereqCall.requestDatatype.name in hasFillBeenDefinedMap)) {  // prereqCall.name == "AcceptTrade"
        hasFillBeenDefinedMap[call.name + "Prereq" + prereqCall.requestDatatype.name] = true;
        let requestNamespace = "PlayFab::" + (prereqCall.requestDatatype.isShared ? "" : featureGroup.name + "Models::");
%>void AutoGen<%- featureGroup.name %>Tests::Fill<%- call.name %>Prerequisite<%- prereqCall.requestDatatype.name %>( <%- requestNamespace + prereqCall.requestDatatype.name %>* request )
{
    PlayFab::JsonDocument inputJson;
    inputJson.Parse( <%- getRequestExample(featureGroup, prereqCall) %> );
    request->FromJson(inputJson);
}

<% } if (prereqCall.resultDatatype && !(call.name + prereqCall.resultDatatype.name in hasValidateBeenDefinedMap)) {
    hasValidateBeenDefinedMap[call.name + prereqCall.resultDatatype.name] = true;
    let resultNamespace = "PlayFab::" + (prereqCall.resultDatatype.isShared ? "" : featureGroup.name + "Models::");
%>HRESULT AutoGen<%- featureGroup.name %>Tests::Store<%- call.name %>Prerequisite<%- prereqCall.resultDatatype.prefix + prereqCall.resultDatatype.name %>( <%- prereqCall.resultDatatype.prefix + prereqCall.resultDatatype.name %>* result )
{
    <%- resultNamespace + prereqCall.resultDatatype.name %> internalResult(*result);
    testData.m_<%- prereqCall.resultDatatype.name %>.FromJson(internalResult.ToJson());

    return S_OK;
}

<% } 
    }

    if(call.requestDatatype && !(call.requestDatatype.name in hasFillBeenDefinedMap)) {  // call.name == "AcceptTrade"
        hasFillBeenDefinedMap[call.requestDatatype.name] = true;
        let requestNamespace = "PlayFab::" + (call.requestDatatype.isShared ? "" : featureGroup.name + "Models::");
%>void AutoGen<%- featureGroup.name %>Tests::Fill<%- call.requestDatatype.name %>( <%- requestNamespace + call.requestDatatype.name %>* request )
{<% if (addDebugMarker) { %>
    // TODO: debug <%- testStatusListStatus %> test<% } %>
    PlayFab::JsonDocument inputJson;
    inputJson.Parse( <%- getRequestExample(featureGroup, call) %> );
    request->FromJson(inputJson);
}
<% } if (call.resultDatatype && !(call.resultDatatype.name in hasValidateBeenDefinedMap)) {
    hasValidateBeenDefinedMap[call.resultDatatype.name] = true;
%>
HRESULT AutoGen<%- featureGroup.name %>Tests::Validate<%- call.resultDatatype.prefix + call.resultDatatype.name %>( <%- call.resultDatatype.prefix + call.resultDatatype.name %>* result )
{
<% for (var propIdx = 0; propIdx < call.resultDatatype.properties.length; propIdx++) 
    {
        var property = call.resultDatatype.properties[propIdx];
        var isInternal = false;
        var type = getPublicPropertyType(property);
        var propName = getPropertyName(property, isInternal);
%>    // <%- "result." + propName + " = " + type + ";" %>
<%
        if (property.collection && !(type === "PFJsonObject")) 
        {
%>    // <%- "result." + propName + "Count = " + "uint32_t;" %>
<%
        }
      } %>
    UNREFERENCED_PARAMETER(result);
    return S_OK;
}
<% } 

    for (var j = 0; j < cleanupCalls[call.name].length; j++)
    {
        var cleanupCall = cleanupCalls[call.name][j];

        if(cleanupCall.requestDatatype && !(call.name + "Cleanup" + cleanupCall.requestDatatype.name in hasFillBeenDefinedMap)) {  // cleanupCall.name == "AcceptTrade"
        hasFillBeenDefinedMap[call.name + "Cleanup" + cleanupCall.requestDatatype.name] = true;
        let requestNamespace = "PlayFab::" + (cleanupCall.requestDatatype.isShared ? "" : featureGroup.name + "Models::");
%>
void AutoGen<%- featureGroup.name %>Tests::Fill<%- call.name %>Cleanup<%- cleanupCall.requestDatatype.name %>( <%- requestNamespace + cleanupCall.requestDatatype.name %>* request )
{
    PlayFab::JsonDocument inputJson;
    inputJson.Parse( <%- getRequestExample(featureGroup, cleanupCall) %> );
    request->FromJson(inputJson);
}
<% } if (cleanupCall.resultDatatype && !(call.name + cleanupCall.resultDatatype.name in hasValidateBeenDefinedMap)) {
    hasValidateBeenDefinedMap[call.name + cleanupCall.resultDatatype.name] = true;
    let resultNamespace = "PlayFab::" + (cleanupCall.resultDatatype.isShared ? "" : featureGroup.name + "Models::");
%>
HRESULT AutoGen<%- featureGroup.name %>Tests::Store<%- call.name %>Cleanup<%- cleanupCall.resultDatatype.prefix + cleanupCall.resultDatatype.name %>( <%- cleanupCall.resultDatatype.prefix + cleanupCall.resultDatatype.name %>* result )
{
    <%- resultNamespace + cleanupCall.resultDatatype.name %> internalResult(*result);
    testData.m_<%- cleanupCall.resultDatatype.name %>.FromJson(internalResult.ToJson());

    return S_OK;
}
<% } } %>
#pragma endregion
<% } %> 

}
