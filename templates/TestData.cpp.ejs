#include "TestAppPch.h"
#include "TestContext.h"
#include "TestApp.h"
#include "AutoGen<%- featureGroup.name %>Tests.h"
#include "XAsyncHelper.h"

<%
function debugLogProp(varName, propName, propCoutName, property, prefix, padding) 
{
    var propType = getPublicPropertyType(property, false);
    var propTypeWithConst = getPublicPropertyType(property, true);
    if (propType == "PFJsonObject") {%>
<%- padding %>if( <%- varName %>-><%- propName %>.stringValue ) { ss << "  <%- propCoutName %> " << <%- varName %>-><%- propName %>.stringValue; Log(ss); } else { ss << "  <%- propName %> = nullptr"; Log(ss); }<%} else 
if (propTypeWithConst == "PFClientRegion const*") {%>
<%- padding %>if( <%- varName %>-><%- propName %> ) { ss << "  <%- propCoutName %> " << (int)*<%- varName %>-><%- propName %>; Log(ss); }<%} else 
if (propType == "PFClientRegion" || propType == "PFClientAdActivity") {%>
<%- padding %>ss << "  <%- propCoutName %> " << (int)<%- varName %>-><%- propName %>; Log(ss);<%} else 
if (propType == "bool const*" || propType == "const char*") {%>
<%- padding %>if( <%- varName %>-><%- propName %> ) { ss << "  <%- propCoutName %> " << <%- varName %>-><%- propName %>; Log(ss); } else { ss << "  <%- propCoutName %> = nullptr"; Log(ss); }<%} else {%>
<%- padding %>ss << "  <%- propCoutName %> " << <%- varName %>-><%- propName %>; Log(ss);<%} %> // Class: <%-propType%> <%
}

function debugLogCollection(varName, propName, property, prefix, apiName) {
    var propType = getPublicPropertyType(property, false);
%>    
    ss << "  <%- propName %>Count " << <%- varName %>-><%- propName %>Count; Log(ss);

    // <%- propType %>
    for( uint32_t i=0; i<<%- varName %>-><%- propName %>Count; i++ )
    {<%
        if( property.isclass && !property.collection )
        {
            var datatype = property.datatype;
            for (var propIdx = 0; propIdx < datatype.properties.length; propIdx++) 
            {
                var property = datatype.properties[propIdx];
                var isInternal = false;
                var innerPropName = getPropertyName(property, isInternal);
                var innerPropType = getPublicPropertyType(property, prefix, true);
                debugLogProp(varName, propName + "[i]->" + innerPropName, propName + "[\"<<i<<\"]->" + innerPropName, property, prefix, "        ");
            }
        }
        else
        {
            if( propType == "PFJsonObject" ) {%>
            ss << "  <%- varName + "->" + propName %>[" << i << "]:" << <%- varName + "->" + propName %>[i].stringValue; Log(ss);
            <%} else if( property.collection === "map") {%>
            ss << "  <%- varName + "->" + propName %>[" << i << "]:" << <%- varName + "->" + propName %>[i].key << "=" << <%- varName + "->" + propName %>[i].value; Log(ss);
            <%}
            else {%>
            ss << "  <%- varName + "->" + propName %>[" << i << "]:" << <%- varName + "->" + propName %>[i]; Log(ss); // <%- propType %><%  
            }
        }
        %>
    } <%
}
%>namespace PlayFabUnit
{

<% 
var hasPrereqFillBeenDefinedMap = {};
var hasPrereqValidateBeenDefinedMap = {};
for (var i = 0; i < prerequisiteApis.length; i++) 
{
    var call = prerequisiteApis[i];
    var testName = "Test" + featureGroup.name + call.name;
    let testStatusListStatus = testStatusMap[testName];
    let passingWithDataTest = (testStatusListStatus == "PassingWithData");
    let passingButNoDataTest = (testStatusListStatus == "PassingButNoData");
    let failingTest = (testStatusListStatus == "Failing");
    let crashingTest = (testStatusListStatus == "Crashing");
    var addDebugMarker = (!passingWithDataTest);
    if( call.requestDatatype && !(call.requestDatatype.name in hasPrereqFillBeenDefinedMap)) {  // call.name == "AcceptTrade"
        hasPrereqFillBeenDefinedMap[call.requestDatatype] = true;
        let requestNamespace = "PlayFab::" + (call.requestDatatype.isShared ? "" : featureGroup.name + "Models::");
%>void AutoGen<%- featureGroup.name %>Tests::FillPrerequisite<%- call.requestDatatype.name %>( <%- requestNamespace + call.requestDatatype.name %>* request )
{<% 
    if (addDebugMarker) { %>
    // TODO: debug <%- testStatusListStatus %> prereq<% } %>
    PlayFab::JsonDocument inputJson;
    inputJson.Parse( <%- getRequestExample(featureGroup, call) %> );
    request->FromJson(inputJson);
}

<% } if (call.resultDatatype && !(call.resultDatatype.name in hasPrereqValidateBeenDefinedMap)) {
    hasPrereqValidateBeenDefinedMap[call.result] = true;
%>HRESULT AutoGen<%- featureGroup.name %>Tests::StorePrerequisite<%- call.resultDatatype. prefix + call.resultDatatype.name %>( <%- call.resultDatatype. prefix + call.resultDatatype.name %>* result )
{
    // TODO: store required fields
<%
    for (var propIdx = 0; propIdx < call.resultDatatype.properties.length; propIdx++) 
    {
        var property = call.resultDatatype.properties[propIdx];
        var isInternal = false;
        var type = getPublicPropertyType(property, prefix);
        var propName = getPropertyName(property, isInternal);
%>    <%- "Data()->m_" + propName + " = result->" + propName + ";" %>
<%
        if (property.collection && !(type === "PlayFabJsonObject")) 
        {
%>    <%- "Data()->m_" + propName + "Count = result->" + propName + "Count;" %>
<%
        } // end if
    } // end for %>
    return S_OK;
}

<% } } %> 
<% 
var hasFillBeenDefinedMap = {};
var hasValidateBeenDefinedMap = {};
for (var i = 0; i < featureGroup.calls.length; i++) 
{
    var call = featureGroup.calls[i];
    var testName = "Test" + featureGroup.name + call.name;
    let testStatusListStatus = testStatusMap[testName];
    let passingWithDataTest = (testStatusListStatus == "PassingWithData");
    let passingButNoDataTest = (testStatusListStatus == "PassingButNoData");
    let failingTest = (testStatusListStatus == "Failing");
    let crashingTest = (testStatusListStatus == "Crashing");
    var addDebugMarker = (!passingWithDataTest);
    if(call.requestDatatype && !(call.requestDatatype.name in hasFillBeenDefinedMap)) {  // call.name == "AcceptTrade"
        hasFillBeenDefinedMap[call.request] = true;
        let requestNamespace = "PlayFab::" + (call.requestDatatype.isShared ? "" : featureGroup.name + "Models::");
%>void AutoGen<%- featureGroup.name %>Tests::Fill<%- call.requestDatatype.name %>( <%- requestNamespace + call.requestDatatype.name %>* request )
{<% if (addDebugMarker) { %>
    // TODO: debug <%- testStatusListStatus %> test<% } %>
    PlayFab::JsonDocument inputJson;
    inputJson.Parse( <%- getRequestExample(featureGroup, call) %> );
    request->FromJson(inputJson);
}

<% } if (call.resultDatatype && !(call.resultDatatype.name in hasValidateBeenDefinedMap)) {
    hasValidateBeenDefinedMap[call.result] = true;
%>HRESULT AutoGen<%- featureGroup.name %>Tests::Validate<%- call.resultDatatype.prefix + call.resultDatatype.name %>( <%- call.resultDatatype.prefix + call.resultDatatype.name %>* result )
{
<% for (var propIdx = 0; propIdx < call.resultDatatype.properties.length; propIdx++) 
    {
        var property = call.resultDatatype.properties[propIdx];
        var isInternal = false;
        var type = getPublicPropertyType(property);
        var propName = getPropertyName(property, isInternal);
%>    // <%- "result." + propName + " = " + type + ";" %>
<%
        if (property.collection && !(type === "PFJsonObject")) 
        {
%>    // <%- "result." + propName + "Count = " + "uint32_t;" %>
<%
        }
      } %>
    UNREFERENCED_PARAMETER(result);
    return S_OK;
}

<% } } %> 

}
