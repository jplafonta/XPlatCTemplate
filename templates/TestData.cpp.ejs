#include "TestAppPch.h"
#include "TestContext.h"
#include "TestApp.h"
#include "AutoGen<%- api.name %>Tests.h"
#include "XAsyncHelper.h"
#include <playfab/PlayFabClientAuthApi.h>
#include <playfab/PlayFabClientApi.h>
#include <playfab/PlayFabProfilesApi.h>
#include <playfab/PlayFabAdminApi.h>
#include <playfab/PlayFabAuthenticationAuthApi.h>
#include <playfab/PlayFabClientDataModels.h>

<%
function debugLogProp(varName, propName, propCoutName, property, prefix, padding) 
{
    var propType = getPublicPropertyType(property, prefix, false);
    var propTypeWithConst = getPublicPropertyType(property, prefix, true);
    if (propType == "PlayFabJsonObject") {%>
<%- padding %>if( <%- varName %>-><%- propName %>.stringValue ) { ss << "  <%- propCoutName %> " << <%- varName %>-><%- propName %>.stringValue; Log(ss); } else { ss << "  <%- propName %> = nullptr"; Log(ss); }<%} else 
if (propTypeWithConst == "PlayFabClientRegion const*") {%>
<%- padding %>if( <%- varName %>-><%- propName %> ) { ss << "  <%- propCoutName %> " << (int)*<%- varName %>-><%- propName %>; Log(ss); }<%} else 
if (propType == "PlayFabClientRegion" || propType == "PlayFabClientAdActivity") {%>
<%- padding %>ss << "  <%- propCoutName %> " << (int)<%- varName %>-><%- propName %>; Log(ss);<%} else 
if (propType == "bool const*" || propType == "const char*") {%>
<%- padding %>if( <%- varName %>-><%- propName %> ) { ss << "  <%- propCoutName %> " << <%- varName %>-><%- propName %>; Log(ss); } else { ss << "  <%- propCoutName %> = nullptr"; Log(ss); }<%} else {%>
<%- padding %>ss << "  <%- propCoutName %> " << <%- varName %>-><%- propName %>; Log(ss);<%} %> // Class: <%-propType%> <%
}

function debugLogCollection(varName, propName, property, prefix, apiName) {
    var propType = getPublicPropertyType(property, prefix, false);
%>    
    ss << "  <%- propName %>Count " << <%- varName %>-><%- propName %>Count; Log(ss);

    // <%- propType %>
    for( uint32_t i=0; i<<%- varName %>-><%- propName %>Count; i++ )
    {<%
        var found = false;
        for (var classIdx = 0; classIdx < sortedClasses.length; classIdx++) 
        {
            var datatype = sortedClasses[classIdx];
            if( datatype.name == propType ||
                prefix + datatype.name == propType)
            {
                found = true;
                for (var propIdx = 0; propIdx < datatype.properties.length; propIdx++) 
                {
                    var property = datatype.properties[propIdx];
                    var isInternal = false;
                    var innerPropName = getPropertyName(property, isInternal);
                    var innerPropType = getPublicPropertyType(property, prefix, true);
                    debugLogProp(varName, propName + "[i]->" + innerPropName, propName + "[\"<<i<<\"]->" + innerPropName, property, prefix, "        ")
                }
            }
        }
    if (!found)
    {
        if( propType == "PlayFabJsonObject" ) {%>
        ss << "  <%- varName + "->" + propName %>[" << i << "]:" << <%- varName + "->" + propName %>[i].stringValue; Log(ss);
        <%} else if( 
            propType == "PlayFabUserDataRecordDictionaryEntry" || 
            propType == "PlayFabVirtualCurrencyRechargeTimeDictionaryEntry" ||
            propType == "PlayFabClientSharedGroupDataRecordDictionaryEntry" ||
            propType == "PlayFabStringDictionaryEntry" || 
            propType == "PlayFabUint32DictionaryEntry" || 
            propType == "PlayFabInt32DictionaryEntry" ) {%>
        ss << "  <%- varName + "->" + propName %>[" << i << "]:" << <%- varName + "->" + propName %>[i].key << "=" << <%- varName + "->" + propName %>[i].value; Log(ss);
        <%}
        else {%>
        ss << "  <%- varName + "->" + propName %>[" << i << "]:" << <%- varName + "->" + propName %>[i]; Log(ss); // <%- propType %><%  
        }
    }
        %>
    } <%
}
%>namespace PlayFabUnit
{

<% 
var hasPrereqFillBeenDefinedMap = {};
var hasPrereqValidateBeenDefinedMap = {};
for (var i = 0; i < prerequisiteApis.length; i++) 
{
    var call = prerequisiteApis[i];
    var asyncName = "PlayFab" + api.name + call.name + "Async"; 
    var testName = "Test" + api.name + call.name;
    let testStatusListStatus = testStatusMap[testName];
    let passingWithDataTest = (testStatusListStatus == "PassingWithData");
    let passingButNoDataTest = (testStatusListStatus == "PassingButNoData");
    let failingTest = (testStatusListStatus == "Failing");
    let crashingTest = (testStatusListStatus == "Crashing");
    var addDebugMarker = (!passingWithDataTest);
    if( !(call.request in hasPrereqFillBeenDefinedMap) && call.request != "void" ) {  // call.name == "AcceptTrade"
        hasPrereqFillBeenDefinedMap[call.request] = true;
%>void AutoGen<%- api.name %>Tests::FillPlayFabPrerequisite<%- api.name + call.request %>( PlayFab::<%- api.name %>Models::<%- call.request %>* request )
{<% 
    var found = false;
    for (var classIdx = 0; classIdx < sortedClasses.length; classIdx++) 
    {
        var datatype = sortedClasses[classIdx];
        if( datatype.name == call.request )
        {
            found = true; 
%><% if (addDebugMarker) { %>
    // TODO: debug <%- testStatusListStatus %> prereq<% } %>
    PlayFab::JsonDocument inputJson;
    inputJson.Parse( <%- getRequestExample(api, call) %> );
    request->FromJson(inputJson);<%
 } }
if( !found ) { throw Error('Not found ' + call.request) } %>
}

<% } if (!(call.result in hasPrereqValidateBeenDefinedMap) && call.result != "void" && call.url != "/Authentication/GetEntityToken") {
    hasPrereqValidateBeenDefinedMap[call.result] = true;
%>HRESULT AutoGen<%- api.name %>Tests::StorePlayFabPrerequisite<%- api.name %><%- call.result %>( PlayFab<%- api.name %><%- call.result %>* result )
{<% 
    for (var classIdx = 0; classIdx < sortedClasses.length; classIdx++) 
    {
        var datatype = sortedClasses[classIdx];
        if( datatype.name == call.result )
        {
%>
    // TODO: store required fields
<%
    for (var propIdx = 0; propIdx < datatype.properties.length; propIdx++) 
    {
        var property = datatype.properties[propIdx];
        var isInternal = false;
        var type = getPublicPropertyType(property, prefix);
        var propName = getPropertyName(property, isInternal);
%>    <%- "Data()->m_" + propName + " = result->" + propName + ";" %>
<%
        if (property.collection && !(type === "PlayFabJsonObject")) 
        {
%>    <%- "Data()->m_" + propName + "Count = result->" + propName + "Count;" %>
<%
         }
      }
} }%>
    return S_OK;
}

<% } } %> 
<% 
var hasFillBeenDefinedMap = {};
var hasValidateBeenDefinedMap = {};
for (var i = 0; i < categorizedApi.otherCalls.length; i++) 
{
    var call = categorizedApi.otherCalls[i];
    var asyncName = "PlayFab" + api.name + call.name + "Async"; 
    var testName = "Test" + api.name + call.name;
    let testStatusListStatus = testStatusMap[testName];
    let passingWithDataTest = (testStatusListStatus == "PassingWithData");
    let passingButNoDataTest = (testStatusListStatus == "PassingButNoData");
    let failingTest = (testStatusListStatus == "Failing");
    let crashingTest = (testStatusListStatus == "Crashing");
    var addDebugMarker = (!passingWithDataTest);
    if( !(call.request in hasFillBeenDefinedMap) && call.request != "void" ) {  // call.name == "AcceptTrade"
        hasFillBeenDefinedMap[call.request] = true;
%>void AutoGen<%- api.name %>Tests::FillPlayFab<%- api.name + call.request %>( PlayFab::<%- api.name %>Models::<%- call.request %>* request )
{<% 
    var found = false;
    for (var classIdx = 0; classIdx < sortedClasses.length; classIdx++) 
    {
        var datatype = sortedClasses[classIdx];
        if( datatype.name == call.request )
        {
            found = true; 
%><% if (addDebugMarker) { %>
    // TODO: debug <%- testStatusListStatus %> test<% } %>
    PlayFab::JsonDocument inputJson;
    inputJson.Parse( <%- getRequestExample(api, call) %> );
    request->FromJson(inputJson);<%
 } }
if( !found ) { throw Error('Not found ' + call.request) } %>
}

<% } if (!(call.result in hasValidateBeenDefinedMap) && call.result != "void" && call.url != "/Authentication/GetEntityToken") {
    hasValidateBeenDefinedMap[call.result] = true;
%>HRESULT AutoGen<%- api.name %>Tests::ValidatePlayFab<%- api.name %><%- call.result %>( PlayFab<%- api.name %><%- call.result %>* result )
{<% 
    for (var classIdx = 0; classIdx < sortedClasses.length; classIdx++) 
    {
        var datatype = sortedClasses[classIdx];
        if( datatype.name == call.result )
        {
%>
<%
    for (var propIdx = 0; propIdx < datatype.properties.length; propIdx++) 
    {
        var property = datatype.properties[propIdx];
        var isInternal = false;
        var type = getPublicPropertyType(property, prefix);
        var propName = getPropertyName(property, isInternal);
%>    // <%- "result." + propName + " = " + type + ";" %>
<%
        if (property.collection && !(type === "PlayFabJsonObject")) 
        {
%>    // <%- "result." + propName + "Count = " + "uint32_t;" %>
<%
         }
      }
} }%>
    UNREFERENCED_PARAMETER(result);
    return S_OK;
}

<% } } %> 

}
