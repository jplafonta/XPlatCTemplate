#pragma once

#include "TestCase.h"
#include <playfab/PFGlobal.h>
#include <playfab/PFEntity.h>
#include "../../../code/source/<%- featureGroup.name %>/<%- featureGroup.name %>DataModels.h"

namespace PlayFabUnit
{

class AutoGen<%- featureGroup.name %>Tests : public PlayFabApiTestCase
{
private: 
    static void Log(std::stringstream& ss);
    static HRESULT LogHR(HRESULT hr);

<% for (var i = 0; i < prerequisiteApis.length; i++)
{
    var call = prerequisiteApis[i];
%>    void Prerequisite<%- featureGroup.name + call.name %>(TestContext& testContext);
<% } %>
<% for (var i = 0; i < featureGroup.calls.length; i++) 
{
    var call = featureGroup.calls[i];
    var asyncName = prefix + call.name + "Async"; 
%>    void Test<%- featureGroup.name + call.name %>(TestContext& testContext); 
<% } %>

protected:
    void AddTests();

<% 
var hasPrereqFillBeenDefinedMap = {};
var hasPrereqValidateBeenDefinedMap = {};
for (var i = 0; i < prerequisiteApis.length; i++) 
{
    var call = prerequisiteApis[i];
    if(call.requestDatatype && !(call.requestDatatype.name in hasPrereqFillBeenDefinedMap)) {
        hasPrereqFillBeenDefinedMap[call.requestDatatype.name] = true;
        let requestNamespace = "PlayFab::" + (call.requestDatatype.isShared ? "" : featureGroup.name + "Models::");
%>    static void LogPrerequisite<%- call.requestDatatype.name %>( <%- requestNamespace + call.requestDatatype.name %>* request, const char* prereqName );
    static void FillPrerequisite<%- call.requestDatatype.name %>( <%- requestNamespace + call.requestDatatype.name %>* request );
<% } if (call.resultDatatype && !(call.resultDatatype.name in hasPrereqValidateBeenDefinedMap)) { 
    hasPrereqValidateBeenDefinedMap[call.resultDatatype.name] = true;
%>    static HRESULT LogPrerequisite<%- call.resultDatatype.prefix + call.resultDatatype.name %>( <%- call.resultDatatype.prefix + call.resultDatatype.name %>* result );
    static HRESULT StorePrerequisite<%- call.resultDatatype.prefix + call.resultDatatype.name %>( <%- call.resultDatatype.prefix + call.resultDatatype.name %>* result );
<% } } %>
<% 
var hasFillBeenDefinedMap = {};
var hasValidateBeenDefinedMap = {};
for (var i = 0; i < featureGroup.calls.length; i++) 
{
    var call = featureGroup.calls[i];
    if(call.requestDatatype && !(call.requestDatatype.name in hasFillBeenDefinedMap) ) {
        hasFillBeenDefinedMap[call.requestDatatype.name] = true;
        let requestNamespace = "PlayFab::" + (call.requestDatatype.isShared ? "" : featureGroup.name + "Models::");
%>    static void Log<%- call.requestDatatype.name %>( <%- requestNamespace + call.requestDatatype.name %>* request, const char* testName );
    static void Fill<%- call.requestDatatype.name %>( <%- requestNamespace + call.requestDatatype.name %>* request );
<% } if (call.resultDatatype && !(call.resultDatatype.name in hasValidateBeenDefinedMap) ) { 
    hasValidateBeenDefinedMap[call.resultDatatype.name] = true;
%>    static HRESULT Log<%- call.resultDatatype.prefix + call.resultDatatype.name %>( <%- call.resultDatatype.prefix + call.resultDatatype.name %>* result );
    static HRESULT Validate<%- call.resultDatatype.prefix + call.resultDatatype.name %>( <%- call.resultDatatype.prefix + call.resultDatatype.name %>* result );
<% } } %>
public:
    PFStateHandle stateHandle{ nullptr };
    PFEntityHandle entityHandle{ nullptr };
    PFGetPlayerCombinedInfoResultPayload const* playerCombinedInfo{ nullptr };

    void ClassSetUp() override;
    void ClassTearDown() override;
    void SetUp(TestContext& testContext) override;

    void Tick(TestContext&) override {}
};

}
