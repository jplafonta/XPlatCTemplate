#pragma once

<%- getApiDefine(api) %>

#include <playfab/PlayFabBaseModel.h>
#include <JsonUtils.h>

namespace PlayFab
{
    namespace <%- api.name %>Models
    {
        // <%- api.name %> Enums<%
for (var enumIdx = 0; enumIdx < enumtypes.length; enumIdx++) { var enumtype = enumtypes[enumIdx]; %>
        enum class <%- enumtype.name %>
        {
            <% for(var i=0; i<enumtype.enumvalues.length-1; i++) { var enumval = enumtype.enumvalues[i] %><%- enumtype.name %><%- enumval.name %>,
            <% } %><%- enumtype.name %><%- enumtype.enumvalues[enumtype.enumvalues.length-1].name %>
        };
<% } %>
        // <%- api.name %> Classes<%
for (var typeIdx = 0; typeIdx < sortedClasses.length; typeIdx++) { var datatype = sortedClasses[typeIdx]; %>
        struct <%- datatype.name %> : public <%- getBaseType(datatype) %>
        {
<% for (var propIdx = 0; propIdx < datatype.properties.length; propIdx++) { var property = datatype.properties[propIdx];
%><%- getPropertyDefinition("            ", property, datatype) %>
<% } %>
            <%- datatype.name %>() = default;
<% if (canDefaultCopyConstructor(datatype)) { %>
            <%- datatype.name %>(const <%- datatype.name %>&) = default;
<% } else { %>
            <%- datatype.name %>(const <%- datatype.name %>& src)
<%- getCopyConstructorInitializationList("                ", datatype) %>
            {
<%- getCopyConstructorBody("                ", datatype) %>
            }
<% } %>
            ~<%- datatype.name %>() = default;

            void FromJson(const JsonValue&<%- ifHasProps(datatype, " input") %>) override
            {
<% for (var propIdx = 0; propIdx < datatype.properties.length; propIdx++) { var property = datatype.properties[propIdx];
%><%- getPropertyFromJson("                ", property, datatype) %>
<% } %>            }

            JsonValue ToJson() const override
            {
                JsonValue output{ rapidjson::kObjectType };
<% for (var propIdx = 0; propIdx < datatype.properties.length; propIdx++) { var property = datatype.properties[propIdx];
%><%- getPropertyToJson("                ", property, datatype) %>
<% } %>                return output;
            }
        };
<% } %>
    }

    // EnumRange definitions used for Enum (de)serialization <%
for (var enumIdx = 0; enumIdx < enumtypes.length; enumIdx++) { var enumtype = enumtypes[enumIdx]; var maxval = enumtype.enumvalues[enumtype.enumvalues.length-1]; %>
    template<> struct EnumRange<<%- api.name %>Models::<%- enumtype.name %>>
    {
        static constexpr <%- api.name %>Models::<%- enumtype.name %> maxValue = <%- api.name %>Models::<%- enumtype.name %>::<%- enumtype.name %><%- maxval.name %>;
    };
<% } %>
}

#endif
