#pragma once

#include "<%- featureGroup.name %>DataModels.h"
#include "AuthTokens.h"
#include "HttpClient.h"
#include "TaskQueue.h"

namespace PlayFab
{

class Entity;

class <%- featureGroup.name %>API
{
public:
    <%- featureGroup.name %>API(SharedPtr<HttpClient const> httpClient, SharedPtr<AuthTokens const> tokens);
    <%- featureGroup.name %>API(const <%- featureGroup.name %>API& source) = delete;
    <%- featureGroup.name %>API& operator=(const <%- featureGroup.name %>API& source) = delete;
    ~<%- featureGroup.name %>API() = default;

    // ------------ Generated API calls<%
for (var i = 0; i < featureGroup.calls.length; i++) {
    var call = featureGroup.calls[i];
    var staticModifier = call.entityRequired ? "" : "static ";
    var constModifier = call.entityRequired ? " const" : "";

    var resultType = "void";
    if (call.entityReturned) {
        resultType = "SharedPtr<Entity>";
    } else if (call.resultDatatype) {
        if (call.resultDatatype.isShared) {
            resultType = call.resultDatatype.name;
        } else {
            resultType = featureGroup.name + "Models::" + call.resultDatatype.name;
        }
    }
    var requestParam = call.requestDatatype ? "const " + call.requestDatatype.prefix + call.requestDatatype.name + "& request, " : ""; 
    var secretKeyParam = call.auth === "SecretKey" ? "SharedPtr<String const> secretKey, " : "";
    var httpClientParam = call.entityRequired ? "" : "SharedPtr<HttpClient const> httpClient, ";

%>
    <%- staticModifier %>AsyncOp<<%- resultType %>> <%- call.name %>(<%- requestParam %><%- secretKeyParam %><%- httpClientParam %>const TaskQueue& queue)<%- constModifier %>;<%

    // Eplicitly add LoginWithXUser API alongside Client/LoginWithXbox
    if (call.url === "/Client/LoginWithXbox") { %>
#if HC_PLATFORM == HC_PLATFORM_GDK
    static AsyncOp<SharedPtr<Entity>> LoginWithXUser(const PFAuthenticationLoginWithXUserRequest& request, SharedPtr<HttpClient const> httpClient, const TaskQueue& queue);
#endif<%
    } // end if
} // end for %>

private:
    SharedPtr<HttpClient const> m_httpClient;
    SharedPtr<AuthTokens const> m_tokens;
};

}
