// Copyright (c) Microsoft Corporation
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

#if !defined(__cplusplus)
#error C++11 required
#endif

#pragma once

#include <playfab/PlayFab<%- featureGroup.name %>DataModels.h>
#include <playfab/PlayFabGlobal.h>
#include <playfab/PlayFabEntity.h>

extern "C"
{
<%
for (var callIndex = 0; callIndex < featureGroup.calls.length; callIndex++) {
    var call = featureGroup.calls[callIndex]; 
    var contextHandleParam =  call.entityRequired ? globalPrefix + "EntityHandle entityHandle" : globalPrefix + "StateHandle stateHandle";
    var requestParam = call.requestDatatype ? "_In_ const " + call.requestDatatype.prefix + call.requestDatatype.name + "* request,\n    " : ""; %>
/// <summary>
<%- getFormattedCallDescription(featureGroup.name, call) %>
/// </summary><%
    if (call.entityRequired) { %>
/// <param name="entityHandle"><%- globalPrefix %>EntityHandle returned from a auth call.</param><%
    } else { %>
/// <param name="stateHandle"><%- globalPrefix %>StateHandle returned from <%- globalPrefix %>Initialize call.</param><%
    }
    if (call.requestDatatype) { %>
/// <param name="request">Populated request object.</param><%
    } %>
/// <param name="async">XAsyncBlock for the async operation.</param>
/// <returns>Result code for this API operation.</returns>
/// <remarks><%
    if (call.resultDatatype) { %>
/// If successful, call <see cref="<%- prefix %><%- call.name %>GetResult"/> to get the result.<%
    } else { %>
/// Call <see cref="XAsyncGetStatus"/> to get the status of the operation.<%
    } %>
/// </remarks>
HRESULT <%- prefix %><%- call.name %>Async(
    _In_ <%- contextHandleParam %>,
    <%- requestParam %>_Inout_ XAsyncBlock* async
) noexcept;
<%  
    // Explicitly add XUser login API alongside generated LoginWithXbox API
    if (call.name === "ClientLoginWithXbox") { %>
#if HC_PLATFORM == HC_PLATFORM_GDK
/// <summary>
/// Login using a GDK XUser handle. The API will first acquire an XToken and then authenticate with PlayFab service.
/// The returned Entity will hold an XUser reference (via XUserDuplicateHandle) until it is closed. The stored XUserHandle
/// will be used to get a new XToken prior to refreshing PlayFab auth tokens.
/// </summary>
/// <param name="stateHandle"><%- globalPrefix %>StateHandle returned from <%- globalPrefix %>Initialize call.</param>
/// <param name="request">Populated request object.</param>
/// <param name="async">XAsyncBlock for the async operation.</param>
/// <returns>Result code for this API operation.</returns>
/// <remarks>
/// If successful, call <see cref="<%- globalPrefix %>GetAuthResult"/> to get the result. The resulting <%- globalPrefix %>EntityHandle
/// will be used to authenticate future PlayFab calls.
/// </remarks>
HRESULT <%- globalPrefix %>AuthenticationLoginWithXUserAsync(
    _In_ <%- globalPrefix %>StateHandle stateHandle,
    _In_ const <%- globalPrefix %>AuthenticationLoginWithXUserRequest* request,
    _Inout_ XAsyncBlock* async
) noexcept;
#endif
<%  } // end if

    if ((!call.resultDatatype) || call.entityReturned) { 
        // No Get Result method needed
    } else if (isFixedSize(call.resultDatatype)) { %>
/// <summary>
/// Gets the result of a successful <%- prefix %><%- call.name %>Async call.
/// </summary>
/// <param name="async">XAsyncBlock for the async operation.</param>
/// <param name="result"><%- call.resultDatatype.prefix %><%- call.resultDatatype.name %> object that will be populated with the result.</param>
/// <returns>Result code for this API operation.</returns>
HRESULT <%- prefix %><%- call.name %>GetResult(
    _Inout_ XAsyncBlock* async,
    _Out_ <%- call.resultDatatype.prefix %><%- call.resultDatatype.name %>* result
) noexcept;
<%  } else if (isSerializable(call.resultDatatype)) { %>
/// <summary>
/// Get the size in bytes needed to store the result of a <%- call.name %> call.
/// </summary>
/// <param name="async">XAsyncBlock for the async operation.</param>
/// <param name="bufferSize">The buffer size in bytes required for the result.</param>
/// <returns>Result code for this API operation.</returns>
HRESULT <%- prefix %><%- call.name %>GetResultSize(
    _Inout_ XAsyncBlock* async,
    _Out_ size_t* bufferSize
) noexcept;

/// <summary>
/// Gets the result of a successful <%- prefix %><%- call.name %>Async call.
/// </summary>
/// <param name="async">XAsyncBlock for the async operation.</param>
/// <param name="bufferSize">The size of the buffer for the result object.</param>
/// <param name="buffer">Byte buffer used for the result value and its fields.</param>
/// <param name="result">Pointer to the result object.</param>
/// <param name="bufferUsed">The number of bytes in the provided buffer that were used.</param>
/// <returns>Result code for this API operation.</returns>
/// <remarks>
/// result is a pointer within buffer and does not need to be freed separately.
/// </remarks>
HRESULT <%- prefix %><%- call.name %>GetResult(
    _Inout_ XAsyncBlock* async,
    _In_ size_t bufferSize,
    _Out_writes_bytes_to_(bufferSize, *bufferUsed) void* buffer,
    _Outptr_ <%- call.resultDatatype.prefix %><%- call.resultDatatype.name %>** result,
    _Out_opt_ size_t* bufferUsed
) noexcept;
<%  } else { %>
/// <summary>
/// Gets the result of a successful <%- prefix %><%- call.name %>Async call.
/// </summary>
/// <param name="async">XAsyncBlock for the async operation.</param>
/// <param name="resultHandle">Opaque handle to the result object.</param>
/// <param name="result">Pointer to the result object.</param>
/// <returns>Result code for this API operation.</returns>
/// <remarks>
/// The lifetime of the result object is tied to the result handle. When the result is no longer needed, call
/// <%- globalPrefix %>ResultCloseHandle to release the result object.
/// </remarks>
HRESULT <%- prefix %><%- call.name %>GetResult(
    _Inout_ XAsyncBlock* async,
    _Out_ <%- globalPrefix %>ResultHandle* resultHandle,
    _Outptr_ <%- call.resultDatatype.prefix %><%- call.resultDatatype.name %>** result
) noexcept;
<%  } // end if
} // end for %>

}