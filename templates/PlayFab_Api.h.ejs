// Copyright (c) Microsoft Corporation
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

#if !defined(__cplusplus)
#error C++11 required
#endif

#pragma once

#include <playfab/PlayFab<%- api.name %>DataModels.h>
#include <playfab/PlayFabGlobal.h><%
if (!categorizedApi.otherCallsRequireSecretKey) { %>
#include <playfab/PlayFabEntity.h><% 
} %>

extern "C"
{
<%
for (var i = 0; i < categorizedApi.otherCalls.length; i++) {
    var call = categorizedApi.otherCalls[i]; 
    var contextHandleParam = categorizedApi.otherCallsRequireSecretKey || call.auth === "None" ? "PlayFabStateHandle stateHandle" : "PlayFabEntityHandle entityHandle"; 
    var requestParam = call.request === "void" ? "" : "_In_ const PlayFab" + api.name + call.request + "* request,\n    "; %>
/// <summary>
<%- getFormattedCallDescription(api.name, call) %>
/// </summary><%
    if (categorizedApi.otherCallsRequireSecretKey || call.auth === "None") { %>
/// <param name="stateHandle">PlayFabStateHandle returned from PlayFabInitialize call.</param><%
    } else { %>
/// <param name="entityHandle">PlayFabEntityHandle returned from a auth call.</param><%
    } 
    if (!(call.request === "void")) { %>
/// <param name="request">Populated request object.</param><%
    } %>
/// <param name="async">XAsyncBlock for the async operation.</param>
/// <returns>Result code for this API operation.</returns>
/// <remarks><%
    if (call.result === "void"|| call.url === "/Authentication/GetEntityToken") { %>
/// Call <see cref="XAsyncGetStatus"/> to get the status of the operation.<%
    } else { %>
/// If successful, call <see cref="PlayFab<%- api.name %><%- call.name %>GetResult"/> to get the result.<%
    } %>
/// </remarks>
HRESULT PlayFab<%- api.name %><%- call.name %>Async(
    _In_ <%- contextHandleParam %>,
    <%- requestParam %>_Inout_ XAsyncBlock* async
) noexcept;
<%  if (call.result === "void" || call.url === "/Authentication/GetEntityToken") { 
        // No Get Result method needed
    } else if (isFixedSize(api.datatypes[call.result])) { %>
/// <summary>
/// Gets the result of a successful PlayFab<%- api.name %><%- call.name %>Async call.
/// </summary>
/// <param name="async">XAsyncBlock for the async operation.</param>
/// <param name="result">PlayFab<%- api.name %><%- call.result %> object that will be populated with the result.</param>
/// <returns>Result code for this API operation.</returns>
HRESULT PlayFab<%- api.name %><%- call.name %>GetResult(
    _Inout_ XAsyncBlock* async,
    _Out_ PlayFab<%- api.name %><%- call.result %>* result
) noexcept;
<%  } else if (isSerializable(api.datatypes[call.result])) { %>
/// <summary>
/// Get the size in bytes needed to store the result of a <%- call.name %> call.
/// </summary>
/// <param name="async">XAsyncBlock for the async operation.</param>
/// <param name="bufferSize">The buffer size in bytes required for the result.</param>
/// <returns>Result code for this API operation.</returns>
HRESULT PlayFab<%- api.name %><%- call.name %>GetResultSize(
    _Inout_ XAsyncBlock* async,
    _Out_ size_t* bufferSize
) noexcept;

/// <summary>
/// Gets the result of a successful PlayFab<%- api.name %><%- call.name %>Async call.
/// </summary>
/// <param name="async">XAsyncBlock for the async operation.</param>
/// <param name="bufferSize">The size of the buffer for the result object.</param>
/// <param name="buffer">Byte buffer used for the result value and its fields.</param>
/// <param name="result">Pointer to the result object.</param>
/// <param name="bufferUsed">The number of bytes in the provided buffer that were used.</param>
/// <returns>Result code for this API operation.</returns>
/// <remarks>
/// result is a pointer within buffer and does not need to be freed separately.
/// </remarks>
HRESULT PlayFab<%- api.name %><%- call.name %>GetResult(
    _Inout_ XAsyncBlock* async,
    _In_ size_t bufferSize,
    _Out_writes_bytes_to_(bufferSize, *bufferUsed) void* buffer,
    _Outptr_ PlayFab<%- api.name %><%- call.result %>** result,
    _Out_opt_ size_t* bufferUsed
) noexcept;
<%  } else { %>
/// <summary>
/// Gets the result of a successful PlayFab<%- api.name %><%- call.name %>Async call.
/// </summary>
/// <param name="async">XAsyncBlock for the async operation.</param>
/// <param name="resultHandle">Opaque handle to the result object.</param>
/// <param name="result">Pointer to the result object.</param>
/// <returns>Result code for this API operation.</returns>
/// <remarks>
/// The lifetime of the result object is tied to the result handle. When the result is no longer needed, call
/// PlayFabResultCloseHandle to release the result object.
/// </remarks>
HRESULT PlayFab<%- api.name %><%- call.name %>GetResult(
    _Inout_ XAsyncBlock* async,
    _Out_ PlayFabResultHandle* resultHandle,
    _Outptr_ PlayFab<%- api.name %><%- call.result %>** result
) noexcept;
<%  } // end if
} // end for %>

}