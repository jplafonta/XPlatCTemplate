// Copyright (c) Microsoft Corporation
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

#if !defined(__cplusplus)
#error C++11 required
#endif

#pragma once

#include <playfab/PlayFabEntity.h>
#include <playfab/PlayFab<%- api.name %>DataModels.h>

extern "C"
{
<% for (var i = 0; i < categorizedApi.loginCalls.length; i++) { var call = categorizedApi.loginCalls[i]; %>
/// <summary>
<%- getFormattedCallDescription(api.name, call) %>
/// </summary>
/// <param name="stateHandle">PlayFabStateHandle returned from PlayFabInitialize call.</param>
/// <param name="request">Populated request object.</param>
/// <param name="async">XAsyncBlock for the async operation.</param>
/// <returns>Result code for this API operation.</returns>
/// <remarks>
/// If successful, call <see cref="PlayFabGetAuthResult"/> to get the result. The resulting PlayFabEntityHandle
/// will be used to authenticate future PlayFab calls.
/// </remarks>
HRESULT PlayFab<%- api.name %><%- call.name %>Async(
    _In_ PlayFabStateHandle stateHandle,
    _In_ const PlayFab<%- api.name %><%- call.request %>* request,
    _Inout_ XAsyncBlock* async
) noexcept;
<% 
// Explicitly add XUser login API alongside generated LoginWithXbox API
if (api.name === "Client" && call.name === "LoginWithXbox") { %>
#if HC_PLATFORM == HC_PLATFORM_GDK
/// <summary>
/// Login using a GDK XUser handle. The API will first acquire an XToken and then authenticate with PlayFab service.
/// The returned Entity will hold an XUser reference (via XUserDuplicateHandle) until it is closed. The stored XUserHandle
/// will be used to get a new XToken prior to refreshing PlayFab auth tokens.
/// </summary>
/// <param name="stateHandle">PlayFabStateHandle returned from PlayFabInitialize call.</param>
/// <param name="request">Populated request object.</param>
/// <param name="async">XAsyncBlock for the async operation.</param>
/// <returns>Result code for this API operation.</returns>
/// <remarks>
/// If successful, call <see cref="PlayFabGetAuthResult"/> to get the result. The resulting PlayFabEntityHandle
/// will be used to authenticate future PlayFab calls.
/// </remarks>
HRESULT PlayFabClientLoginWithXUserAsync(
    _In_ PlayFabStateHandle stateHandle,
    _In_ const PlayFabClientLoginWithXUserRequest* request,
    _Inout_ XAsyncBlock* async
) noexcept;
#endif
<% } // end if
} // end for%>
}
