#pragma once

#include "XAsyncHelper.h"

namespace PlayFabUnit
{

<% for (let typeKey in featureGroup.datatypes) {
    datatype = featureGroup.datatypes[typeKey];
    if (!datatype.isResult) { 
        // Only define result holder if the datatype is returned from an API
        continue;
    }
    var resultHolderName = datatype.name + "Holder"; %>
struct <%- resultHolderName %> : public XAsyncResult, public std::enable_shared_from_this<<%- resultHolderName %>>
{<% 
    if (isFixedSize(datatype)) { %>
    <%- resultHolderName %>() = default;
    <%- resultHolderName %>(const <%- resultHolderName %>&) = default;
    <%- resultHolderName %>(<%- resultHolderName %>&&) = default;
    <%- resultHolderName %>& operator=(const <%- resultHolderName %>&) = default;
    <%- resultHolderName %>& operator=(<%- resultHolderName %>&&) = default;
    ~<%- resultHolderName %>() = default;

    <%- datatype.prefix + datatype.name %> result{};<%
    } else { %>
    <%- resultHolderName %>() = default;
    <%- resultHolderName %>(const <%- resultHolderName %>&) = delete;
    <%- resultHolderName %>(<%- resultHolderName %>&&) = default;
    <%- resultHolderName %>& operator=(const <%- resultHolderName %>&) = delete;
    <%- resultHolderName %>& operator=(<%- resultHolderName %>&&) = default;
    ~<%- resultHolderName %>() = default;

    <%- datatype.prefix + datatype.name %>* result{ nullptr };<%
    } // end if %>
};
<% } // end for %>

}
