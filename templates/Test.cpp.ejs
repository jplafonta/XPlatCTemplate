#include "TestAppPch.h"
#include "TestContext.h"
#include "TestApp.h"
#include "AutoGen<%- featureGroup.name %>Tests.h"
#include "XAsyncHelper.h"
#include "playfab/PFAuthentication.h"

namespace PlayFabUnit
{

AutoGen<%- featureGroup.name %>Tests::<%- featureGroup.name %>TestData AutoGen<%- featureGroup.name %>Tests::testData;

void AutoGen<%- featureGroup.name %>Tests::Log(std::stringstream& ss)
{
    TestApp::LogPut(ss.str().c_str());
    ss.str(std::string());
    ss.clear();
}

HRESULT AutoGen<%- featureGroup.name %>Tests::LogHR(HRESULT hr)
{
    if( TestApp::ShouldTrace(PFTestTraceLevel::Information) )
    {
        TestApp::Log("Result: 0x%0.8x", hr);
    }

    return hr;
}

void AutoGen<%- featureGroup.name %>Tests::AddTests()
{
    // Generated tests <%

for (var i = 0; i < featureGroup.calls.length; i++) 
{
%>
<%
    var call = featureGroup.calls[i];
    var testName = "Test" + featureGroup.name + call.name;
    let testStatusListStatus = testStatusMap[testName];
    let passingWithDataTest = (testStatusListStatus == "PassingWithData");
    let passingButNoDataTest = (testStatusListStatus == "PassingButNoData");
    let failingTest = (testStatusListStatus == "Failing");
    let crashingTest = (testStatusListStatus == "Crashing");
    if( ([ "Groups", "Data" ].includes(featureGroup.name)) && (!passingWithDataTest && !passingButNoDataTest && !failingTest && !crashingTest) ) {
        throw Error('Test ' + testName + ' not found in TestStatus.json');
    }

    let skipTest = (failingTest || crashingTest);

    if( call.name ) {
        for (var j = 0; j < prerequisiteCalls[call.name].length; j++)
        {
            var prereqCall = prerequisiteCalls[call.name][j];
            var prereqName = "Test" + featureGroup.name + call.name + "Prerequisite" + prereqCall.name;
      %>    <% if( skipTest ) { %>//<% } %>AddTest("<%- prereqName %>", &AutoGen<%- featureGroup.name %>Tests::<%- prereqName %>);
<%
        }
%>    <% if( skipTest ) { %>//<% } %>AddTest("<%- testName %>", &AutoGen<%- featureGroup.name %>Tests::<%- testName %>);<% if( crashingTest ) { %> // TODO: debug crashing test<% } %><% if( passingButNoDataTest ) { %> // TODO: debug passing test but no data<% } %><% if( failingTest ) { %> // TODO: debug failing test<% } %>
<%  
        for (var j = 0; j < cleanupCalls[call.name].length; j++)
        {
            var cleanupCall = cleanupCalls[call.name][j];
            var cleanupName = "Test" + featureGroup.name + call.name + "Cleanup" + cleanupCall.name;
      %>    <% if( skipTest ) { %>//<% } %>AddTest("<%- cleanupName %>", &AutoGen<%- featureGroup.name %>Tests::<%- cleanupName %>);
<%
        }
} } %>}

void AutoGen<%- featureGroup.name %>Tests::ClassSetUp()
{
    HRESULT hr = PFAdminInitialize(testTitleData.titleId.data(), testTitleData.developerSecretKey.data(), nullptr, &stateHandle);
    assert(SUCCEEDED(hr));
    if (SUCCEEDED(hr))
    {
        PFAuthenticationLoginWithCustomIDRequest request{};
        request.customId = "CustomId";
        bool createAccount = true;
        request.createAccount = &createAccount;
        request.titleId = testTitleData.titleId.data();

        PFGetPlayerCombinedInfoRequestParams combinedInfoRequestParams{};
        combinedInfoRequestParams.getCharacterInventories = true;
        combinedInfoRequestParams.getCharacterList = true;
        combinedInfoRequestParams.getPlayerProfile = true;
        combinedInfoRequestParams.getPlayerStatistics = true;
        combinedInfoRequestParams.getTitleData = true;
        combinedInfoRequestParams.getUserAccountInfo = true;
        combinedInfoRequestParams.getUserData = true;
        combinedInfoRequestParams.getUserInventory = true;
        combinedInfoRequestParams.getUserReadOnlyData = true;
        combinedInfoRequestParams.getUserVirtualCurrency = true;
        request.infoRequestParameters = &combinedInfoRequestParams;

        XAsyncBlock async{};
        hr = PFAuthenticationClientLoginWithCustomIDAsync(stateHandle, &request, &async);
        assert(SUCCEEDED(hr));
        if (SUCCEEDED(hr))
        {
            // Synchronously what for login to complete
            hr = XAsyncGetStatus(&async, true);
            assert(SUCCEEDED(hr));
            if (SUCCEEDED(hr))
            {
                hr = PFAuthenticationClientLoginGetResult(&async, &titlePlayerHandle);
                assert(SUCCEEDED(hr) && titlePlayerHandle);

                hr = PFTitlePlayerGetEntityHandle(titlePlayerHandle, &entityHandle);
                assert(SUCCEEDED(hr) && entityHandle);

                hr = PFTitlePlayerGetPlayerCombinedInfo(titlePlayerHandle, &playerCombinedInfo);
                assert(SUCCEEDED(hr));
            }
        }

        request.customId = "CustomId2";
        async = {};
        hr = PFAuthenticationClientLoginWithCustomIDAsync(stateHandle, &request, &async);
        assert(SUCCEEDED(hr));
        if (SUCCEEDED(hr))
        {
            // Synchronously what for login to complete
            hr = XAsyncGetStatus(&async, true);
            assert(SUCCEEDED(hr));
            if (SUCCEEDED(hr))
            {
                hr = PFAuthenticationClientLoginGetResult(&async, &titlePlayerHandle2);
                assert(SUCCEEDED(hr) && titlePlayerHandle2);

                hr = PFTitlePlayerGetEntityHandle(titlePlayerHandle2, &entityHandle2);
                assert(SUCCEEDED(hr) && entityHandle2);

                hr = PFTitlePlayerGetPlayerCombinedInfo(titlePlayerHandle2, &playerCombinedInfo2);
                assert(SUCCEEDED(hr));
            }
        }

        PFAuthenticationGetEntityTokenRequest titleTokenRequest{};
        async = {};
        hr = PFAuthenticationGetEntityTokenAsync(stateHandle, &titleTokenRequest, &async);
        assert(SUCCEEDED(hr));
        if (SUCCEEDED(hr))
        {
            // Synchronously what for login to complete
            hr = XAsyncGetStatus(&async, true);
            assert(SUCCEEDED(hr));
            
            if (SUCCEEDED(hr))
            {
                hr = PFAuthenticationGetEntityTokenGetResult(&async, &titleEntityHandle);
                assert(SUCCEEDED(hr));
            }
        }
    }
}

void AutoGen<%- featureGroup.name %>Tests::ClassTearDown()
{
    PFTitlePlayerCloseHandle(titlePlayerHandle);
    PFEntityCloseHandle(entityHandle);
    PFEntityCloseHandle(titleEntityHandle);

    XAsyncBlock async{};
    HRESULT hr = PFUninitializeAsync(stateHandle, &async);
    assert(SUCCEEDED(hr));

    hr = XAsyncGetStatus(&async, true);
    assert(SUCCEEDED(hr));

    UNREFERENCED_PARAMETER(hr);
}

void AutoGen<%- featureGroup.name %>Tests::SetUp(TestContext& testContext)
{
    if (!entityHandle)
    {
        testContext.Skip("Skipping test because login failed");
    }


}

<% for (var i = 0; i < featureGroup.calls.length; i++) 
{
    var call = featureGroup.calls[i];
%>
#pragma region <%- call.name %>

<%
    for (var j = 0; j < prerequisiteCalls[call.name].length; j++)
    {
        var prereqCall = prerequisiteCalls[call.name][j];
        var prereqContextHandleParam = "stateHandle";
        if (prereqCall.entityRequired)
        {
            if (prereqCall.entityRequired === "TitlePlayer") {
                prereqContextHandleParam = "titlePlayerHandle";
            } else {
                prereqContextHandleParam = "entityHandle";
            }
        }
        if (prereqCall.name in callingEntityOverrides)
        {
            prereqContextHandleParam = callingEntityOverrides[prereqCall.name];
        }
        var prereqAsyncName = prefix + prereqCall.name + "Async"; 
        var prereqName =  "Test" + featureGroup.name + call.name + "Prerequisite" + prereqCall.name;
%>void AutoGen<%- featureGroup.name %>Tests::<%- prereqName %>(TestContext& testContext)
{
    struct <%- prereqCall.name %>Result : public XAsyncResult
    {
<% if (!prereqCall.resultDatatype) {
   } else if (isFixedSize(prereqCall.resultDatatype)) { %>        <%- prereqCall.resultDatatype.prefix + prereqCall.resultDatatype.name %> result{};
<% } else { %>        <%- prereqCall.resultDatatype.prefix + prereqCall.resultDatatype.name %>* result = nullptr;
<% } // end if %>        HRESULT Get(XAsyncBlock* async) override
        { <% if (!prereqCall.resultDatatype) { %>
            // No Get Result method needed
            return LogHR(XAsyncGetStatus(async, true));<% } else if (isFixedSize(prereqCall.resultDatatype)) { %>
            return LogHR(<%- prefix + prereqCall.name %>GetResult(async, &result)); <% } else { %>
            size_t requiredBufferSize;
            RETURN_IF_FAILED(LogHR(<%- prefix + prereqCall.name %>GetResultSize(async, &requiredBufferSize)));

            resultBuffer.resize(requiredBufferSize);
            return LogHR(<%- prefix + prereqCall.name %>GetResult(async, resultBuffer.size(), resultBuffer.data(), &result, nullptr));<% } // end if %>
        }

        HRESULT Validate()
        {
<% if (!prereqCall.resultDatatype) { 
%>            return S_OK;
<% } else if (isFixedSize(prereqCall.resultDatatype)) { 
%>            Log<%- prereqCall.resultDatatype.prefix + prereqCall.resultDatatype.name %>( &result );
            return Store<%- call.name %>Prerequisite<%- prereqCall.resultDatatype.prefix + prereqCall.resultDatatype.name %>( &result );
<% } else { 
%>            Log<%- prereqCall.resultDatatype.prefix + prereqCall.resultDatatype.name %>( result );
            return Store<%- call.name %>Prerequisite<%- prereqCall.resultDatatype.prefix + prereqCall.resultDatatype.name %>( result );
<% } // end if %>        }
    };

    auto async = std::make_unique<XAsyncHelper<<%- prereqCall.name %>Result>>(testContext);
<% if (prereqCall.requestDatatype) { 
    let requestNamespace = "PlayFab::" + (prereqCall.requestDatatype.isShared ? "" : featureGroup.name + "Models::"); %>
    <%- requestNamespace + prereqCall.requestDatatype.name %> request;
    Fill<%- call.name %>Prerequisite<%- prereqCall.requestDatatype.name %>( &request );
    Log<%- prereqCall.requestDatatype.name %>( &request, "<%- testName %>" );
    HRESULT hr = <%- prereqAsyncName %>(<%- prereqContextHandleParam %>, &request, &async->asyncBlock); <% } else { %>
    HRESULT hr = <%- prereqAsyncName %>(<%- prereqContextHandleParam %>, &async->asyncBlock); <% } %>
    if (FAILED(hr))
    {
        testContext.Fail("<%- prefix %><%- featureGroup.name + call.name + "Prerequisite" + prereqCall.name %>Async", hr);
        return;
    }
    async.release(); 
} 
<% }

    var contextHandleParam = "stateHandle";
    if (call.entityRequired)
    {
        if (call.entityRequired === "TitlePlayer") {
            contextHandleParam = "titlePlayerHandle";
        } else {
            contextHandleParam = "entityHandle";
        }
    }
    if (call.name in callingEntityOverrides)
    {
        contextHandleParam = callingEntityOverrides[call.name];
    }
    var asyncName = prefix + call.name + "Async"; 
    var testName =  "Test" + featureGroup.name + call.name;
%>void AutoGen<%- featureGroup.name %>Tests::<%- testName %>(TestContext& testContext)
{
    struct <%- call.name %>Result : public XAsyncResult
    {
<% if (!call.resultDatatype) {
   } else if (isFixedSize(call.resultDatatype)) { %>        <%- call.resultDatatype.prefix + call.resultDatatype.name %> result{};
<% } else { %>        <%- call.resultDatatype.prefix + call.resultDatatype.name %>* result = nullptr;
<% } // end if %>        HRESULT Get(XAsyncBlock* async) override
        { <% if (!call.resultDatatype) { %>
            // No Get Result method needed
            return LogHR(XAsyncGetStatus(async, true));<% } else if (isFixedSize(call.resultDatatype)) { %>
            return LogHR(<%- prefix + call.name %>GetResult(async, &result)); <% } else { %>
            size_t requiredBufferSize;
            RETURN_IF_FAILED(LogHR(<%- prefix + call.name %>GetResultSize(async, &requiredBufferSize)));

            resultBuffer.resize(requiredBufferSize);
            return LogHR(<%- prefix + call.name %>GetResult(async, resultBuffer.size(), resultBuffer.data(), &result, nullptr)); <% } // end if %>
        }

        HRESULT Validate()
        {
<% if (!call.resultDatatype) { 
%>            return S_OK;
<% } else if (isFixedSize(call.resultDatatype)) { 
%>            Log<%- call.resultDatatype.prefix + call.resultDatatype.name %>( &result );
            return Validate<%- call.resultDatatype.prefix + call.resultDatatype.name %>( &result );
<% } else { 
%>            Log<%- call.resultDatatype.prefix + call.resultDatatype.name %>( result );
            return Validate<%- call.resultDatatype.prefix + call.resultDatatype.name %>( result );
<% } // end if %>        }
    };

    auto async = std::make_unique<XAsyncHelper<<%- call.name %>Result>>(testContext);
<% if (call.requestDatatype) { 
    let requestNamespace = "PlayFab::" + (call.requestDatatype.isShared ? "" : featureGroup.name + "Models::"); %>
    <%- requestNamespace + call.requestDatatype.name %> request;
    Fill<%- call.requestDatatype.name %>( &request );
    Log<%- call.requestDatatype.name %>( &request, "<%- testName %>" );
    HRESULT hr = <%- asyncName %>(<%- contextHandleParam %>, &request, &async->asyncBlock); <% } else { %>
    HRESULT hr = <%- asyncName %>(<%- contextHandleParam %>, &async->asyncBlock); <% } %>
    if (FAILED(hr))
    {
        testContext.Fail("<%- prefix %><%- featureGroup.name + call.name %>Async", hr);
        return;
    }
    async.release(); 
}
<%
    for (var j = 0; j < cleanupCalls[call.name].length; j++)
    {
        var cleanupCall = cleanupCalls[call.name][j];
        var cleanupContextHandleParam = "stateHandle";
        if (cleanupCall.entityRequired)
        {
            if (cleanupCall.entityRequired === "TitlePlayer") {
                cleanupContextHandleParam = "titlePlayerHandle";
            } else {
                cleanupContextHandleParam = "entityHandle";
            }
        }
        if (cleanupCall.name in callingEntityOverrides)
        {
            cleanupContextHandleParam = callingEntityOverrides[cleanupCall.name];
        }
        var cleanupAsyncName = prefix + cleanupCall.name + "Async"; 
        var cleanupName =  "Test" + featureGroup.name + call.name + "Cleanup" + cleanupCall.name;
%>void AutoGen<%- featureGroup.name %>Tests::<%- cleanupName %>(TestContext& testContext)
{
    struct <%- cleanupCall.name %>Result : public XAsyncResult
    {
<% if (!cleanupCall.resultDatatype) {
   } else if (isFixedSize(cleanupCall.resultDatatype)) { %>        <%- cleanupCall.resultDatatype.prefix + cleanupCall.resultDatatype.name %> result{};
<% } else { %>        <%- cleanupCall.resultDatatype.prefix + cleanupCall.resultDatatype.name %>* result = nullptr;
<% } // end if %>        HRESULT Get(XAsyncBlock* async) override
        { <% if (!cleanupCall.resultDatatype) { %>
            // No Get Result method needed
            return LogHR(XAsyncGetStatus(async, true));<% } else if (isFixedSize(cleanupCall.resultDatatype)) { %>
            return LogHR(<%- prefix + cleanupCall.name %>GetResult(async, &result)); <% } else { %>
            size_t requiredBufferSize;
            RETURN_IF_FAILED(LogHR(<%- prefix + cleanupCall.name %>GetResultSize(async, &requiredBufferSize)));

            resultBuffer.resize(requiredBufferSize);
            return LogHR(<%- prefix + cleanupCall.name %>GetResult(async, resultBuffer.size(), resultBuffer.data(), &result, nullptr)); <% } // end if %>
        }

        HRESULT Validate()
        {
<% if (!cleanupCall.resultDatatype) { 
%>            return S_OK;
<% } else if (isFixedSize(cleanupCall.resultDatatype)) { 
%>            Log<%- cleanupCall.resultDatatype.prefix + cleanupCall.resultDatatype.name %>( &result );
            return Store<%- call.name %>Cleanup<%- cleanupCall.resultDatatype.prefix + cleanupCall.resultDatatype.name %>( &result );
<% } else { 
%>            Log<%- cleanupCall.resultDatatype.prefix + cleanupCall.resultDatatype.name %>( result );
            return Store<%- call.name %>Cleanup<%- cleanupCall.resultDatatype.prefix + cleanupCall.resultDatatype.name %>( result );
<% } // end if %>        }
    };

    auto async = std::make_unique<XAsyncHelper<<%- cleanupCall.name %>Result>>(testContext);
<% if (cleanupCall.requestDatatype) { 
    let requestNamespace = "PlayFab::" + (cleanupCall.requestDatatype.isShared ? "" : featureGroup.name + "Models::"); %>
    <%- requestNamespace + cleanupCall.requestDatatype.name %> request;
    Fill<%- call.name %>Cleanup<%- cleanupCall.requestDatatype.name %>( &request );
    Log<%- cleanupCall.requestDatatype.name %>( &request, "<%- cleanupName %>" );
    HRESULT hr = <%- cleanupAsyncName %>(<%- cleanupContextHandleParam %>, &request, &async->asyncBlock); <% } else { %>
    HRESULT hr = <%- cleanupAsyncName %>(<%- cleanupContextHandleParam %>, &async->asyncBlock); <% } %>
    if (FAILED(hr))
    {
        testContext.Fail("<%- prefix %><%- featureGroup.name + call.name + "Cleanup" + cleanupCall.name %>Async", hr);
        return;
    }
    async.release(); 
} 
<% } %>
#pragma endregion
<% } %>

}
