#include "TestAppPch.h"
#include "TestContext.h"
#include "TestApp.h"
#include "AutoGen<%- api.name %>Tests.h"
#include "XAsyncHelper.h"
#include <playfab/PlayFabClientAuthApi.h>
#include <playfab/PlayFabClientApi.h>
#include <playfab/PlayFabProfilesApi.h>
#include <playfab/PlayFabAdminApi.h>
#include <playfab/PlayFabAuthenticationAuthApi.h>
#include <playfab/PlayFabClientDataModels.h>

namespace PlayFabUnit
{

void AutoGen<%- api.name %>Tests::Log(std::stringstream& ss)
{
    TestApp::LogPut(ss.str().c_str());
    ss.str(std::string());
    ss.clear();
}

HRESULT AutoGen<%- api.name %>Tests::LogHR(HRESULT hr)
{
    if( TestApp::ShouldTrace(PFTestTraceLevel::Information) )
    {
        TestApp::Log("Result: 0x%0.8x", hr);
    }

    return hr;
}

void AutoGen<%- api.name %>Tests::AddTests()
{
    // Generated prerequisites
<%
for (var i = 0; i < prerequisiteApis.length; i++) 
{
    var call = prerequisiteApis[i];
    var prereqName = "Prerequisite" + api.name + call.name;

    if( call.Name )
%>    AddTest("<%- prereqName %>", &AutoGen<%- api.name %>Tests::<%- prereqName %>);
<% } %>
    // Generated tests 
<%
for (var i = 0; i < categorizedApi.otherCalls.length; i++) 
{
    var call = categorizedApi.otherCalls[i];
    var testName = "Test" + api.name + call.name;
    let testStatusListStatus = testStatusMap[testName];
    let passingWithDataTest = (testStatusListStatus == "PassingWithData");
    let passingButNoDataTest = (testStatusListStatus == "PassingButNoData");
    let failingTest = (testStatusListStatus == "Failing");
    let crashingTest = (testStatusListStatus == "Crashing");
    if( (api.name == "Client" || api.name == "Groups") && (!passingWithDataTest && !passingButNoDataTest && !failingTest && !crashingTest) ) {
        throw Error('Test ' + testName + ' not found in TestStatus.json');
    }

    let skipTest = (failingTest || crashingTest);

    if( call.Name )
%>    <% if( skipTest ) { %>//<% } %>AddTest("<%- testName %>", &AutoGen<%- api.name %>Tests::<%- testName %>);<% if( crashingTest ) { %> // TODO: debug crashing test<% } %><% if( passingButNoDataTest ) { %> // TODO: debug passing test but no data<% } %><% if( failingTest ) { %> // TODO: debug failing test<% } %>
<% } %>}

void AutoGen<%- api.name %>Tests::ClassSetUp()
{
    HRESULT hr = PlayFabAdminInitialize(testTitleData.titleId.data(), testTitleData.developerSecretKey.data(), nullptr, &stateHandle);
    assert(SUCCEEDED(hr));
    if (SUCCEEDED(hr))
    {
        PlayFabClientLoginWithCustomIDRequest request{};
        request.customId = "CustomId";
        bool createAccount = true;
        request.createAccount = &createAccount;
        request.titleId = testTitleData.titleId.data();

        PlayFabClientGetPlayerCombinedInfoRequestParams combinedInfoRequestParams{};
        combinedInfoRequestParams.getCharacterInventories = true;
        combinedInfoRequestParams.getCharacterList = true;
        combinedInfoRequestParams.getPlayerProfile = true;
        combinedInfoRequestParams.getPlayerStatistics = true;
        combinedInfoRequestParams.getTitleData = true;
        combinedInfoRequestParams.getUserAccountInfo = true;
        combinedInfoRequestParams.getUserData = true;
        combinedInfoRequestParams.getUserInventory = true;
        combinedInfoRequestParams.getUserReadOnlyData = true;
        combinedInfoRequestParams.getUserVirtualCurrency = true;
        request.infoRequestParameters = &combinedInfoRequestParams;

        XAsyncBlock async{};
        hr = PlayFabClientLoginWithCustomIDAsync(stateHandle, &request, &async);
        assert(SUCCEEDED(hr));
        if (SUCCEEDED(hr))
        {
            // Synchronously what for login to complete
            hr = XAsyncGetStatus(&async, true);
            assert(SUCCEEDED(hr));
            if (SUCCEEDED(hr))
            {
                hr = PlayFabGetAuthResult(&async, &entityHandle);
                assert(SUCCEEDED(hr) && entityHandle != nullptr);

                hr = PlayFabEntityGetPlayerCombinedInfo(entityHandle, &playerCombinedInfo);
                assert(SUCCEEDED(hr));
            }
        }
    }
}

void AutoGen<%- api.name %>Tests::ClassTearDown()
{
    PlayFabEntityCloseHandle(entityHandle);

    XAsyncBlock async{};
    HRESULT hr = PlayFabCleanupAsync(stateHandle, &async);
    assert(SUCCEEDED(hr));

    hr = XAsyncGetStatus(&async, true);
    assert(SUCCEEDED(hr));

    UNREFERENCED_PARAMETER(hr);
}

void AutoGen<%- api.name %>Tests::SetUp(TestContext& testContext)
{
    if (!entityHandle)
    {
        testContext.Skip("Skipping test because login failed");
    }


}

<% for (var i = 0; i < prerequisiteApis.length; i++)
{
    var call = prerequisiteApis[i];
    var contextHandleParam = categorizedApi.otherCallsRequireSecretKey || call.auth === "None" ? "stateHandle" : "entityHandle";
    var asyncName = "PlayFab" + api.name + call.name + "Async"; 
    var prereqName =  "Prerequisite" + api.name + call.name;
%>void AutoGen<%- api.name %>Tests::<%- prereqName %>(TestContext& prereqContext)
{
    struct <%- call.name %>Result : public XAsyncResult
    {
<% if (call.result === "void" || call.url === "/Authentication/GetEntityToken") {
   } else if (isFixedSize(api.datatypes[call.result])) { %>        PlayFab<%- api.name %><%- call.result %> result{};
<% } else if (isSerializable(api.datatypes[call.result])) { %>        PlayFab<%- api.name %><%- call.result %>* result = nullptr;
<% } else { %>        PlayFab<%- api.name %><%- call.result %>* result = nullptr;
<% } // end if %>        HRESULT Get(XAsyncBlock* async) override
        { <% if (call.result === "void" || call.url === "/Authentication/GetEntityToken") { %>
            // No Get Result method needed
            return LogHR(XAsyncGetStatus(async, true));<% } else if (isFixedSize(api.datatypes[call.result])) { %>
            return LogHR(PlayFab<%- api.name + call.name %>GetResult(async, &result)); <% } else if (isSerializable(api.datatypes[call.result])) { %>
            size_t requiredBufferSize;
            RETURN_IF_FAILED(LogHR(PlayFab<%- api.name %><%- call.name %>GetResultSize(async, &requiredBufferSize)));

            resultBuffer.resize(requiredBufferSize);
            return LogHR(PlayFab<%- api.name + call.name %>GetResult(async, resultBuffer.size(), resultBuffer.data(), &result, nullptr)); <% } else { %>
            return LogHR(PlayFab<%- api.name + call.name %>GetResult(async, &resultHandle, &result)); <% } // end if %>
        }

        HRESULT Validate()
        {
<% if (call.result === "void" || call.url === "/Authentication/GetEntityToken") { 
%>            return S_OK;
<% } else if (isFixedSize(api.datatypes[call.result])) { 
%>            LogPlayFabPrerequisite<%- api.name %><%- call.result %>( &result );
            return StorePlayFabPrerequisite<%- api.name %><%- call.result %>( &result );
<% } else if (isSerializable(api.datatypes[call.result])) { 
%>            LogPlayFabPrerequisite<%- api.name %><%- call.result %>( result );
            return StorePlayFabPrerequisite<%- api.name %><%- call.result %>( result );
<% } else { 
%>            LogPlayFabPrerequisite<%- api.name %><%- call.result %>( result );
            return StorePlayFabPrerequisite<%- api.name %><%- call.result %>( result );
<% } // end if %>        }
    };

    auto async = std::make_unique<XAsyncHelper<<%- call.name %>Result>>(prereqContext);
<% if (call.request != "void") { %>
    PlayFab::<%- api.name %>Models::<%- call.request %> request;
    FillPlayFabPrerequisite<%- api.name + call.request %>( &request );
    LogPlayFabPrerequisite<%- api.name + call.request %>( &request, "<%- prereqName %>" );
    HRESULT hr = <%- asyncName %>(<%- contextHandleParam %>, &request, &async->asyncBlock); <% } else { %>
    HRESULT hr = <%- asyncName %>(<%- contextHandleParam %>, &async->asyncBlock); <% } %>
    if (FAILED(hr))
    {
        prereqContext.Fail("PlayFab<%- api.name + call.name %>Async", hr);
        return;
    }
    async.release(); 
} 

<% } %>
<% for (var i = 0; i < categorizedApi.otherCalls.length; i++) 
{
    var call = categorizedApi.otherCalls[i];
    var contextHandleParam = categorizedApi.otherCallsRequireSecretKey || call.auth === "None" ? "stateHandle" : "entityHandle";
    var asyncName = "PlayFab" + api.name + call.name + "Async"; 
    var testName =  "Test" + api.name + call.name;
%>void AutoGen<%- api.name %>Tests::<%- testName %>(TestContext& testContext)
{
    struct <%- call.name %>Result : public XAsyncResult
    {
<% if (call.result === "void" || call.url === "/Authentication/GetEntityToken") {
   } else if (isFixedSize(api.datatypes[call.result])) { %>        PlayFab<%- api.name %><%- call.result %> result{};
<% } else if (isSerializable(api.datatypes[call.result])) { %>        PlayFab<%- api.name %><%- call.result %>* result = nullptr;
<% } else { %>        PlayFab<%- api.name %><%- call.result %>* result = nullptr;
<% } // end if %>        HRESULT Get(XAsyncBlock* async) override
        { <% if (call.result === "void" || call.url === "/Authentication/GetEntityToken") { %>
            // No Get Result method needed
            return LogHR(XAsyncGetStatus(async, true));<% } else if (isFixedSize(api.datatypes[call.result])) { %>
            return LogHR(PlayFab<%- api.name + call.name %>GetResult(async, &result)); <% } else if (isSerializable(api.datatypes[call.result])) { %>
            size_t requiredBufferSize;
            RETURN_IF_FAILED(LogHR(PlayFab<%- api.name %><%- call.name %>GetResultSize(async, &requiredBufferSize)));

            resultBuffer.resize(requiredBufferSize);
            return LogHR(PlayFab<%- api.name + call.name %>GetResult(async, resultBuffer.size(), resultBuffer.data(), &result, nullptr)); <% } else { %>
            return LogHR(PlayFab<%- api.name + call.name %>GetResult(async, &resultHandle, &result)); <% } // end if %>
        }

        HRESULT Validate()
        {
<% if (call.result === "void" || call.url === "/Authentication/GetEntityToken") { 
%>            return S_OK;
<% } else if (isFixedSize(api.datatypes[call.result])) { 
%>            LogPlayFab<%- api.name %><%- call.result %>( &result );
            return ValidatePlayFab<%- api.name %><%- call.result %>( &result );
<% } else if (isSerializable(api.datatypes[call.result])) { 
%>            LogPlayFab<%- api.name %><%- call.result %>( result );
            return ValidatePlayFab<%- api.name %><%- call.result %>( result );
<% } else { 
%>            LogPlayFab<%- api.name %><%- call.result %>( result );
            return ValidatePlayFab<%- api.name %><%- call.result %>( result );
<% } // end if %>        }
    };

    auto async = std::make_unique<XAsyncHelper<<%- call.name %>Result>>(testContext);
<% if (call.request != "void") { %>
    PlayFab::<%- api.name %>Models::<%- call.request %> request;
    FillPlayFab<%- api.name + call.request %>( &request );
    LogPlayFab<%- api.name + call.request %>( &request, "<%- testName %>" );
    HRESULT hr = <%- asyncName %>(<%- contextHandleParam %>, &request, &async->asyncBlock); <% } else { %>
    HRESULT hr = <%- asyncName %>(<%- contextHandleParam %>, &async->asyncBlock); <% } %>
    if (FAILED(hr))
    {
        testContext.Fail("PlayFab<%- api.name + call.name %>Async", hr);
        return;
    }
    async.release(); 
} 
<% } %>
}
