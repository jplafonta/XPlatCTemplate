#pragma once

#include <playfab/PF<%- featureGroup.name %>DataModels.h><%
if (!(featureGroup.name === "Shared")) { %>
#include <Shared/SharedDataModels.h><%
} %>
#include "BaseModel.h"

namespace PlayFab
{<%
if (!(featureGroup.name === "Shared")) { %>
namespace <%- featureGroup.name %>Models
{<%
} %>

// <%- featureGroup.name %> Classes<%
for (var typeIndex = 0; typeIndex < featureGroup.sortedClasses.length; typeIndex++) {
    var datatype = featureGroup.sortedClasses[typeIndex]; 
    var propertyVisibility = datatype.isInternalOnly ? "public" : "private"; %>
struct <%- datatype.name %> : <%- getBaseTypes(datatype) %>
{
    <%- datatype.name %>();<%
    if (canDefaultCopyConstructor(datatype)) { %>
    <%- datatype.name %>(const <%- datatype.name %>&) = default;
    <%- datatype.name %>(<%- datatype.name %>&&) = default;<%
    } else { %>
    <%- datatype.name %>(const <%- datatype.name %>& src);
    <%- datatype.name %>(<%- datatype.name %>&& src);<%
    } // end if
    if (!datatype.isInternalOnly){ %>
    <%- datatype.name %>(const <%- prefix %><%- datatype.name %>& src);<%
    } // endif %>
    <%- datatype.name %>& operator=(const <%- datatype.name %>&) = delete;
    ~<%- datatype.name %>() = default;

    void FromJson(const JsonValue& input) override;
    JsonValue ToJson() const override;
<%  if (isSerializable(datatype)) { %>
    size_t SerializedSize() const override;
    void Serialize(void* buffer, size_t bufferSize) const override;
<%  } // end if %>
<%- propertyVisibility %>:<%
    for (var propertyIndex = 0; propertyIndex < datatype.properties.length; propertyIndex++) {
        var property = datatype.properties[propertyIndex];
%><%- getPropertyDefinition(datatype, property, true) %><%
    } // end for %>
};
<% } // end for 
if (!(featureGroup.name === "Shared")) { %>
} // namespace <%- featureGroup.name %>Models<%
} %>

namespace JsonUtils
{
// Serialization methods for public models
<% for (var typeIndex = 0; typeIndex < featureGroup.sortedClasses.length; typeIndex++) { 
    var datatype = featureGroup.sortedClasses[typeIndex]; 
    if (datatype.isInternalOnly) {
        continue;
    } %>
template<> inline JsonValue ToJson<>(const <%- datatype.prefix %><%- datatype.name %>& input);<%
} // end for %>
} // namespace JsonUtils

// EnumRange definitions used for Enum (de)serialization<%
for (var typeIndex = 0; typeIndex < featureGroup.datatypes.length; typeIndex++) { 
    var datatype = featureGroup.datatypes[typeIndex];
    if (!datatype.isenum) {
        continue;
    }
    var maxval = datatype.enumvalues[enumtype.enumvalues.length-1]; %>
template<> struct EnumRange<<%- datatype.prefix %><%- datatype.name %>>
{
    static constexpr <%- datatype.prefix %><%- datatype.name %> maxValue = <%- datatype.prefix %><%- datatype.name %>::<%- maxval.name %>;
};
<% } // end for %>
} // namespace PlayFab
