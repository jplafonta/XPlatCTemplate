#include "stdafx.h"
#include <playfab/PF<%- featureGroup.name %>.h>
#include "<%- featureGroup.name %>.h"
#include "ApiAsyncProviders.h"
#include "GlobalState.h"
#include "Entity.h"

using namespace PlayFab;
using namespace PlayFab::<%- featureGroup.name %>Models;
<% var apiMemberName = featureGroup.name.charAt(0).toLowerCase() + featureGroup.name.slice(1) + "API";
for (var i = 0; i < featureGroup.calls.length; i++) {
    var call = featureGroup.calls[i]; 
    var contextHandleParam = call.entityRequired ? globalPrefix + "EntityHandle contextHandle" : globalPrefix + "StateHandle contextHandle";
    var requestParam = call.requestDatatype ? "_In_ const " + call.requestDatatype.prefix + call.requestDatatype.name + "* request,\n    " : "";
    var makeProvider = "MakeProvider";
    if (call.entityRequired) { 
        makeProvider = "MakeEntityProvider";
    } else if (call.entityReturned) {
        makeProvider = "MakeAuthProvider";
    }
    var entityParam = call.entityRequired ? "contextHandle->entity, " : "";
    var apiInstanceBinder = call.entityRequired ? "&contextHandle->entity->" + apiMemberName + ", " : "";
    var requestBinder = call.requestDatatype ? (call.entityRequired ? call.requestDatatype.name + "{ *request }, " : "*request, ") : "";
    var secretKeyBinder = call.auth === "SecretKey" ? "contextHandle->state->SecretKey(), " : "";
    var httpClientBinder = call.entityRequired ? "" : "contextHandle->state->HttpClient(), "; %>
HRESULT <%- prefix %><%- call.name %>Async(
    _In_ <%- contextHandleParam %>,
    <%- requestParam %>_In_ XAsyncBlock* async
) noexcept
{
    RETURN_HR_INVALIDARG_IF_NULL(contextHandle);<%
    if (call.requestDatatype) { %>
    RETURN_HR_INVALIDARG_IF_NULL(request);<%
    } %>

    auto provider = <%- makeProvider %>(async, __FUNCTION__, <%- entityParam %>std::bind(&<%- featureGroup.name %>API::<%- call.name %>, <%- apiInstanceBinder %><%- requestBinder%><%- secretKeyBinder %><%- httpClientBinder %>std::placeholders::_1));
    return Provider::Run(UniquePtr<Provider>(provider.release()));
}
<%  
    // Explicitly add XUser login API alongside generated LoginWithXbox API
    if (call.name === "ClientLoginWithXbox") { %>
#if HC_PLATFORM == HC_PLATFORM_GDK
HRESULT <%- globalPrefix %>AuthenticationLoginWithXUserAsync(
    _In_ <%- globalPrefix %>StateHandle stateHandle,
    _In_ const <%- globalPrefix %>AuthenticationLoginWithXUserRequest* request,
    _Inout_ XAsyncBlock* async
) noexcept
{
    RETURN_HR_INVALIDARG_IF_NULL(stateHandle);
    RETURN_HR_INVALIDARG_IF_NULL(request);

    auto provider = MakeAuthProvider(async, __FUNCTION__, std::bind(&AuthenticationAPI::LoginWithXUser, *request, stateHandle->state->HttpClient(), std::placeholders::_1));
    return Provider::Run(UniquePtr<Provider>(provider.release()));
}
#endif
<%  } // end if

    if ((!call.resultDatatype) || call.entityReturned) { 
        // No Get Result method needed
    } else if (isFixedSize(call.resultDatatype)) { %>
HRESULT <%- prefix %><%- call.name %>GetResult(
    _In_ XAsyncBlock* async,
    _Out_ <%- call.resultDatatype.prefix %><%- call.resultDatatype.name %>* result
) noexcept
{
    return XAsyncGetResult(async, nullptr, sizeof(<%- call.resultDatatype.prefix %><%- call.resultDatatype.name %>), result, nullptr);
}
<%  } else if (isSerializable(call.resultDatatype)) { %>
HRESULT <%- prefix %><%- call.name %>GetResultSize(
    _In_ XAsyncBlock* async,
    _Out_ size_t* bufferSize
) noexcept
{
    return XAsyncGetResultSize(async, bufferSize);
}

HRESULT <%- prefix %><%- call.name %>GetResult(
    _In_ XAsyncBlock* async,
    _In_ size_t bufferSize,
    _Out_writes_bytes_to_(bufferSize, *bufferUsed) void* buffer,
    _Outptr_ <%- call.resultDatatype.prefix %><%- call.resultDatatype.name %>** result,
    _Out_opt_ size_t* bufferUsed
) noexcept
{
    RETURN_HR_INVALIDARG_IF_NULL(result);

    RETURN_IF_FAILED(XAsyncGetResult(async, nullptr, bufferSize, buffer, bufferUsed));
    *result = static_cast<<%- call.resultDatatype.prefix %><%- call.resultDatatype.name %>*>(buffer);

    return S_OK;
}
<%  } else { %>
HRESULT <%- prefix %><%- call.name %>GetResult(
    _In_ XAsyncBlock* async,
    _Out_ <%- globalPrefix %>ResultHandle* resultHandle,
    _Outptr_ <%- call.resultDatatype.prefix %><%- call.resultDatatype.name %>** result
) noexcept
{
    RETURN_HR_INVALIDARG_IF_NULL(result);

    RETURN_IF_FAILED(XAsyncGetResult(async, nullptr, sizeof(<%- globalPrefix %>ResultHandle), resultHandle, nullptr));
    *result = (<%- call.resultDatatype.prefix %><%- call.resultDatatype.name %>*)(std::dynamic_pointer_cast<<%- call.resultDatatype.name %>>((*resultHandle)->result).get());

    return S_OK;
}
<%  } // end if
} // end for %>
