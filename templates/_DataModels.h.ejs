#pragma once

#include <playfab/PlayFab<%- api.name %>DataModels.h>
#include "BaseModel.h"
#include "JsonUtils.h"

namespace PlayFab
{
namespace <%- api.name %>Models
{

// <%- api.name %> Classes<%
for (var typeIdx = 0; typeIdx < sortedClasses.length; typeIdx++) {
    var datatype = sortedClasses[typeIdx]; %>
struct <%- datatype.name %> : public <%- prefix %><%- datatype.name %>, <%- getBaseTypes(datatype) %>
{
    <%- datatype.name %>();<%
    if (canDefaultCopyConstructor(datatype)) { %>
    <%- datatype.name %>(const <%- datatype.name %>&) = default;
    <%- datatype.name %>(<%- datatype.name %>&&) = default;<%
    } else { %>
    <%- datatype.name %>(const <%- datatype.name %>& src);
    <%- datatype.name %>(<%- datatype.name %>&& src);<%
    } // end if %>
    <%- datatype.name %>& operator=(const <%- datatype.name %>&) = delete;
    ~<%- datatype.name %>() = default;

    void FromJson(const JsonValue& input) override;
    JsonValue ToJson() const override;
<%  if (isSerializable(datatype)) { %>
    size_t SerializedSize() const override;
    void Serialize(void* buffer, size_t bufferSize) const override;
<%  } // end if %>
private:<%
    for (var propIdx = 0; propIdx < datatype.properties.length; propIdx++) {
        var property = datatype.properties[propIdx];
%><%- getPropertyDefinition("    ", property, prefix, true) %><%
    } // end for %>
};
<% } // end for %>
} // namespace <%- api.name %>Models

namespace JsonUtils
{
// Serialization methods for public models
<% for (var typeIdx = 0; typeIdx < sortedClasses.length; typeIdx++) { 
    var datatype = sortedClasses[typeIdx]; %>
template<> inline JsonValue ToJson<>(const <%- prefix %><%- datatype.name %>& input);<%
} // end for %>
} // namespace JsonUtils

// EnumRange definitions used for Enum (de)serialization<%
for (var enumIdx = 0; enumIdx < enumtypes.length; enumIdx++) { 
    var enumtype = enumtypes[enumIdx]; var maxval = enumtype.enumvalues[enumtype.enumvalues.length-1]; %>
template<> struct EnumRange<<%- prefix %><%- enumtype.name %>>
{
    static constexpr <%- prefix %><%- enumtype.name %> maxValue = <%- prefix %><%- enumtype.name %>::<%- maxval.name %>;
};
<% } // end for %>
} // namespace PlayFab
