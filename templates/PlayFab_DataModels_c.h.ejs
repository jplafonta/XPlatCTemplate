#pragma once

#include <playfab/PlayFabBaseModel_c.h>

#pragma push_macro("IN")
#undef IN

// <%- api.name %> enums<%
for (var enumIdx = 0; enumIdx < enumtypes.length; enumIdx++) { var enumtype = enumtypes[enumIdx]; %>
enum class <%- prefix %><%- enumtype.name %> : uint32_t
{
    <% for(var i=0; i<enumtype.enumvalues.length-1; i++) { var enumval = enumtype.enumvalues[i] %><%- enumval.name %>,
    <% } %><%- enumtype.enumvalues[enumtype.enumvalues.length-1].name %>
};
<% } %>

// <%- api.name %> structs<%
for (var typeIdx = 0; typeIdx < sortedClasses.length; typeIdx++) { var datatype = sortedClasses[typeIdx]; %>
typedef struct <%- prefix %><%- datatype.name %>
{
<% for (var propIdx = 0; propIdx < datatype.properties.length; propIdx++) { var property = datatype.properties[propIdx];
%><%- getPropertyDefinition("    ", property, prefix, false) %>
<% } %>
} <%- prefix %><%- datatype.name %>;
<% } %>

// <%- api.name %> dictionary entry structs<%
for (var typeIdx = 0; typeIdx < dictionaryEntryTypes.length; typeIdx++) { var datatype = dictionaryEntryTypes[typeIdx]; %>
typedef struct <%- prefix %><%- datatype.name %>DictionaryEntry
{
    const char* key;<%
if (datatype.isenum) { %>
    <%- prefix %><%- datatype.name %> value;
<% } else { %>
    <%- prefix %><%- datatype.name %>* value;<% } %>
} <%- prefix %><%- datatype.name %>DictionaryEntry;
<% } %>

#pragma pop_macro("IN")
