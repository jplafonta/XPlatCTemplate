#pragma once

#include "<%- api.name %>DataModels.h"
#include "HttpClient.h"

namespace PlayFab
{

class Entity;

class <%- api.name %>AuthAPI
{
public:
    <%- api.name %>AuthAPI(SharedPtr<HttpClient const> httpClient, const TaskQueue& backgroundQueue<%
if (categorizedApi.loginCallsRequireSecretKey) { 
%>, SharedPtr<String const> secretKey<%
} %>);
    <%- api.name %>AuthAPI(const <%- api.name %>AuthAPI&) = delete;
    <%- api.name %>AuthAPI& operator=(const <%- api.name %>AuthAPI& source) = delete;
    ~<%- api.name %>AuthAPI() = default;

    // ------------ Generated API calls<%
for (var i = 0; i < categorizedApi.loginCalls.length; i++) {
    var call = categorizedApi.loginCalls[i]; %>
    AsyncOp<SharedPtr<Entity>> <%- call.name %>(const PlayFab<%- api.name %><%- call.request %>& request, const TaskQueue& queue) const;<%
} %>

private:
    SharedPtr<HttpClient const> m_httpClient;
    TaskQueue m_backgroundQueue;<%
if (categorizedApi.loginCallsRequireSecretKey) { %>
    SharedPtr<String const> m_secretKey;<%
} %>
};

}