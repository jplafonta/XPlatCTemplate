#include "stdafx.h"
#include "<%- api.name %>AuthApi.h"
#include "AuthContext.h"

namespace PlayFab
{

using namespace <%- api.name %>Models;

<%- api.name %>AuthAPI::<%- api.name %>AuthAPI() :
    m_settings{ MakeShared<PlayFabApiSettings>() },
    m_httpClient{ m_settings }
{
}
<% for (var callIdx = 0; callIdx < authCalls.length; callIdx++) { var call = authCalls[callIdx]; %>
AsyncOp<SharedPtr<AuthContext>> <%- api.name %>AuthAPI::<%- call.name %>(
    const PlayFab<%- api.name %><%- call.request %>& request,
    const TaskQueue& queue
) const
{
    // TODO find a cleaner way to configure the titleId
<%- getRequestActions("    ", call) %>    UnorderedMap<String, String> headers;<%
if (hasAuthParams(call)) {%>
    headers.emplace(<%- getAuthParams(call) %>);<% 
} %>

    return m_httpClient.MakePostRequest(
        "<%- call.url %>",
        headers,
        JsonUtils::ToJson(request),
        queue
    ).Then([](Result<ServiceResponse> result) -> Result<SharedPtr<AuthContext>>
    {
        RETURN_IF_FAILED(result.hr);

        auto& serviceResponse = result.Payload();
        if (serviceResponse.HttpCode == 200)
        {
            <%- call.result %> resultModel;
            resultModel.FromJson(serviceResponse.Data);
            return MakeShared<AuthContext>(std::move(resultModel));
        }
        else
        {
            return ServiceErrorToHR(serviceResponse.ErrorCode);
        }
    });
}<%
} %>

}