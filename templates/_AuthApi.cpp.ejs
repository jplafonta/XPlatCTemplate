#include "stdafx.h"
#include "<%- api.name %>AuthApi.h"
#include "Entity.h"

namespace PlayFab
{

using namespace <%- api.name %>Models;

<%- api.name %>AuthAPI::<%- api.name %>AuthAPI(SharedPtr<HttpClient const> httpClient<%
if (categorizedApi.loginCallsRequireSecretKey) {
%>, SharedPtr<String const> secretKey) :
    m_httpClient{ std::move(httpClient) },
    m_secretKey{ std::move(secretKey) }<%
} else {
%>) :
    m_httpClient{ std::move(httpClient) }<%
} %>
{
}
<%for (var i = 0; i < categorizedApi.loginCalls.length; i++) {
    var call = categorizedApi.loginCalls[i];
    var secretKeyArg = categorizedApi.loginCallsRequireSecretKey ? "m_secretKey" : "nullptr"; %>
AsyncOp<SharedPtr<Entity>> <%- api.name %>AuthAPI::<%- call.name %>(
    const PlayFab<%- api.name %><%- call.request %>& request,
    const TaskQueue& queue
) const
{
    // Remember LoginContext so we can refresh tokens
    LoginContext loginContext{ "<%- call.url %>", JsonUtils::ToJson(request), <%- secretKeyArg %> };

    UnorderedMap<String, String> headers;
    <%- addAuthHeader(call, "    ") %>

    auto requestOp = m_httpClient->MakePostRequest(
        loginContext.path.data(),
        headers,
        loginContext.requestBody,
        queue
    );

    return requestOp.Then([ httpClient{ m_httpClient }, loginContext{ std::move(loginContext) }](Result<ServiceResponse> result) mutable -> Result<SharedPtr<Entity>>
    {
        RETURN_IF_FAILED(result.hr);

        auto serviceResponse = result.ExtractPayload();
        if (serviceResponse.HttpCode == 200)
        {
            <%- call.result %> resultModel;
            resultModel.FromJson(serviceResponse.Data);
            return MakeShared<Entity>(httpClient, std::move(loginContext), std::move(resultModel));
        }
        else
        {
            return Result<SharedPtr<Entity>>{ ServiceErrorToHR(serviceResponse.ErrorCode), std::move(serviceResponse.ErrorMessage) };
        }
    });
}
<% } %>

}