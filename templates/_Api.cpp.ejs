#include "stdafx.h"
#include "<%- api.name %>Api.h"

namespace PlayFab
{

using namespace <%- api.name %>Models;

<%- api.name %>API::<%- api.name %>API(SharedPtr<HttpClient const> httpClient<%
if (categorizedApi.otherCallsRequireSecretKey) {
%>, SharedPtr<String const> secretKey) :
    m_httpClient{ std::move(httpClient) },
    m_secretKey{ std::move(secretKey) }<%
} else {
%>, SharedPtr<AuthTokens const> tokens) :
    m_httpClient{ std::move(httpClient) },
    m_tokens{ std::move(tokens) }<%
} %>
{
}
<%for (var i = 0; i < categorizedApi.otherCalls.length; i++) {
    var call = categorizedApi.otherCalls[i];
    var constModifier = call.auth === "None" ? "" : " const";
    var resultT = call.result === "void" ? "AsyncOp<void>" : "AsyncOp<" + api.name + "Models::" + call.result + ">";
    var requestParam = call.request === "void" ? "" : "const PlayFab" + api.name + call.request + "& request,\n    ";
    var httpClientParam = call.auth === "None" ? "SharedPtr<HttpClient const> httpClient,\n    " : ""; 
    var httpClient = call.auth === "None" ? "httpClient" : "m_httpClient";
    var requestBody = call.request === "void" ? "JsonValue{ rapidjson::kNullType }" : "JsonUtils::ToJson(request)"; %>
<%- resultT %> <%- api.name %>API::<%- call.name %>(
    <%- requestParam %><%- httpClientParam %>const TaskQueue& queue
)<%- constModifier %>
{
    UnorderedMap<String, String> headers;
    <%- addAuthHeader(call, "    ") %>

    return <%- httpClient %>->MakePostRequest(
        "<%- call.url %>",
        headers,
        <%- requestBody %>,
        queue
    ).Then([](Result<ServiceResponse> result) -> Result<<%- call.result %>>
    {
        RETURN_IF_FAILED(result.hr);

        auto serviceResponse = result.ExtractPayload();
        if (serviceResponse.HttpCode == 200)
        {<% 
    if (call.result === "void") { %>
            return S_OK;<%
    } else { %>
            <%- call.result %> resultModel;
            resultModel.FromJson(serviceResponse.Data);
            return resultModel;<%
    } %>
        }
        else
        {
            return Result<<%- call.result %>>{ ServiceErrorToHR(serviceResponse.ErrorCode), std::move(serviceResponse.ErrorMessage) };
        }
    });
}
<% } %>
}
