#include "stdafx.h"
#include <playfab/PlayFab<%- api.name %>AuthApi.h>
#include "<%- api.name %>AuthApi.h"
#include "ApiAsyncProviders.h"
#include "GlobalState.h"

using namespace PlayFab;
using namespace PlayFab::<%- api.name %>Models;
<% var authApiMemberName = api.name.charAt(0).toLowerCase() + api.name.slice(1) + "AuthAPI";
for (var i = 0; i < categorizedApi.loginCalls.length; i++) {
    var call = categorizedApi.loginCalls[i]; %>
HRESULT PlayFab<%- api.name %><%- call.name %>Async(
    _In_ PlayFabStateHandle stateHandle,
    _In_ const PlayFab<%- api.name %><%- call.request %>* request,
    _In_ XAsyncBlock* async
) noexcept
{
    RETURN_HR_INVALIDARG_IF_NULL(stateHandle);
    RETURN_HR_INVALIDARG_IF_NULL(request);

    auto provider = MakeAuthProvider(async, std::bind(&<%- api.name %>AuthAPI::<%- call.name %>, &stateHandle->state-><%- authApiMemberName %>, *request, std::placeholders::_1));
    return Provider::Run(UniquePtr<Provider>(provider.release()));
}
<% } %>
