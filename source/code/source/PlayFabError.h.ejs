#pragma once

#include "BaseModel.h"

namespace PlayFab
{
    enum class PlayFabErrorCode
    {
        PlayFabErrorHostnameNotFound = 1,
        PlayFabErrorConnectionTimeout,
        PlayFabErrorConnectionRefused,
        PlayFabErrorSocketError,
<% for (errIdx in apis[0].errors) { var apiErr = apis[0].errors[errIdx];
%>        PlayFabError<%- apiErr.name %> = <%- apiErr.id %>,
<% }
%>    };

    /// <summary>
    /// The wrapper around all PlayFab responses, and all fields needed in the case of an error
    /// </summary>
    struct PlayFabError : public BaseModel
    {
        // Serialized fields
        int HttpCode;
        String HttpStatus;
        PlayFabErrorCode ErrorCode;
        String ErrorName;
        String ErrorMessage;
        JsonValue ErrorDetails;
        JsonValue Data;

        // Non-serialized fields
        String RequestId;

        PlayFabError() = default;
        PlayFabError(const PlayFabError&) {};
        ~PlayFabError() = default;

        void FromJson(const JsonValue& input) override;
        JsonValue ToJson() const override;

        String GenerateErrorReport() const;
    };

    typedef std::function<void(const PlayFabError& error)> ErrorCallback;
    typedef std::function<void(std::exception exception)> ExceptionCallback;

    enum class PlayFabExceptionCode
    {
        AuthContextRequired,
        DeveloperKeyNotSet,
        EntityTokenNotSet,
        NotLoggedIn,
        PluginAmbiguity,
        PluginNotFound,
        ThreadMisuse,
        TitleNotSet,
    };

    class PlayFabException : public std::runtime_error
    {
    public:
        PlayFabException() = delete;
        PlayFabException(const PlayFabException& source) = delete;
        PlayFabException(PlayFabException&&) = default;
        PlayFabException& operator=(const PlayFabException& source) = delete;
        PlayFabException& operator=(PlayFabException&& other) = delete;

        PlayFabExceptionCode Code;
        PlayFabException(PlayFabExceptionCode code, const char* const message);
    };
}
