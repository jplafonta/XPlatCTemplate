// Copyright (c) Microsoft Corporation
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

#if !defined(__cplusplus)
#error C++11 required
#endif

#pragma once

#include <playfab/<%- prefix %>Entity.h>

extern "C"
{

/// <summary>
/// Handle to an authenticated TitlePlayer Entity. Returned from one of the <%- prefix %>AuthenticationClientLogin* APIs.
/// When no longer needed, the Entity handle must be closed with <%- prefix %>TitlePlayerCloseHandle.
/// </summary>
typedef struct <%- prefix %>TitlePlayer* <%- prefix %>TitlePlayerHandle;

/// <summary>
/// Duplicates a <%- prefix %>TitlePlayerHandle.
/// </summary>
/// <param name="titlePlayerHandle">TitlePlayer handle to duplicate.</param>
/// <param name="duplicatedHandle">The duplicated handle.</param>
/// <returns>Result code for this API operation.</returns>
/// <remarks>
/// Both the duplicated handle and the original handle need to be closed with <%- prefix %>TitlePlayerCloseHandle when they
/// are no longer needed.
/// </remarks>
HRESULT <%- prefix %>TitlePlayerDuplicateHandle(
    _In_ <%- prefix %>TitlePlayerHandle titlePlayerHandle,
    _Out_ <%- prefix %>TitlePlayerHandle* duplicatedHandle
) noexcept;

/// <summary>
/// Closes a <%- prefix %>TitlePlayerHandle.
/// </summary>
/// <param name="titlePlayerHandle">TitlePlayer handle to close.</param>
/// <returns>Result code for this API operation.</returns>
void <%- prefix %>TitlePlayerCloseHandle(
    _In_ <%- prefix %>TitlePlayerHandle titlePlayerHandle
) noexcept;

/// <summary>
/// Gets a generic <%- prefix %>EntityHandle for a TitlePlayer Entity. The <%- prefix %>EntityHandle can be used to
/// make API calls which only require a generic Entity rather than specifically a TitlePlayer Entity.
/// </summary>
/// <param name="titlePlayerHandle"><%- prefix %>TitlePlayerHandle returned from a login call.</param>
/// <param name="entityHandle">Generic <%- prefix %>EntityHandle to the TitlePlayer Entity.</param>
/// <returns>Result code for this API operation.</returns>
/// <remarks>
/// The output entityHandle and the titlePlayerHandle are separate and both need to be closed when they are no longer needed.
/// </remarks>
HRESULT <%- prefix %>TitlePlayerGetEntityHandle(
    _In_ <%- prefix %>TitlePlayerHandle titlePlayerHandle,
    _Out_ <%- prefix %>EntityHandle* entityHandle
) noexcept;

/// <summary>
/// Get the PlayFabId (master_player_account Id) for the TitlePlayer.
/// </summary>
/// <param name="titlePlayerHandle"><%- prefix %>TitlePlayerHandle returned from a login call.</param>
/// <param name="playFabId">Returned pointer to the playFabId. Valid until the TitlePlayer object is cleaned up.</param>
/// <returns>Result code for this API operation.</returns>
HRESULT <%- prefix %>TitlePlayerGetPlayFabId(
    _In_ <%- prefix %>TitlePlayerHandle titlePlayerHandle,
    _Outptr_ const char** playFabId
) noexcept;

/// <summary>
/// Get the Entity Id for the TitlePlayer.
/// </summary>
/// <param name="titlePlayerHandle"><%- prefix %>TitlePlayerHandle returned from a login call.</param>
/// <param name="entityId">Returned pointer to the entityId. Valid until the TitlePlayer object is cleaned up.</param>
/// <returns>Result code for this API operation.</returns>
HRESULT <%- prefix %>TitlePlayerGetEntityId(
    _In_ <%- prefix %>TitlePlayerHandle titlePlayerHandle,
    _Outptr_ const char** entityId
) noexcept;

/// <summary>
/// Get the cached Entity token.
/// </summary>
/// <param name="titlePlayerHandle"><%- prefix %>TitlePlayerHandle returned from a login call.</param>
/// <param name="entityToken">Returned pointer to the entityToken. The pointer is valid until the TitlePlayer object is cleaned up, though
/// the token may expire before then.</param>
/// <returns>Result code for this API operation.</returns>
HRESULT <%- prefix %>TitlePlayerGetCachedEntityToken(
    _In_ <%- prefix %>TitlePlayerHandle titlePlayerHandle,
    _Outptr_ const <%- prefix %>EntityToken** entityToken
) noexcept;

/// <summary>
/// Get combined player info. Will be null if combined player info was not requested requested during login (see <see cref="<%- prefix %>GetPlayerCombinedInfoRequestParams"/>).
/// </summary>
/// <param name="titlePlayerHandle"><%- prefix %>TitlePlayerHandle returned from a login call.</param>
/// <param name="playerCombinedInfo">Returned pointer to player combined info. Valid until the TitlePlayer object is cleaned up.</param>
/// <returns>Result code for this API operation.</returns>
/// <remarks>
/// Note that the returned data is only guaranteed to be up to date as of the login request - it will not be automatically refreshed.
/// To get updated combined player data, call <see cref="<%- prefix %>PlayerDataManagementGetPlayerCombinedInfoAsync"/>
/// </remarks>
HRESULT <%- prefix %>TitlePlayerGetPlayerCombinedInfo(
    _In_ <%- prefix %>TitlePlayerHandle titlePlayerHandle,
    _Outptr_result_maybenull_ const <%- prefix %>GetPlayerCombinedInfoResultPayload** playerCombinedInfo
) noexcept;

/// <summary>
/// Get last login time (prior to the login that resulted in this <%- prefix %>TitlePlayerHandle). lastLoginTime will be set to null if the player has no previous login.
/// </summary>
/// <param name="titlePlayerHandle"><%- prefix %>TitlePlayerHandle returned from a login call.</param>
/// <param name="lastLoginTime">Returned pointer to the last login time. Valid until the TitlePlayer object is cleaned up.</param>
/// <returns>Result code for this API operation.</returns>
HRESULT <%- prefix %>TitlePlayerGetLastLoginTime(
    _In_ <%- prefix %>TitlePlayerHandle titlePlayerHandle,
    _Outptr_result_maybenull_ const time_t** lastLoginTime
) noexcept;

/// <summary>
/// Get UserSettings, if applicable. If unavailable, userSettings will be set to null.
/// </summary>
/// <param name="titlePlayerHandle"><%- prefix %>TitlePlayerHandle returned from a login call.</param>
/// <param name="lastLoginTime">Returned pointer to the UserSettings. Valid until the TitlePlayer object is cleaned up.</param>
/// <returns>Result code for this API operation.</returns>
HRESULT <%- prefix %>TitlePlayerGetUserSettings(
    _In_ <%- prefix %>TitlePlayerHandle titlePlayerHandle,
    _Outptr_result_maybenull_ const <%- prefix %>AuthenticationUserSettings** userSettings
) noexcept;

/// <summary>
/// Get experimentation treatments for a user at the time of login. If unavailable, treatmentAssignment will be set to null.
/// </summary>
/// <param name="titlePlayerHandle"><%- prefix %>TitlePlayerHandle returned from a login call.</param>
/// <param name="lastLoginTime">Returned pointer to TreatmentAssignment. Valid until the TitlePlayer object is cleaned up.</param>
/// <returns>Result code for this API operation.</returns>
HRESULT <%- prefix %>TitlePlayerGetTreatmentAssignment(
    _In_ <%- prefix %>TitlePlayerHandle titlePlayerHandle,
    _Outptr_result_maybenull_ const <%- prefix %>TreatmentAssignment** treatmentAssignment
) noexcept;

}