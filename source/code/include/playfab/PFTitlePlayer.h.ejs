// Copyright (c) Microsoft Corporation
// Licensed under the MIT license. See LICENSE file in the project root for full license information.

#if !defined(__cplusplus)
#error C++11 required
#endif

#pragma once

#include <playfab/<%- prefix %>Entity.h>

extern "C"
{

/// <summary>
/// Entity type for all TitlePlayer Entities. This const value can be used to populate <%- prefix %>EntityKeys referrring to TitlePlayer Entities.
/// </summary>
static const char* <%- prefix %>TitlePlayerEntityType = "title_player_account";

/// <summary>
/// Handle to an authenticated TitlePlayer Entity. Returned from one of the <%- prefix %>AuthenticationClientLogin* APIs.
/// When no longer needed, the Entity handle must be closed with <%- prefix %>TitlePlayerCloseHandle.
/// </summary>
typedef struct <%- prefix %>TitlePlayer* <%- prefix %>TitlePlayerHandle;

/// <summary>
/// Duplicates a <%- prefix %>TitlePlayerHandle.
/// </summary>
/// <param name="titlePlayerHandle">TitlePlayer handle to duplicate.</param>
/// <param name="duplicatedHandle">The duplicated handle.</param>
/// <returns>Result code for this API operation.</returns>
/// <remarks>
/// Both the duplicated handle and the original handle need to be closed with <%- prefix %>TitlePlayerCloseHandle when they
/// are no longer needed.
/// </remarks>
HRESULT <%- prefix %>TitlePlayerDuplicateHandle(
    _In_ <%- prefix %>TitlePlayerHandle titlePlayerHandle,
    _Out_ <%- prefix %>TitlePlayerHandle* duplicatedHandle
) noexcept;

/// <summary>
/// Closes a <%- prefix %>TitlePlayerHandle.
/// </summary>
/// <param name="titlePlayerHandle">TitlePlayer handle to close.</param>
/// <returns>Result code for this API operation.</returns>
void <%- prefix %>TitlePlayerCloseHandle(
    _In_ <%- prefix %>TitlePlayerHandle titlePlayerHandle
) noexcept;

/// <summary>
/// Gets a generic <%- prefix %>EntityHandle for a TitlePlayer Entity. The <%- prefix %>EntityHandle can be used to
/// make API calls which only require a generic Entity rather than specifically a TitlePlayer Entity.
/// </summary>
/// <param name="titlePlayerHandle"><%- prefix %>TitlePlayerHandle returned from a login call.</param>
/// <param name="entityHandle">Generic <%- prefix %>EntityHandle to the TitlePlayer Entity.</param>
/// <returns>Result code for this API operation.</returns>
/// <remarks>
/// The output entityHandle and the titlePlayerHandle are separate and both need to be closed when they are no longer needed.
/// </remarks>
HRESULT <%- prefix %>TitlePlayerGetEntityHandle(
    _In_ <%- prefix %>TitlePlayerHandle titlePlayerHandle,
    _Out_ <%- prefix %>EntityHandle* entityHandle
) noexcept;

/// <summary>
/// Get the size in bytes needed to store the PlayFabId for a TitlePlayer.
/// </summary>
/// <param name="titlePlayerHandle"><%- prefix %>TitlePlayerHandle returned from a login call.</param>
/// <param name="bufferSize">The buffer size in bytes required for the PlayFabId.</param>
/// <returns>Result code for this API operation.</returns>
HRESULT <%- prefix %>TitlePlayerGetPlayFabIdSize(
    _In_ <%- prefix %>TitlePlayerHandle titlePlayerHandle,
    _Out_ size_t* playFabIdSize
) noexcept;

/// <summary>
/// Get the PlayFabId for a TitlePlayer.
/// </summary>
/// <param name="titlePlayerHandle"><%- prefix %>TitlePlayerHandle returned from a login call.</param>
/// <param name="playFabIdSize">The size in bytes of the playFabId buffer. The required size can be obtained from <%- prefix %>TitlePlayerGetPlayFabIdSize.</param>
/// <param name="playFabId">The buffer the playFabId will be written to.</param>
/// <param name="playFabIdUsed">The number of bytes used in the buffer including the null terminator.</param>
/// <returns>Result code for this API operation.</returns>
HRESULT <%- prefix %>TitlePlayerGetPlayFabId(
    _In_ <%- prefix %>TitlePlayerHandle titlePlayerHandle,
    _In_ size_t playFabIdSize,
    _Out_writes_bytes_to_opt_(playFabIdSize, playFabIdUsed) char* playFabId,
    _Out_opt_ size_t* playFabIdUsed
) noexcept;

/// <summary>
/// Get the required buffer size for the TitlePlayer's Client SessionTicket.
/// </summary>
/// <param name="titlePlayerHandle"><%- prefix %>TitlePlayerHandle returned from a login call.</param>
/// <param name='bufferSize'>The required size of the buffer in bytes needed to hold the SessionTicket.</param>
/// <returns>Result code for this API operation.</returns>
HRESULT <%- prefix %>TitlePlayerGetCachedSessionTicketSize(
    _In_ <%- prefix %>TitlePlayerHandle titlePlayerHandle,
    _Out_ size_t* sessionTicketSize
) noexcept;

/// <summary>
/// Get the TitlePlayer's cached Client SessionTicket.
/// </summary>
/// <param name="titlePlayerHandle"><%- prefix %>TitlePlayerHandle returned from a login call.</param>
/// <param name='sessionTicketBufferSize'>The size of the provided SessionTicketBuffer, in bytes. The required size can be obtained from <%- prefix %>TitlePlayerGetCachedSessionTicketSize.</param>
/// <param name='SessionTicketBuffer'>Buffer to write the Client SessionTicket into.</param>
/// <param name='bufferUsed'>An optional pointer that contains the number of bytes written to the buffer.</param>
/// <returns>Result code for this API operation.</returns>
HRESULT <%- prefix %>TitlePlayerGetCachedSessionTicket(
    _In_ <%- prefix %>TitlePlayerHandle titlePlayerHandle,
    _In_ size_t sessionTicketBufferSize,
    _Out_writes_bytes_to_opt_(sessionTicketBufferSize, *bufferUsed) char* SessionTicketBuffer,
    _Out_opt_ size_t* bufferUsed
) noexcept;

/// <summary>
/// Get the size in bytes needed to store the <%- prefix %>EntityKey for a TitlePlayer.
/// </summary>
/// <param name="titlePlayerHandle"><%- prefix %>TitlePlayerHandle returned from a login call.</param>
/// <param name="bufferSize">The buffer size in bytes required for the EntityKey.</param>
/// <returns>Result code for this API operation.</returns>
HRESULT <%- prefix %>TitlePlayerGetEntityKeySize(
    _In_ <%- prefix %>TitlePlayerHandle titlePlayerHandle,
    _Out_ size_t* bufferSize
) noexcept;

/// <summary>
/// Get the <%- prefix %>EntityKey for a TitlePlayer.
/// </summary>
/// <param name="titlePlayerHandle"><%- prefix %>TitlePlayerHandle returned from a login call.</param>
/// <param name="bufferSize">The size of the buffer for the <%- prefix %>EntityKey. The required size can be obtained from <%- prefix %>TitlePlayerGetEntityKeySize.</param>
/// <param name="buffer">Byte buffer used for the <%- prefix %>EntityKey and its fields.</param>
/// <param name="result">Pointer to the <%- prefix %>EntityKey object.</param>
/// <param name="bufferUsed">The number of bytes in the provided buffer that were used.</param>
/// <returns>Result code for this API operation.</returns>
/// <remarks>
/// entityKey is a pointer within buffer and does not need to be freed separately.
/// </remarks>
HRESULT <%- prefix %>TitlePlayerGetEntityKey(
    _In_ <%- prefix %>TitlePlayerHandle titlePlayerHandle,
    _In_ size_t bufferSize,
    _Out_writes_bytes_to_(bufferSize, *bufferUsed) void* buffer,
    _Outptr_ const <%- prefix %>EntityKey** entityKey,
    _Out_opt_ size_t* bufferUsed
) noexcept;

/// <summary>
/// Get the size in bytes needed to store the cached <%- prefix %>EntityToken for a TitlePlayer.
/// </summary>
/// <param name="titlePlayerHandle"><%- prefix %>TitlePlayerHandle returned from a login call.</param>
/// <param name="bufferSize">The buffer size in bytes required for the cached <%- prefix %>EntityToken.</param>
/// <returns>Result code for this API operation.</returns>
HRESULT <%- prefix %>TitlePlayerGetCachedEntityTokenSize(
    _In_ <%- prefix %>TitlePlayerHandle titlePlayerHandle,
    _Out_ size_t* bufferSize
) noexcept;

/// <summary>
/// Get the cached Entity token.
/// </summary>
/// <param name="titlePlayerHandle"><%- prefix %>TitlePlayerHandle returned from a login call.</param>
/// <param name="bufferSize">The size of the buffer for the <%- prefix %>EntityToken. The required size can be obtained from <%- prefix %>TitlePlayerGetCachedEntityTokenSize.</param>
/// <param name="buffer">Byte buffer used for the <%- prefix %>EntityToken and its fields.</param>
/// <param name="result">Pointer to the <%- prefix %>EntityToken object.</param>
/// <param name="bufferUsed">The number of bytes in the provided buffer that were used.</param>
/// <returns>Result code for this API operation.</returns>
/// <remarks>
/// entityToken is a pointer within buffer and does not need to be freed separately.
/// </remarks>
HRESULT <%- prefix %>TitlePlayerGetCachedEntityToken(
    _In_ <%- prefix %>TitlePlayerHandle titlePlayerHandle,
    _In_ size_t bufferSize,
    _Out_writes_bytes_to_(bufferSize, *bufferUsed) void* buffer,
    _Outptr_ const <%- prefix %>EntityToken** entityToken,
    _Out_opt_ size_t* bufferUsed
) noexcept;

/// <summary>
/// Get the size in bytes needed to store the cached PlayerCombinedInfo for a TitlePlayer.
/// Will be unavailable if combined player info was not requested requested during login (see <see cref="<%- prefix %>GetPlayerCombinedInfoRequestParams"/>) and
/// bufferSize will be set to 0 in this case.
/// </summary>
/// <param name="titlePlayerHandle"><%- prefix %>TitlePlayerHandle returned from a login call.</param>
/// <param name="bufferSize">The buffer size in bytes required for the cached PlayerCombinedInfo.</param>
/// <returns>Result code for this API operation.</returns>
HRESULT <%- prefix %>TitlePlayerGetPlayerCombinedInfoSize(
    _In_ <%- prefix %>TitlePlayerHandle titlePlayerHandle,
    _Out_ size_t* bufferSize
) noexcept;

/// <summary>
/// Get combined player info.
/// </summary>
/// <param name="titlePlayerHandle"><%- prefix %>TitlePlayerHandle returned from a login call.</param>
/// <param name="bufferSize">The size of the buffer for the <%- prefix %>GetPlayerCombinedInfoResultPayload.  The required size can be obtained from <%- prefix %>TitlePlayerGetPlayerCombinedInfoSize.</param>
/// <param name="buffer">Byte buffer used for the <%- prefix %>EntityToken and its fields.</param>
/// <param name="result">Pointer to the <%- prefix %>EntityToken object.</param>
/// <param name="bufferUsed">The number of bytes in the provided buffer that were used.</param>
/// <returns>Result code for this API operation.</returns>
/// <remarks>
/// playerCombinedInfo is a pointer within buffer and does not need to be freed separately.
/// The returned data is only guaranteed to be up to date as of the login request - it will not be automatically refreshed.
/// To get updated combined player data call <see cref="<%- prefix %>PlayerDataManagementGetPlayerCombinedInfoAsync"/>
/// </remarks>
HRESULT <%- prefix %>TitlePlayerGetPlayerCombinedInfo(
    _In_ <%- prefix %>TitlePlayerHandle titlePlayerHandle,
    _In_ size_t bufferSize,
    _Out_writes_bytes_to_(bufferSize, *bufferUsed) void* buffer,
    _Outptr_ const <%- prefix %>GetPlayerCombinedInfoResultPayload** playerCombinedInfo,
    _Out_opt_ size_t* bufferUsed
) noexcept;

/// <summary>
/// Get last login time (prior to the login that resulted in this <%- prefix %>TitlePlayerHandle). lastLoginTime will be set to 0 if the user has no previous logins.
/// </summary>
/// <param name="titlePlayerHandle"><%- prefix %>TitlePlayerHandle returned from a login call.</param>
/// <param name="lastLoginTime">Populated with the TitlePlayers last login time, or 0 if the player has not logged in previously.</param>
/// <returns>Result code for this API operation.</returns>
HRESULT <%- prefix %>TitlePlayerGetLastLoginTime(
    _In_ <%- prefix %>TitlePlayerHandle titlePlayerHandle,
    _Out_ time_t* lastLoginTime
) noexcept;

/// <summary>
/// Get UserSettings. Will be unavailable if UserSettings were not requested requested during login (see <see cref="<%- prefix %>GetPlayerCombinedInfoRequestParams"/>).
/// </summary>
/// <param name="titlePlayerHandle"><%- prefix %>TitlePlayerHandle returned from a login call.</param>
/// <param name="userSettings">Populated UserSettings.</param>
/// <returns>Result code for this API operation.</returns>
HRESULT <%- prefix %>TitlePlayerGetUserSettings(
    _In_ <%- prefix %>TitlePlayerHandle titlePlayerHandle,
    _Out_ <%- prefix %>AuthenticationUserSettings* userSettings
) noexcept;

/// <summary>
/// Get the size in bytes needed to store the cached experimentation treatments for a TitlePlayer.
/// Will be unavailable if treatmentAssignment was not requested requested during login (see <see cref="<%- prefix %>GetPlayerCombinedInfoRequestParams"/>) and
/// bufferSize will be set to 0 in this case.
/// </summary>
/// <param name="titlePlayerHandle"><%- prefix %>TitlePlayerHandle returned from a login call.</param>
/// <param name="bufferSize">The buffer size in bytes required for the cached <%- prefix %>TreatmentAssignment.</param>
/// <returns>Result code for this API operation.</returns>
HRESULT <%- prefix %>TitlePlayerGetTreatmentAssignmentSize(
    _In_ <%- prefix %>TitlePlayerHandle titlePlayerHandle,
    _Out_ size_t* bufferSize
) noexcept;

/// <summary>
/// Get experimentation treatments for a user at the time of login.
/// </summary>
/// <param name="titlePlayerHandle"><%- prefix %>TitlePlayerHandle returned from a login call.</param>
/// <param name="bufferSize">The size of the buffer for the <%- prefix %>TreatmentAssignment.  The required size can be obtained from <%- prefix %>TitlePlayerGetTreatmentAssignmentSize.</param>
/// <param name="buffer">Byte buffer used for the <%- prefix %>EntityToken and its fields.</param>
/// <param name="result">Pointer to the <%- prefix %>TreatmentAssignment object.</param>
/// <param name="bufferUsed">The number of bytes in the provided buffer that were used.</param>
/// <returns>Result code for this API operation.</returns>
/// <remarks>
/// treatmentAssignment is a pointer within buffer and does not need to be freed separately.
/// The returned data is only guaranteed to be up to date as of the login request - it will not be automatically refreshed.
/// To get updated experimentation treatments call <see cref="<%- prefix %>ExperimentationGetTreatmentAssignmentAsync"/>
/// </remarks>
HRESULT <%- prefix %>TitlePlayerGetTreatmentAssignment(
    _In_ <%- prefix %>TitlePlayerHandle titlePlayerHandle,
    _In_ size_t bufferSize,
    _Out_writes_bytes_to_(bufferSize, *bufferUsed) void* buffer,
    _Outptr_ const <%- prefix %>TreatmentAssignment** treatmentAssignment,
    _Out_opt_ size_t* bufferUsed
) noexcept;

}
