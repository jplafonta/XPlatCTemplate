{
    "PlayFabAdminAbortTaskInstanceAsync": {
        "summary": "TODO REVIEW: Abort an ongoing task instance.",
        "remarks": "If the task instance has already completed, there will be no-op. See also PlayFabAdminGetActionsOnPlayersInSegmentTaskInstanceAsync, PlayFabAdminGetCloudScriptTaskInstanceAsync, PlayFabAdminGetTaskInstancesAsync, PlayFabAdminRunTaskAsync"
    },
    "PlayFabAdminAddLocalizedNewsAsync": {
        "summary": "TODO REVIEW: Update news item to include localized version"
    },
    "PlayFabAdminAddNewsAsync": {
        "summary": "TODO REVIEW: Adds a new news item to the title's news feed"
    },
    "PlayFabAdminAddPlayerTagAsync": {
        "summary": "TODO REVIEW: Adds a given tag to a player profile. The tag's namespace is automatically generated based on the source of the tag.",
        "remarks": "This API will trigger a player_tag_added event and add a tag with the given TagName and PlayFabID to the corresponding player profile. TagName can be used for segmentation and it is limited to 256 characters. Also there is a limit on the number of tags a title can have. See also PlayFabAdminGetPlayerTagsAsync, PlayFabAdminRemovePlayerTagAsync"
    },
    "PlayFabAdminAddServerBuildAsync": {
        "summary": "TODO REVIEW: Adds the game server executable specified (previously uploaded - see GetServerBuildUploadUrl) to the set of those a client is permitted to request in a call to StartGame",
        "remarks": "See also PlayFabAdminGetServerBuildInfoAsync, PlayFabAdminListServerBuildsAsync, PlayFabClientMatchmakeAsync, PlayFabAdminModifyServerBuildAsync, PlayFabAdminRemoveServerBuildAsync, PlayFabMatchmakerStartGameAsync"
    },
    "PlayFabAdminAddUserVirtualCurrencyAsync": {
        "summary": "TODO REVIEW: Increments the specified virtual currency by the stated amount",
        "remarks": "See also PlayFabAdminSubtractUserVirtualCurrencyAsync"
    },
    "PlayFabAdminAddVirtualCurrencyTypesAsync": {
        "summary": "TODO REVIEW: Adds one or more virtual currencies to the set defined for the title. Virtual Currencies have a maximum value of 2,147,483,647 when granted to a player. Any value over that will be discarded.",
        "remarks": "This operation is additive. Any new currencies defined in the array will be added to the set of those available for the title, while any CurrencyCode identifiers matching existing ones in the game will be overwritten with the new values. See also PlayFabAdminListVirtualCurrencyTypesAsync, PlayFabAdminRemoveVirtualCurrencyTypesAsync"
    },
    "PlayFabAdminBanUsersAsync": {
        "summary": "TODO REVIEW: Bans users by PlayFab ID with optional IP address, or MAC address for the provided game.",
        "remarks": "The existence of each user will not be verified. When banning by IP or MAC address, multiple players may be affected, so use this feature with caution. Returns information about the new bans. See also PlayFabAdminGetUserBansAsync, PlayFabAdminRevokeAllBansForUserAsync, PlayFabAdminRevokeBansAsync, PlayFabAdminUpdateBansAsync"
    },
    "PlayFabAdminCheckLimitedEditionItemAvailabilityAsync": {
        "summary": "TODO REVIEW: Checks the global count for the limited edition item.",
        "remarks": "This returns the total number of these items available. See also PlayFabAdminIncrementLimitedEditionItemAvailabilityAsync"
    },
    "PlayFabAdminCreateActionsOnPlayersInSegmentTaskAsync": {
        "summary": "TODO REVIEW: Create an ActionsOnPlayersInSegment task, which iterates through all players in a segment to execute action.",
        "remarks": "Task name is unique within a title. Using a task name that's already taken will cause a name conflict error. Too many create-task requests within a short time will cause a create conflict error. See also PlayFabAdminCreateCloudScriptTaskAsync, PlayFabAdminDeleteTaskAsync, PlayFabAdminGetTasksAsync, PlayFabAdminRunTaskAsync, PlayFabAdminUpdateTaskAsync"
    },
    "PlayFabAdminCreateCloudScriptTaskAsync": {
        "summary": "TODO REVIEW: Create a CloudScript task, which can run a CloudScript on a schedule.",
        "remarks": "Task name is unique within a title. Using a task name that's already taken will cause a name conflict error. Too many create-task requests within a short time will cause a create conflict error. See also PlayFabAdminCreateActionsOnPlayersInSegmentTaskAsync, PlayFabAdminDeleteTaskAsync, PlayFabAdminGetTasksAsync, PlayFabAdminRunTaskAsync, PlayFabAdminUpdateTaskAsync"
    },
    "PlayFabAdminCreateInsightsScheduledScalingTaskAsync": {
        "summary": "TODO REVIEW: Create a Insights Scheduled Scaling task, which can scale Insights Performance Units on a schedule",
        "remarks": "Task name is unique within a title. Using a task name that's already taken will cause a name conflict error. Too many create-task requests within a short time will cause a create conflict error. See also PlayFabAdminCreateActionsOnPlayersInSegmentTaskAsync, PlayFabAdminDeleteTaskAsync, PlayFabAdminGetTasksAsync, PlayFabAdminRunTaskAsync, PlayFabAdminUpdateTaskAsync"
    },
    "PlayFabAdminCreateOpenIdConnectionAsync": {
        "summary": "TODO REVIEW: Registers a relationship between a title and an Open ID Connect provider.",
        "remarks": "See also PlayFabAdminDeleteOpenIdConnectionAsync, PlayFabAdminListOpenIdConnectionAsync, PlayFabAdminUpdateOpenIdConnectionAsync"
    },
    "PlayFabAdminCreatePlayerSharedSecretAsync": {
        "summary": "TODO REVIEW: Creates a new Player Shared Secret Key. It may take up to 5 minutes for this key to become generally available after this API returns.",
        "remarks": "Player Shared Secret Keys are used for the call to Client/GetTitlePublicKey, which exchanges the shared secret for an RSA CSP blob to be used to encrypt the payload of account creation requests when that API requires a signature header. See also PlayFabAdminGetPlayerSharedSecretsAsync, PlayFabAdminUpdatePlayerSharedSecretAsync"
    },
    "PlayFabAdminCreatePlayerStatisticDefinitionAsync": {
        "summary": "TODO REVIEW: Adds a new player statistic configuration to the title, optionally allowing the developer to specify a reset interval and an aggregation method.",
        "remarks": "Statistics are numeric values, with each statistic in the title also generating a leaderboard. The ResetInterval enables automatically resetting leaderboards on a specified interval. Upon reset, the statistic updates to a new version with no values (effectively removing all players from the leaderboard). The previous version's statistic values are also archived for retrieval, if needed (see GetPlayerStatisticVersions). Statistics not created via a call to CreatePlayerStatisticDefinition by default have a VersionChangeInterval of Never, meaning they do not reset on a schedule, but they can be set to do so via a call to UpdatePlayerStatisticDefinition. Once a statistic has been reset (sometimes referred to as versioned or incremented), the now-previous version can still be written to for up a short, pre-defined period (currently 10 seconds), to prevent issues with levels completing around the time of the reset. Also, once reset, the historical statistics for players in the title may be retrieved using the URL specified in the version information (GetPlayerStatisticVersions). The AggregationMethod determines what action is taken when a new statistic value is submitted - always update with the new value (Last), use the highest of the old and new values (Max), use the smallest (Min), or add them together (Sum). See also PlayFabAdminGetPlayerStatisticDefinitionsAsync, PlayFabClientGetPlayerStatisticsAsync, PlayFabServerGetPlayerStatisticsAsync, PlayFabAdminGetPlayerStatisticVersionsAsync, PlayFabAdminUpdatePlayerStatisticDefinitionAsync, PlayFabClientUpdatePlayerStatisticsAsync, PlayFabServerUpdatePlayerStatisticsAsync"
    },
    "PlayFabAdminCreateSegmentAsync": {
        "summary": "TODO REVIEW: Creates a new player segment by defining the conditions on player properties. Also, create actions to target the player segments for a title.",
        "remarks": "Send all the segment details part of CreateSegmentRequest"
    },
    "PlayFabAdminDeleteContentAsync": {
        "summary": "TODO REVIEW: Delete a content file from the title. When deleting a file that does not exist, it returns success.",
        "remarks": "See also PlayFabClientGetContentDownloadUrlAsync, PlayFabServerGetContentDownloadUrlAsync, PlayFabAdminGetContentListAsync, PlayFabAdminGetContentUploadUrlAsync"
    },
    "PlayFabAdminDeleteMasterPlayerAccountAsync": {
        "summary": "TODO REVIEW: Removes a master player account entirely from all titles and deletes all associated data",
        "remarks": "Deletes all data associated with the master player account, including data from all titles the player has played, such as statistics, custom data, inventory, purchases, virtual currency balances, characters, group memberships, publisher data, credential data, account linkages, friends list and PlayStream event history. Removes the player from all leaderboards and player search indexes. Note, this API queues the player for deletion and returns a receipt immediately. Record the receipt ID for future reference. It may take some time before all player data is fully deleted. Upon completion of the deletion, an email will be sent to the notification email address configured for the title confirming the deletion. Until the player data is fully deleted, attempts to recreate the player with the same user account in the same title will fail with the 'AccountDeleted' error. It is highly recommended to know the impact of the deletion by calling GetPlayedTitleList, before calling this API. See also PlayFabAdminGetPlayedTitleListAsync"
    },
    "PlayFabAdminDeleteOpenIdConnectionAsync": {
        "summary": "TODO REVIEW: Removes a relationship between a title and an OpenID Connect provider.",
        "remarks": "See also PlayFabAdminCreateOpenIdConnectionAsync, PlayFabAdminListOpenIdConnectionAsync, PlayFabAdminUpdateOpenIdConnectionAsync"
    },
    "PlayFabAdminDeletePlayerAsync": {
        "summary": "TODO REVIEW: Removes a user's player account from a title and deletes all associated data",
        "remarks": "Deletes all data associated with the player, including statistics, custom data, inventory, purchases, virtual currency balances, characters and shared group memberships. Removes the player from all leaderboards and player search indexes. Does not delete PlayStream event history associated with the player. Does not delete the publisher user account that created the player in the title nor associated data such as username, password, email address, account linkages, or friends list. Note, this API queues the player for deletion and returns immediately. It may take several minutes or more before all player data is fully deleted. Until the player data is fully deleted, attempts to recreate the player with the same user account in the same title will fail with the 'AccountDeleted' error."
    },
    "PlayFabAdminDeletePlayerSharedSecretAsync": {
        "summary": "TODO REVIEW: Deletes an existing Player Shared Secret Key. It may take up to 5 minutes for this delete to be reflected after this API returns.",
        "remarks": "Player Shared Secret Keys are used for the call to Client/GetTitlePublicKey, which exchanges the shared secret for an RSA CSP blob to be used to encrypt the payload of account creation requests when that API requires a signature header. See also PlayFabAdminCreatePlayerSharedSecretAsync, PlayFabAdminGetPlayerSharedSecretsAsync, PlayFabAdminUpdatePlayerSharedSecretAsync"
    },
    "PlayFabAdminDeleteSegmentAsync": {
        "summary": "TODO REVIEW: Deletes an existing player segment and its associated action(s) for a title.",
        "remarks": "Send segment id planning to delete part of DeleteSegmentRequest object"
    },
    "PlayFabAdminDeleteStoreAsync": {
        "summary": "TODO REVIEW: Deletes an existing virtual item store",
        "remarks": "This non-reversible operation will permanently delete the requested store. See also PlayFabAdminGetStoreItemsAsync, PlayFabAdminSetStoreItemsAsync, PlayFabAdminUpdateStoreItemsAsync"
    },
    "PlayFabAdminDeleteTaskAsync": {
        "summary": "TODO REVIEW: Delete a task.",
        "remarks": "After a task is deleted, for tracking purposes, the task instances belonging to this task will still remain. They will become orphaned and does not belongs to any task. Executions of any in-progress task instances will continue. If the task specified does not exist, the deletion is considered a success. See also PlayFabAdminCreateActionsOnPlayersInSegmentTaskAsync, PlayFabAdminCreateCloudScriptAzureFunctionsTaskAsync, PlayFabAdminCreateCloudScriptTaskAsync, PlayFabAdminGetTasksAsync, PlayFabAdminRunTaskAsync, PlayFabAdminUpdateTaskAsync"
    },
    "PlayFabAdminDeleteTitleAsync": {
        "summary": "TODO REVIEW: Permanently deletes a title and all associated configuration",
        "remarks": "Deletes all data associated with the title, including catalog, virtual currencies, leaderboard statistics, Cloud Script revisions, segment definitions, event rules, tasks, add-ons, secret keys, data encryption keys, and permission policies. Removes the title from its studio and removes all associated developer roles and permissions. Does not delete PlayStream event history associated with the title. Note, this API queues the title for deletion and returns immediately. It may take several hours or more before all title data is fully deleted. All player accounts in the title must be deleted before deleting the title. If any player accounts exist, the API will return a 'TitleContainsUserAccounts' error. Until the title data is fully deleted, attempts to call APIs with the title will fail with the 'TitleDeleted' error. See also PlayFabAdminDeletePlayerAsync"
    },
    "PlayFabAdminDeleteTitleDataOverrideAsync": {
        "summary": "TODO REVIEW: Deletes a specified set of title data overrides.",
        "remarks": "This API method is designed to delete specified title data overrides associated with the given label."
    },
    "PlayFabAdminExportMasterPlayerDataAsync": {
        "summary": "TODO REVIEW: Exports all associated data of a master player account",
        "remarks": "Exports all data associated with the master player account, including data from all titles the player has played, such as statistics, custom data, inventory, purchases, virtual currency balances, characters, group memberships, publisher data, credential data, account linkages, friends list and PlayStream event history. Note, this API queues the player for export and returns a receipt immediately. Record the receipt ID for future reference. It may take some time before the export is available for download. Upon completion of the export, an email containing the URL to download the export dump will be sent to the notification email address configured for the title."
    },
    "PlayFabAdminGetActionsOnPlayersInSegmentTaskInstanceAsync": {
        "summary": "TODO REVIEW: Get information about a ActionsOnPlayersInSegment task instance.",
        "remarks": "The result includes detail information that's specific to an ActionsOnPlayersInSegment task. To get a list of task instances with generic basic information, use GetTaskInstances. See also PlayFabAdminAbortTaskInstanceAsync, PlayFabAdminGetCloudScriptAzureFunctionsTaskInstanceAsync, PlayFabAdminGetCloudScriptTaskInstanceAsync, PlayFabAdminGetTaskInstancesAsync, PlayFabAdminRunTaskAsync"
    },
    "PlayFabAdminGetAllSegmentsAsync": {
        "summary": "TODO REVIEW: Retrieves an array of player segment definitions. Results from this can be used in subsequent API calls such as GetPlayersInSegment which requires a Segment ID. While segment names can change the ID for that segment will not change.",
        "remarks": "Request has no paramaters. See also PlayFabAdminGetPlayersInSegmentAsync"
    },
    "PlayFabAdminGetCatalogItemsAsync": {
        "summary": "TODO REVIEW: Retrieves the specified version of the title's catalog of virtual goods, including all defined properties",
        "remarks": "See also PlayFabAdminSetCatalogItemsAsync, PlayFabAdminUpdateCatalogItemsAsync"
    },
    "PlayFabAdminGetCloudScriptRevisionAsync": {
        "summary": "TODO REVIEW: Gets the contents and information of a specific Cloud Script revision."
    },
    "PlayFabAdminGetCloudScriptTaskInstanceAsync": {
        "summary": "TODO REVIEW: Get detail information about a CloudScript task instance.",
        "remarks": "The result includes detail information that's specific to a CloudScript task. Only CloudScript tasks configured as 'Run Cloud Script function once' will be retrieved. To get a list of task instances by task, status, or time range, use GetTaskInstances. See also PlayFabAdminAbortTaskInstanceAsync, PlayFabAdminGetActionsOnPlayersInSegmentTaskInstanceAsync, PlayFabAdminGetCloudScriptAzureFunctionsTaskInstanceAsync, PlayFabAdminGetTaskInstancesAsync, PlayFabAdminRunTaskAsync"
    },
    "PlayFabAdminGetCloudScriptVersionsAsync": {
        "summary": "TODO REVIEW: Lists all the current cloud script versions. For each version, information about the current published and latest revisions is also listed."
    },
    "PlayFabAdminGetContentListAsync": {
        "summary": "TODO REVIEW: List all contents of the title and get statistics such as size",
        "remarks": "See also PlayFabAdminDeleteContentAsync, PlayFabClientGetContentDownloadUrlAsync, PlayFabServerGetContentDownloadUrlAsync, PlayFabAdminGetContentUploadUrlAsync"
    },
    "PlayFabAdminGetContentUploadUrlAsync": {
        "summary": "TODO REVIEW: Retrieves the pre-signed URL for uploading a content file. A subsequent HTTP PUT to the returned URL uploads the content. Also, please be aware that the Content service is specifically PlayFab's CDN offering, for which standard CDN rates apply.",
        "remarks": "See also PlayFabAdminDeleteContentAsync, PlayFabClientGetContentDownloadUrlAsync, PlayFabServerGetContentDownloadUrlAsync, PlayFabAdminGetContentListAsync"
    },
    "PlayFabAdminGetDataReportAsync": {
        "summary": "TODO REVIEW: Retrieves a download URL for the requested report",
        "remarks": "Gets the download URL for the requested report data (in CSV form). The reports available through this API call are those available in the Game Manager, in the Analytics->Reports tab."
    },
    "PlayFabAdminGetMatchmakerGameInfoAsync": {
        "summary": "TODO REVIEW: Retrieves the details for a specific completed session, including links to standard out and standard error logs",
        "remarks": "See also PlayFabAdminGetMatchmakerGameModesAsync, PlayFabAdminModifyMatchmakerGameModesAsync"
    },
    "PlayFabAdminGetMatchmakerGameModesAsync": {
        "summary": "TODO REVIEW: Retrieves the details of defined game modes for the specified game server executable",
        "remarks": "These details are used by the PlayFab matchmaking service to determine if an existing Game Server Instance has room for additional users, and by the PlayFab game server management service to determine when a new Game Server Host should be created in order to prevent excess load on existing Hosts. See also PlayFabAdminGetMatchmakerGameInfoAsync, PlayFabAdminModifyMatchmakerGameModesAsync"
    },
    "PlayFabAdminGetPlayedTitleListAsync": {
        "summary": "TODO REVIEW: Get the list of titles that the player has played",
        "remarks": "Useful for identifying titles of which the player's data will be deleted by DeleteMasterPlayer. See also PlayFabAdminDeleteMasterPlayerAccountAsync"
    },
    "PlayFabAdminGetPlayerIdFromAuthTokenAsync": {
        "summary": "TODO REVIEW: Gets a player's ID from an auth token.",
        "remarks": "Gets a player ID from an auth token. The token expires after 30 minutes and cannot be used to look up a player when expired."
    },
    "PlayFabAdminGetPlayerProfileAsync": {
        "summary": "TODO REVIEW: Retrieves the player's profile",
        "remarks": "This API allows for access to details regarding a user in the PlayFab service, usually for purposes of customer support. Note that data returned may be Personally Identifying Information (PII), such as email address, and so care should be taken in how this data is stored and managed. Since this call will always return the relevant information for users who have accessed the title, the recommendation is to not store this data locally."
    },
    "PlayFabAdminGetPlayerSegmentsAsync": {
        "summary": "TODO REVIEW: List all segments that a player currently belongs to at this moment in time.",
        "remarks": "See also PlayFabAdminGetAllSegmentsAsync"
    },
    "PlayFabAdminGetPlayerSharedSecretsAsync": {
        "summary": "TODO REVIEW: Returns all Player Shared Secret Keys including disabled and expired.",
        "remarks": "Player Shared Secret Keys are used for the call to Client/GetTitlePublicKey, which exchanges the shared secret for an RSA CSP blob to be used to encrypt the payload of account creation requests when that API requires a signature header. See also PlayFabAdminCreatePlayerSharedSecretAsync, PlayFabAdminUpdatePlayerSharedSecretAsync"
    },
    "PlayFabAdminGetPlayersInSegmentAsync": {
        "summary": "TODO REVIEW: Allows for paging through all players in a given segment. This API creates a snapshot of all player profiles that match the segment definition at the time of its creation and lives through the Total Seconds to Live, refreshing its life span on each subsequent use of the Continuation Token. Profiles that change during the course of paging will not be reflected in the results. AB Test segments are currently not supported by this operation. NOTE: This API is limited to being called 30 times in one minute. You will be returned an error if you exceed this threshold.",
        "remarks": "Initial request must contain at least a Segment ID. Subsequent requests must contain the Segment ID as well as the Continuation Token. Failure to send the Continuation Token will result in a new player segment list being generated. Each time the Continuation Token is passed in the length of the Total Seconds to Live is refreshed. If too much time passes between requests to the point that a subsequent request is past the Total Seconds to Live an error will be returned and paging will be terminated. This API is resource intensive and should not be used in scenarios which might generate high request volumes. Only one request to this API at a time should be made per title. Concurrent requests to the API may be rejected with the APIConcurrentRequestLimitExceeded error. See also PlayFabAdminGetAllSegmentsAsync"
    },
    "PlayFabAdminGetPlayerStatisticDefinitionsAsync": {
        "summary": "TODO REVIEW: Retrieves the configuration information for all player statistics defined in the title, regardless of whether they have a reset interval.",
        "remarks": "See also PlayFabAdminCreatePlayerStatisticDefinitionAsync, PlayFabClientGetPlayerStatisticsAsync, PlayFabServerGetPlayerStatisticsAsync, PlayFabAdminUpdatePlayerStatisticDefinitionAsync, PlayFabClientUpdatePlayerStatisticsAsync, PlayFabServerUpdatePlayerStatisticsAsync"
    },
    "PlayFabAdminGetPlayerStatisticVersionsAsync": {
        "summary": "TODO REVIEW: Retrieves the information on the available versions of the specified statistic.",
        "remarks": "See also PlayFabAdminCreatePlayerStatisticDefinitionAsync, PlayFabAdminGetPlayerStatisticDefinitionsAsync, PlayFabClientGetPlayerStatisticsAsync, PlayFabServerGetPlayerStatisticsAsync, PlayFabAdminUpdatePlayerStatisticDefinitionAsync, PlayFabClientUpdatePlayerStatisticsAsync, PlayFabServerUpdatePlayerStatisticsAsync"
    },
    "PlayFabAdminGetPlayerTagsAsync": {
        "summary": "TODO REVIEW: Get all tags with a given Namespace (optional) from a player profile.",
        "remarks": "This API will return a list of canonical tags which includes both namespace and tag's name. If namespace is not provided, the result is a list of all canonical tags. TagName can be used for segmentation and Namespace is limited to 128 characters. See also PlayFabAdminAddPlayerTagAsync, PlayFabAdminRemovePlayerTagAsync"
    },
    "PlayFabAdminGetPolicyAsync": {
        "summary": "TODO REVIEW: Gets the requested policy.",
        "remarks": "Views the requested policy. Today, the only supported policy is 'ApiPolicy'. See also PlayFabAdminUpdatePolicyAsync"
    },
    "PlayFabAdminGetPublisherDataAsync": {
        "summary": "TODO REVIEW: Retrieves the key-value store of custom publisher settings",
        "remarks": "This API is designed to return publisher-specific values which can be read, but not written to, by the client. This data is shared across all titles assigned to a particular publisher, and can be used for cross-game coordination. Only titles assigned to a publisher can use this API. For more information email helloplayfab@microsoft.com. This AdminAPI call for getting title data guarantees no delay in between update and retrieval of newly set data. See also PlayFabAdminSetPublisherDataAsync"
    },
    "PlayFabAdminGetRandomResultTablesAsync": {
        "summary": "TODO REVIEW: Retrieves the random drop table configuration for the title",
        "remarks": "See also PlayFabAdminUpdateRandomResultTablesAsync"
    },
    "PlayFabAdminGetSegmentsAsync": {
        "summary": "TODO REVIEW: Get detail information of a segment and its associated definition(s) and action(s) for a title.",
        "remarks": "Send segment filter details part of GetSegmentsRequest object"
    },
    "PlayFabAdminGetServerBuildInfoAsync": {
        "summary": "TODO REVIEW: Retrieves the build details for the specified game server executable",
        "remarks": "See also PlayFabAdminAddServerBuildAsync, PlayFabAdminListServerBuildsAsync, PlayFabAdminModifyServerBuildAsync, PlayFabAdminRemoveServerBuildAsync"
    },
    "PlayFabAdminGetServerBuildUploadUrlAsync": {
        "summary": "TODO REVIEW: Retrieves the pre-authorized URL for uploading a game server package containing a build (does not enable the build for use - see AddServerBuild)",
        "remarks": "See also PlayFabAdminAddServerBuildAsync, PlayFabAdminListServerBuildsAsync, PlayFabAdminModifyServerBuildAsync, PlayFabAdminRemoveServerBuildAsync"
    },
    "PlayFabAdminGetStoreItemsAsync": {
        "summary": "TODO REVIEW: Retrieves the set of items defined for the specified store, including all prices defined",
        "remarks": "A store contains an array of references to items defined in the catalog, along with the prices for the item, in both real world and virtual currencies. These prices act as an override to any prices defined in the catalog. In this way, the base definitions of the items may be defined in the catalog, with all associated properties, while the pricing can be set for each store, as needed. This allows for subsets of goods to be defined for different purposes (in order to simplify showing some, but not all catalog items to users, based upon different characteristics), along with unique prices. Note that all prices defined in the catalog and store definitions for the item are considered valid, and that a compromised client can be made to send a request for an item based upon any of these definitions. If no price is specified in the store for an item, the price set in the catalog should be displayed to the user. See also PlayFabAdminDeleteStoreAsync, PlayFabAdminSetStoreItemsAsync, PlayFabAdminUpdateStoreItemsAsync"
    },
    "PlayFabAdminGetTaskInstancesAsync": {
        "summary": "TODO REVIEW: Query for task instances by task, status, or time range.",
        "remarks": "Only the most recent 100 task instances are returned, ordered by start time descending. The results are generic basic information for task instances. To get detail information specific to each task type, use Get*TaskInstance based on its corresponding task type. See also PlayFabAdminAbortTaskInstanceAsync, PlayFabAdminGetActionsOnPlayersInSegmentTaskInstanceAsync, PlayFabAdminGetCloudScriptAzureFunctionsTaskInstanceAsync, PlayFabAdminGetCloudScriptTaskInstanceAsync, PlayFabAdminRunTaskAsync"
    },
    "PlayFabAdminGetTasksAsync": {
        "summary": "TODO REVIEW: Get definition information on a specified task or all tasks within a title.",
        "remarks": "See also PlayFabAdminCreateCloudScriptAzureFunctionsTaskAsync, PlayFabAdminCreateCloudScriptTaskAsync, PlayFabAdminDeleteTaskAsync, PlayFabAdminGetTasksAsync, PlayFabAdminRunTaskAsync, PlayFabAdminUpdateTaskAsync"
    },
    "PlayFabAdminGetTitleDataAsync": {
        "summary": "TODO REVIEW: Retrieves the key-value store of custom title settings which can be read by the client",
        "remarks": "This API method is designed to return title specific values which can be read by the client. For example, a developer could choose to store values which modify the user experience, such as enemy spawn rates, weapon strengths, movement speeds, etc. This allows a developer to update the title without the need to create, test, and ship a new build. If an override label is specified in the request, the overrides are applied automatically and returned with the title data. Note that due to caching, there may up to a minute delay in between updating title data and a query returning the newest value. See also PlayFabAdminSetTitleDataAsync"
    },
    "PlayFabAdminGetTitleInternalDataAsync": {
        "summary": "TODO REVIEW: Retrieves the key-value store of custom title settings which cannot be read by the client",
        "remarks": "This API method is designed to return title specific values which are accessible only by the server. These values can be used to tweak settings used by game servers and Cloud Scripts without the need to update and re-deploy. Note that due to caching, there may up to a minute delay in between updating title data and this query returning the newest value. See also PlayFabAdminSetTitleInternalDataAsync"
    },
    "PlayFabAdminGetUserAccountInfoAsync": {
        "summary": "TODO REVIEW: Retrieves the relevant details for a specified user, based upon a match against a supplied unique identifier",
        "remarks": "This API allows for access to details regarding a user in the PlayFab service, usually for purposes of customer support. Note that data returned may be Personally Identifying Information (PII), such as email address, and so care should be taken in how this data is stored and managed. Since this call will always return the relevant information for users who have accessed the title, the recommendation is to not store this data locally. See also PlayFabAdminGetUserInventoryAsync"
    },
    "PlayFabAdminGetUserBansAsync": {
        "summary": "TODO REVIEW: Gets all bans for a user.",
        "remarks": "Get all bans for a user, including inactive and expired bans.  See also PlayFabAdminBanUsersAsync, PlayFabAdminRevokeAllBansForUserAsync, PlayFabAdminRevokeBansAsync, PlayFabAdminUpdateBansAsync"
    },
    "PlayFabAdminGetUserDataAsync": {
        "summary": "TODO REVIEW: Retrieves the title-specific custom data for the user which is readable and writable by the client",
        "remarks": "Data is stored as JSON key-value pairs. If the Keys parameter is provided, the data object returned will only contain the data specific to the indicated Keys. Otherwise, the full set of custom user data will be returned. See also PlayFabAdminGetUserInternalDataAsync, PlayFabAdminGetUserReadOnlyDataAsync, PlayFabAdminUpdateUserDataAsync, PlayFabAdminUpdateUserInternalDataAsync, PlayFabAdminUpdateUserReadOnlyDataAsync"
    },
    "PlayFabAdminGetUserInternalDataAsync": {
        "summary": "TODO REVIEW: Retrieves the title-specific custom data for the user which cannot be accessed by the client",
        "remarks": "Data is stored as JSON key-value pairs. If the Keys parameter is provided, the data object returned will only contain the data specific to the indicated Keys. Otherwise, the full set of custom user data will be returned. See also PlayFabAdminGetUserDataAsync, PlayFabAdminGetUserReadOnlyDataAsync, PlayFabAdminUpdateUserDataAsync, PlayFabAdminUpdateUserInternalDataAsync, PlayFabAdminUpdateUserReadOnlyDataAsync"
    },
    "PlayFabAdminGetUserInventoryAsync": {
        "summary": "TODO REVIEW: Retrieves the specified user's current inventory of virtual goods",
        "remarks": "All items currently in the user inventory will be returned, irrespective of how they were acquired (via purchasing, grants, coupons, etc.). Items that are expired, fully consumed, or are no longer valid are not considered to be in the user's current inventory, and so will not be not included. See also PlayFabAdminGetUserAccountInfoAsync"
    },
    "PlayFabAdminGetUserPublisherDataAsync": {
        "summary": "TODO REVIEW: Retrieves the publisher-specific custom data for the user which is readable and writable by the client",
        "remarks": "Data is stored as JSON key-value pairs. If the Keys parameter is provided, the data object returned will only contain the data specific to the indicated Keys. Otherwise, the full set of custom user data will be returned. See also PlayFabAdminGetUserPublisherInternalDataAsync, PlayFabAdminGetUserPublisherReadOnlyDataAsync, PlayFabAdminUpdateUserPublisherDataAsync, PlayFabAdminUpdateUserPublisherInternalDataAsync, PlayFabAdminUpdateUserPublisherReadOnlyDataAsync"
    },
    "PlayFabAdminGetUserPublisherInternalDataAsync": {
        "summary": "TODO REVIEW: Retrieves the publisher-specific custom data for the user which cannot be accessed by the client",
        "remarks": "Data is stored as JSON key-value pairs. If the Keys parameter is provided, the data object returned will only contain the data specific to the indicated Keys. Otherwise, the full set of custom user data will be returned. See also PlayFabAdminGetUserPublisherDataAsync, PlayFabAdminGetUserPublisherReadOnlyDataAsync, PlayFabAdminUpdateUserPublisherDataAsync, PlayFabAdminUpdateUserPublisherInternalDataAsync, PlayFabAdminUpdateUserPublisherReadOnlyDataAsync"
    },
    "PlayFabAdminGetUserPublisherReadOnlyDataAsync": {
        "summary": "TODO REVIEW: Retrieves the publisher-specific custom data for the user which can only be read by the client",
        "remarks": "Data is stored as JSON key-value pairs. If the Keys parameter is provided, the data object returned will only contain the data specific to the indicated Keys. Otherwise, the full set of custom user data will be returned. See also PlayFabAdminGetUserPublisherDataAsync, PlayFabAdminGetUserPublisherInternalDataAsync, PlayFabAdminUpdateUserPublisherDataAsync, PlayFabAdminUpdateUserPublisherInternalDataAsync, PlayFabAdminUpdateUserPublisherReadOnlyDataAsync"
    },
    "PlayFabAdminGetUserReadOnlyDataAsync": {
        "summary": "TODO REVIEW: Retrieves the title-specific custom data for the user which can only be read by the client",
        "remarks": "Data is stored as JSON key-value pairs. If the Keys parameter is provided, the data object returned will only contain the data specific to the indicated Keys. Otherwise, the full set of custom user data will be returned. See also PlayFabAdminGetUserDataAsync, PlayFabAdminGetUserInternalDataAsync, PlayFabAdminUpdateUserDataAsync, PlayFabAdminUpdateUserInternalDataAsync, PlayFabAdminUpdateUserReadOnlyDataAsync"
    },
    "PlayFabAdminGrantItemsToUsersAsync": {
        "summary": "TODO REVIEW: Adds the specified items to the specified user inventories",
        "remarks": "This function directly adds inventory items to user inventories. As a result of this operations, the user will not be charged any transaction fee, regardless of the inventory item catalog definition. Please note that the processing time for inventory grants and purchases increases fractionally the more items are in the inventory, and the more items are in the grant/purchase operation."
    },
    "PlayFabAdminIncrementLimitedEditionItemAvailabilityAsync": {
        "summary": "TODO REVIEW: Increases the global count for the given scarce resource.",
        "remarks": "This operation will increment the global counter for the number of these items available. This number cannot be decremented, except by actual grants. See also PlayFabAdminCheckLimitedEditionItemAvailabilityAsync"
    },
    "PlayFabAdminIncrementPlayerStatisticVersionAsync": {
        "summary": "TODO REVIEW: Resets the indicated statistic, removing all player entries for it and backing up the old values.",
        "remarks": "Statistics are numeric values, with each statistic in the title also generating a leaderboard. When this call is made on a given statistic, this forces a reset of that statistic. Upon reset, the statistic updates to a new version with no values (effectively removing all players from the leaderboard). The previous version's statistic values are also archived for retrieval, if needed (see GetPlayerStatisticVersions). Statistics not created via a call to CreatePlayerStatisticDefinition by default have a VersionChangeInterval of Never, meaning they do not reset on a schedule, but they can be set to do so via a call to UpdatePlayerStatisticDefinition. Once a statistic has been reset (sometimes referred to as versioned or incremented), the now-previous version can still be written to for up a short, pre-defined period (currently 10 seconds), to prevent issues with levels completing around the time of the reset. Also, once reset, the historical statistics for players in the title may be retrieved using the URL specified in the version information (GetPlayerStatisticVersions). See also PlayFabAdminCreatePlayerStatisticDefinitionAsync, PlayFabAdminGetPlayerStatisticDefinitionsAsync, PlayFabClientGetPlayerStatisticsAsync, PlayFabServerGetPlayerStatisticsAsync, PlayFabAdminGetPlayerStatisticVersionsAsync, PlayFabAdminUpdatePlayerStatisticDefinitionAsync, PlayFabClientUpdatePlayerStatisticsAsync, PlayFabServerUpdatePlayerStatisticsAsync"
    },
    "PlayFabAdminListOpenIdConnectionAsync": {
        "summary": "TODO REVIEW: Retrieves a list of all Open ID Connect providers registered to a title.",
        "remarks": "See also PlayFabAdminCreateOpenIdConnectionAsync, PlayFabAdminDeleteOpenIdConnectionAsync, PlayFabAdminUpdateOpenIdConnectionAsync"
    },
    "PlayFabAdminListServerBuildsAsync": {
        "summary": "TODO REVIEW: Retrieves the build details for all game server executables which are currently defined for the title",
        "remarks": "See also PlayFabAdminAddServerBuildAsync, PlayFabAdminGetServerBuildInfoAsync, PlayFabClientMatchmakeAsync, PlayFabAdminModifyServerBuildAsync, PlayFabAdminRemoveServerBuildAsync, PlayFabMatchmakerStartGameAsync"
    },
    "PlayFabAdminListVirtualCurrencyTypesAsync": {
        "summary": "TODO REVIEW: Retuns the list of all defined virtual currencies for the title",
        "remarks": "See also PlayFabAdminAddVirtualCurrencyTypesAsync, PlayFabAdminRemoveVirtualCurrencyTypesAsync"
    },
    "PlayFabAdminModifyMatchmakerGameModesAsync": {
        "summary": "TODO REVIEW: Updates the game server mode details for the specified game server executable",
        "remarks": "These details are used by the PlayFab matchmaking service to determine if an existing Game Server Instance has room for additional users, and by the PlayFab game server management service to determine when a new Game Server Host should be created in order to prevent excess load on existing Hosts. This operation is not additive. Using it will cause the game mode definition for the game server executable in question to be created from scratch. If there is an existing game server mode definition for the given BuildVersion, it will be deleted and replaced with the data specified in this call. See also PlayFabAdminGetMatchmakerGameInfoAsync, PlayFabAdminGetMatchmakerGameModesAsync"
    },
    "PlayFabAdminModifyServerBuildAsync": {
        "summary": "TODO REVIEW: Updates the build details for the specified game server executable",
        "remarks": "See also PlayFabAdminAddServerBuildAsync, PlayFabAdminGetServerBuildInfoAsync, PlayFabAdminListServerBuildsAsync, PlayFabAdminRemoveServerBuildAsync"
    },
    "PlayFabAdminRefundPurchaseAsync": {
        "summary": "TODO REVIEW: Attempts to process an order refund through the original real money payment provider."
    },
    "PlayFabAdminRemovePlayerTagAsync": {
        "summary": "TODO REVIEW: Remove a given tag from a player profile. The tag's namespace is automatically generated based on the source of the tag.",
        "remarks": "This API will trigger a player_tag_removed event and remove a tag with the given TagName and PlayFabID from the corresponding player profile. TagName can be used for segmentation and it is limited to 256 characters See also PlayFabAdminAddPlayerTagAsync, PlayFabAdminGetPlayerTagsAsync"
    },
    "PlayFabAdminRemoveServerBuildAsync": {
        "summary": "TODO REVIEW: Removes the game server executable specified from the set of those a client is permitted to request in a call to StartGame",
        "remarks": "See also PlayFabAdminAddServerBuildAsync, PlayFabAdminGetServerBuildInfoAsync, PlayFabAdminListServerBuildsAsync, PlayFabClientMatchmakeAsync, PlayFabAdminModifyServerBuildAsync, PlayFabMatchmakerStartGameAsync"
    },
    "PlayFabAdminRemoveVirtualCurrencyTypesAsync": {
        "summary": "TODO REVIEW: Removes one or more virtual currencies from the set defined for the title.",
        "remarks": "Virtual currencies to be removed cannot have entries in any catalog nor store for the title. Note that this operation will not remove player balances for the removed currencies; if a deleted currency is recreated at any point, user balances will be in an undefined state. See also PlayFabAdminAddVirtualCurrencyTypesAsync, PlayFabAdminListVirtualCurrencyTypesAsync"
    },
    "PlayFabAdminResetCharacterStatisticsAsync": {
        "summary": "TODO REVIEW: Completely removes all statistics for the specified character, for the current game",
        "remarks": "Note that this action cannot be un-done. All statistics for this character will be deleted, removing the user from all leaderboards for the game."
    },
    "PlayFabAdminResetPasswordAsync": {
        "summary": "TODO REVIEW: Reset a player's password for a given title.",
        "remarks": "Resets a player's password taking in a new password based and validating the user based off of a token sent to the playerto their email. The token expires after 30 minutes."
    },
    "PlayFabAdminResetUserStatisticsAsync": {
        "summary": "TODO REVIEW: Completely removes all statistics for the specified user, for the current game",
        "remarks": "Note that this action cannot be un-done. All statistics for this user will be deleted, removing the user from all leaderboards for the game."
    },
    "PlayFabAdminResolvePurchaseDisputeAsync": {
        "summary": "TODO REVIEW: Attempts to resolve a dispute with the original order's payment provider."
    },
    "PlayFabAdminRevokeAllBansForUserAsync": {
        "summary": "TODO REVIEW: Revoke all active bans for a user.",
        "remarks": "Setting the active state of all non-expired bans for a user to Inactive. Expired bans with an Active state will be ignored, however. Returns information about applied updates only. See also PlayFabAdminBanUsersAsync, PlayFabAdminGetUserBansAsync, PlayFabAdminRevokeBansAsync, PlayFabAdminUpdateBansAsync"
    },
    "PlayFabAdminRevokeBansAsync": {
        "summary": "TODO REVIEW: Revoke all active bans specified with BanId.",
        "remarks": "Setting the active state of all bans requested to Inactive regardless of whether that ban has already expired. BanIds that do not exist will be skipped. Returns information about applied updates only.  See also PlayFabAdminBanUsersAsync, PlayFabAdminGetUserBansAsync, PlayFabAdminRevokeAllBansForUserAsync, PlayFabAdminUpdateBansAsync"
    },
    "PlayFabAdminRevokeInventoryItemAsync": {
        "summary": "TODO REVIEW: Revokes access to an item in a user's inventory",
        "remarks": "In cases where the inventory item in question is a 'crate', and the items it contained have already been dispensed, this will not revoke access or otherwise remove the items which were dispensed. See also PlayFabAdminGetUserInventoryAsync"
    },
    "PlayFabAdminRevokeInventoryItemsAsync": {
        "summary": "TODO REVIEW: Revokes access for up to 25 items across multiple users and characters.",
        "remarks": "In cases where the inventory item in question is a 'crate', and the items it contained have already been dispensed, this will not revoke access or otherwise remove the items which were dispensed. See also PlayFabAdminGetUserInventoryAsync"
    },
    "PlayFabAdminRunTaskAsync": {
        "summary": "TODO REVIEW: Run a task immediately regardless of its schedule.",
        "remarks": "The returned task instance ID can be used to query for task execution status. See also PlayFabAdminCreateActionsOnPlayersInSegmentTaskAsync, PlayFabAdminCreateCloudScriptAzureFunctionsTaskAsync, PlayFabAdminCreateCloudScriptTaskAsync, PlayFabAdminDeleteTaskAsync, PlayFabAdminGetTasksAsync, PlayFabAdminUpdateTaskAsync"
    },
    "PlayFabAdminSendAccountRecoveryEmailAsync": {
        "summary": "TODO REVIEW: Forces an email to be sent to the registered email address for the user's account, with a link allowing the user to change the password.If an account recovery email template ID is provided, an email using the custom email template will be used.",
        "remarks": "If the account in question is a 'temporary' account (for example, one that was created via a call to LoginFromIOSDeviceID), thisfunction will have no effect. Only PlayFab accounts which have valid email addresses will be able to receive a password reset email using this API."
    },
    "PlayFabAdminSetCatalogItemsAsync": {
        "summary": "TODO REVIEW: Creates the catalog configuration of all virtual goods for the specified catalog version",
        "remarks": "This operation is not additive. Using it will cause the indicated catalog version to be created from scratch. If there is an existing catalog with the version number in question, it will be deleted and replaced with only the items specified in this call. See also PlayFabAdminGetCatalogItemsAsync, PlayFabAdminUpdateCatalogItemsAsync"
    },
    "PlayFabAdminSetPlayerSecretAsync": {
        "summary": "TODO REVIEW: Sets or resets the player's secret. Player secrets are used to sign API requests.",
        "remarks": "APIs that require signatures require that the player have a configured Player Secret Key that is used to sign all requests. Players that don't have a secret will be blocked from making API calls until it is configured. To create a signature header add a SHA256 hashed string containing UTF8 encoded JSON body as it will be sent to the server, the current time in UTC formatted to ISO 8601, and the players secret formatted as 'body.date.secret'. Place the resulting hash into the header X-PlayFab-Signature, along with a header X-PlayFab-Timestamp of the same UTC timestamp used in the signature."
    },
    "PlayFabAdminSetPublishedRevisionAsync": {
        "summary": "TODO REVIEW: Sets the currently published revision of a title Cloud Script"
    },
    "PlayFabAdminSetPublisherDataAsync": {
        "summary": "TODO REVIEW: Updates the key-value store of custom publisher settings",
        "remarks": "This API is designed to store publisher-specific values which can be read, but not written to, by the client. This data is shared across all titles assigned to a particular publisher, and can be used for cross-game coordination. Only titles assigned to a publisher can use this API. This operation is additive. If a Key does not exist in the current dataset, it will be added with the specified Value. If it already exists, the Value for that key will be overwritten with the new Value. For more information email helloplayfab@microsoft.com See also PlayFabAdminGetPublisherDataAsync"
    },
    "PlayFabAdminSetStoreItemsAsync": {
        "summary": "TODO REVIEW: Sets all the items in one virtual store",
        "remarks": "This operation is not additive. Using it will cause the indicated virtual store to be created from scratch. If there is an existing store with the same storeId, it will be deleted and replaced with only the items specified in this call. A store contains an array of references to items defined inthe catalog, along with the prices for the item, in both real world and virtual currencies. These prices act as an override to any prices defined in the catalog. In this way, the base definitions of the items may be defined in the catalog, with all associated properties, while the pricing can be set for each store, as needed. This allows for subsets of goods to be defined for different purposes (in order to simplify showing some, but not all catalog items to users, based upon different characteristics), along with unique prices. Note that all prices defined in the catalog and store definitions for the item are considered valid, and that a compromised client can be made to send a request for an item based upon any of these definitions. If no price is specified in the store for an item, the price set in the catalog should be displayed to the user. See also PlayFabAdminDeleteStoreAsync, PlayFabAdminGetStoreItemsAsync, PlayFabAdminUpdateStoreItemsAsync"
    },
    "PlayFabAdminSetTitleDataAsync": {
        "summary": "TODO REVIEW: Creates and updates the key-value store of custom title settings which can be read by the client",
        "remarks": "This API method is designed to store title specific values which can be read by the client. For example, a developer could choose to store values which modify the user experience, such as enemy spawn rates, weapon strengths, movement speeds, etc. This allows a developer to update the title without the need to create, test, and ship a new build. This operation is additive. If a Key does not exist in the current dataset, it will be added with the specified Value. If it already exists, the Value for that key will be overwritten with the new Value. See also PlayFabAdminGetTitleDataAsync"
    },
    "PlayFabAdminSetTitleDataAndOverridesAsync": {
        "summary": "TODO REVIEW: Set and delete key-value pairs in a title data override instance.",
        "remarks": "This API method is designed to set and delete key-value pairs in a title data override instance. If the key exists and the new value is empty, the method will delete the key; otherwise, the method will update the current value with the new value. Keys are trimmed and cannot start with '!'. See also PlayFabAdminGetTitleDataAsync"
    },
    "PlayFabAdminSetTitleInternalDataAsync": {
        "summary": "TODO REVIEW: Updates the key-value store of custom title settings which cannot be read by the client",
        "remarks": "This API method is designed to store title specific values which are accessible only by the server. These values can be used to tweak settings used by game servers and Cloud Scripts without the need to update and re-deploy. This operation is additive. If a Key does not exist in the current dataset, it will be added with the specified Value. If it already exists, the Value for that key will be overwritten with the new Value. See also PlayFabAdminGetTitleInternalDataAsync"
    },
    "PlayFabAdminSetupPushNotificationAsync": {
        "summary": "TODO REVIEW: Sets the Amazon Resource Name (ARN) for iOS and Android push notifications. Documentation on the exact restrictions can be found at: http://docs.aws.amazon.com/sns/latest/api/API_CreatePlatformApplication.html. Currently, Amazon device Messaging is not supported.",
        "remarks": "When using the Apple Push Notification service (APNS) or the development version (APNS_SANDBOX), the APNS Private Key should be used as the Credential in this call. With Google Cloud Messaging (GCM), the Android API Key should be used. The current ARN (if one exists) can be overwritten by setting the OverwriteOldARN boolean to true."
    },
    "PlayFabAdminSubtractUserVirtualCurrencyAsync": {
        "summary": "TODO REVIEW: Decrements the specified virtual currency by the stated amount",
        "remarks": "See also PlayFabAdminAddUserVirtualCurrencyAsync"
    },
    "PlayFabAdminUpdateBansAsync": {
        "summary": "TODO REVIEW: Updates information of a list of existing bans specified with Ban Ids.",
        "remarks": "For each ban, only updates the values that are set. Leave any value to null for no change. If a ban could not be found, the rest are still applied. Returns information about applied updates only. See also PlayFabAdminBanUsersAsync, PlayFabAdminGetUserBansAsync, PlayFabAdminRevokeAllBansForUserAsync, PlayFabAdminRevokeBansAsync"
    },
    "PlayFabAdminUpdateCatalogItemsAsync": {
        "summary": "TODO REVIEW: Updates the catalog configuration for virtual goods in the specified catalog version",
        "remarks": "This operation is additive. Items with ItemId values not currently in the catalog will be added, while those with ItemId values matching items currently in the catalog will overwrite those items with the given values. See also PlayFabAdminGetCatalogItemsAsync, PlayFabAdminSetCatalogItemsAsync"
    },
    "PlayFabAdminUpdateCloudScriptAsync": {
        "summary": "TODO REVIEW: Creates a new Cloud Script revision and uploads source code to it. Note that at this time, only one file should be submitted in the revision."
    },
    "PlayFabAdminUpdateOpenIdConnectionAsync": {
        "summary": "TODO REVIEW: Modifies data and credentials for an existing relationship between a title and an Open ID Connect provider",
        "remarks": "See also PlayFabAdminCreateOpenIdConnectionAsync, PlayFabAdminDeleteOpenIdConnectionAsync, PlayFabAdminListOpenIdConnectionAsync"
    },
    "PlayFabAdminUpdatePlayerSharedSecretAsync": {
        "summary": "TODO REVIEW: Updates a existing Player Shared Secret Key. It may take up to 5 minutes for this update to become generally available after this API returns.",
        "remarks": "Player Shared Secret Keys are used for the call to Client/GetTitlePublicKey, which exchanges the shared secret for an RSA CSP blob to be used to encrypt the payload of account creation requests when that API requires a signature header. See also PlayFabAdminCreatePlayerSharedSecretAsync, PlayFabAdminGetPlayerSharedSecretsAsync"
    },
    "PlayFabAdminUpdatePlayerStatisticDefinitionAsync": {
        "summary": "TODO REVIEW: Updates a player statistic configuration for the title, optionally allowing the developer to specify a reset interval.",
        "remarks": "Statistics are numeric values, with each statistic in the title also generating a leaderboard. The ResetInterval enables automatically resetting leaderboards on a specified interval. Upon reset, the statistic updates to a new version with no values (effectively removing all players from the leaderboard). The previous version's statistic values are also archived for retrieval, if needed (see GetPlayerStatisticVersions). Statistics not created via a call to CreatePlayerStatisticDefinition by default have a VersionChangeInterval of Never, meaning they do not reset on a schedule, but they can be set to do so via a call to UpdatePlayerStatisticDefinition. Once a statistic has been reset (sometimes referred to as versioned or incremented), the now-previous version can still be written to for up a short, pre-defined period (currently 10 seconds), to prevent issues with levels completing around the time of the reset. Also, once reset, the historical statistics for players in the title may be retrieved using the URL specified in the version information (GetPlayerStatisticVersions). The AggregationMethod determines what action is taken when a new statistic value is submitted - always update with the new value (Last), use the highest of the old and new values (Max), use the smallest (Min), or add them together (Sum). See also PlayFabAdminCreatePlayerStatisticDefinitionAsync, PlayFabAdminGetPlayerStatisticDefinitionsAsync, PlayFabClientGetPlayerStatisticsAsync, PlayFabServerGetPlayerStatisticsAsync, PlayFabAdminGetPlayerStatisticVersionsAsync, PlayFabClientUpdatePlayerStatisticsAsync, PlayFabServerUpdatePlayerStatisticsAsync"
    },
    "PlayFabAdminUpdatePolicyAsync": {
        "summary": "TODO REVIEW: Changes a policy for a title",
        "remarks": "Updates permissions for your title. Policies affect what is allowed to happen on your title. Your policy is a collection of statements that, together, govern particular area for your title. Today, the only allowed policy is called 'ApiPolicy' and it governs what API calls are allowed. To verify that you have the latest version always download the current policy from GetPolicy before uploading a new policy. PlayFab updates the base policy periodically and will automatically apply it to the uploaded policy. Overwriting the combined policy blindly may result in unexpected API errors. See also PlayFabAdminGetPolicyAsync"
    },
    "PlayFabAdminUpdateRandomResultTablesAsync": {
        "summary": "TODO REVIEW: Updates the random drop table configuration for the title",
        "remarks": "This operation is additive. Tables with TableId values not currently defined will be added, while those with TableId values matching Tables currently in the catalog will be overwritten with the given values. See also PlayFabAdminGetRandomResultTablesAsync"
    },
    "PlayFabAdminUpdateSegmentAsync": {
        "summary": "TODO REVIEW: Updates an existing player segment and its associated definition(s) and action(s) for a title.",
        "remarks": "Update segment properties data which are planning to update"
    },
    "PlayFabAdminUpdateStoreItemsAsync": {
        "summary": "TODO REVIEW: Updates an existing virtual item store with new or modified items",
        "remarks": "This operation is additive. Items with ItemId values not currently in the store will be added, while those with ItemId values matching items currently in the catalog will overwrite those items with the given values. A store contains an array of references to items defined in the catalog, along with the prices for the item, in both real world and virtual currencies. These prices act as an override to any prices defined in the catalog. In this way, the base definitions of the items may be defined in the catalog, with all associated properties, while the pricing can be set for each store, as needed. This allows for subsets of goods to be defined for different purposes (in order to simplify showing some, but not all catalog items to users, based upon different characteristics), along with unique prices. Note that all prices defined in the catalog and store definitions for the item are considered valid, and that a compromised client can be made to send a request for an item based upon any of these definitions. If no price is specified in the store for an item, the price set in the catalog should be displayed to the user. See also PlayFabAdminDeleteStoreAsync, PlayFabAdminGetStoreItemsAsync, PlayFabAdminSetStoreItemsAsync"
    },
    "PlayFabAdminUpdateTaskAsync": {
        "summary": "TODO REVIEW: Update an existing task.",
        "remarks": "Note that when calling this API, all properties of the task have to be provided, including properties that you do not want to change. Parameters not specified would be set to default value. If the task name in the update request is new, a task rename operation will be executed before updating other fields of the task. WARNING: Renaming of a task may break logics where the task name is used as an identifier. See also PlayFabAdminCreateActionsOnPlayersInSegmentTaskAsync, PlayFabAdminCreateCloudScriptTaskAsync, PlayFabAdminDeleteTaskAsync, PlayFabAdminGetTasksAsync, PlayFabAdminRunTaskAsync"
    },
    "PlayFabAdminUpdateUserDataAsync": {
        "summary": "TODO REVIEW: Updates the title-specific custom data for the user which is readable and writable by the client",
        "remarks": "This function performs an additive update of the arbitrary JSON object containing the custom data for the user. In updating the custom data object, keys which already exist in the object will have their values overwritten, while keys with null values will be removed. No other key-value pairs will be changed apart from those specified in the call. See also PlayFabAdminGetUserDataAsync, PlayFabAdminGetUserInternalDataAsync, PlayFabAdminGetUserReadOnlyDataAsync, PlayFabAdminUpdateUserInternalDataAsync, PlayFabAdminUpdateUserReadOnlyDataAsync"
    },
    "PlayFabAdminUpdateUserInternalDataAsync": {
        "summary": "TODO REVIEW: Updates the title-specific custom data for the user which cannot be accessed by the client",
        "remarks": "This function performs an additive update of the arbitrary JSON object containing the custom data for the user. In updating the custom data object, keys which already exist in the object will have their values overwritten, keys with null values will be removed. No other key-value pairs will be changed apart from those specified in the call. See also PlayFabAdminGetUserDataAsync, PlayFabAdminGetUserInternalDataAsync, PlayFabAdminGetUserReadOnlyDataAsync, PlayFabAdminUpdateUserDataAsync, PlayFabAdminUpdateUserReadOnlyDataAsync"
    },
    "PlayFabAdminUpdateUserPublisherDataAsync": {
        "summary": "TODO REVIEW: Updates the publisher-specific custom data for the user which is readable and writable by the client",
        "remarks": "This function performs an additive update of the arbitrary JSON object containing the custom data for the user. In updating the custom data object, keys which already exist in the object will have their values overwritten, while keys with null values will be removed. No other key-value pairs will be changed apart from those specified in the call. Note that in the example call provided, title-specific data is used, as there may be a need to share this across titles (in sequels, for example). See also PlayFabAdminGetUserPublisherDataAsync, PlayFabAdminGetUserPublisherInternalDataAsync, PlayFabAdminGetUserPublisherReadOnlyDataAsync, PlayFabAdminUpdateUserPublisherInternalDataAsync, PlayFabAdminUpdateUserPublisherReadOnlyDataAsync"
    },
    "PlayFabAdminUpdateUserPublisherInternalDataAsync": {
        "summary": "TODO REVIEW: Updates the publisher-specific custom data for the user which cannot be accessed by the client",
        "remarks": "This function performs an additive update of the arbitrary JSON object containing the custom data for the user. In updating the custom data object, keys which already exist in the object will have their values overwritten, keys with null values will be removed. No other key-value pairs will be changed apart from those specified in the call. Note that in the example call provided, title-specific data is used, as there may be a need to share this across titles (in sequels, for example). See also PlayFabAdminGetUserPublisherDataAsync, PlayFabAdminGetUserPublisherInternalDataAsync, PlayFabAdminGetUserPublisherReadOnlyDataAsync, PlayFabAdminUpdateUserPublisherDataAsync, PlayFabAdminUpdateUserPublisherReadOnlyDataAsync"
    },
    "PlayFabAdminUpdateUserPublisherReadOnlyDataAsync": {
        "summary": "TODO REVIEW: Updates the publisher-specific custom data for the user which can only be read by the client",
        "remarks": "This function performs an additive update of the arbitrary JSON object containing the custom data for the user. In updating the custom data object, keys which already exist in the object will have their values overwritten, keys with null values will be removed. No other key-value pairs will be changed apart from those specified in the call. Note that in the example call provided, title-specific data is used, as there may be a need to share this across titles (in sequels, for example). See also PlayFabAdminGetUserPublisherDataAsync, PlayFabAdminGetUserPublisherInternalDataAsync, PlayFabAdminGetUserPublisherReadOnlyDataAsync, PlayFabAdminUpdateUserPublisherDataAsync, PlayFabAdminUpdateUserPublisherInternalDataAsync"
    },
    "PlayFabAdminUpdateUserReadOnlyDataAsync": {
        "summary": "TODO REVIEW: Updates the title-specific custom data for the user which can only be read by the client",
        "remarks": "This function performs an additive update of the arbitrary JSON object containing the custom data for the user. In updating the custom data object, keys which already exist in the object will have their values overwritten, keys with null values will be removed. No other key-value pairs will be changed apart from those specified in the call. See also PlayFabAdminGetUserDataAsync, PlayFabAdminGetUserInternalDataAsync, PlayFabAdminGetUserReadOnlyDataAsync, PlayFabAdminUpdateUserDataAsync, PlayFabAdminUpdateUserInternalDataAsync"
    },
    "PlayFabAdminUpdateUserTitleDisplayNameAsync": {
        "summary": "TODO REVIEW: Updates the title specific display name for a user",
        "remarks": "In addition to the PlayFab username, titles can make use of a DisplayName which is also a unique identifier, but specific to the title. This allows for unique names which more closely match the theme or genre of a title, for example. This API enables changing that name, whether due to a customer request, an offensive name choice, etc."
    },
    "PlayFabClientAcceptTradeAsync": {
        "summary": "TODO REVIEW: Accepts an open trade (one that has not yet been accepted or cancelled), if the locally signed-in player is in the allowed player list for the trade, or it is open to all players. If the call is successful, the offered and accepted items will be swapped between the two players' inventories.",
        "remarks": "See also PlayFabClientCancelTradeAsync, PlayFabClientGetPlayerTradesAsync, PlayFabClientGetTradeStatusAsync, PlayFabClientOpenTradeAsync"
    },
    "PlayFabClientAddFriendAsync": {
        "summary": "TODO REVIEW: Adds the PlayFab user, based upon a match against a supplied unique identifier, to the friend list of the local user. At least one of FriendPlayFabId,FriendUsername,FriendEmail, or FriendTitleDisplayName should be initialized.",
        "remarks": "See also PlayFabClientGetFriendsListAsync, PlayFabClientSetFriendTagsAsync"
    },
    "PlayFabClientAddGenericIDAsync": {
        "summary": "TODO REVIEW: Adds the specified generic service identifier to the player's PlayFab account. This is designed to allow for a PlayFab ID lookup of any arbitrary service identifier a title wants to add. This identifier should never be used as authentication credentials, as the intent is that it is easily accessible by other players.",
        "remarks": "See also PlayFabClientGetPlayFabIDsFromGenericIDsAsync, PlayFabClientRemoveGenericIDAsync"
    },
    "PlayFabClientAddOrUpdateContactEmailAsync": {
        "summary": "TODO REVIEW: Adds or updates a contact email to the player's profile.",
        "remarks": "This API adds a contact email to the player's profile. If the player's profile already contains a contact email, it will update the contact email to the email address specified."
    },
    "PlayFabClientAddSharedGroupMembersAsync": {
        "summary": "TODO REVIEW: Adds users to the set of those able to update both the shared data, as well as the set of users in the group. Only users in the group can add new members. Shared Groups are designed for sharing data between a very small number of players, please see our guide: https://docs.microsoft.com/gaming/playfab/features/social/groups/using-shared-group-data"
    },
    "PlayFabClientAddUsernamePasswordAsync": {
        "summary": "TODO REVIEW: Adds playfab username/password auth to an existing account created via an anonymous auth method, e.g. automatic device ID login.",
        "remarks": "See also PlayFabClientLoginWithEmailAddressAsync, PlayFabClientLoginWithPlayFabAsync"
    },
    "PlayFabClientAddUserVirtualCurrencyAsync": {
        "summary": "TODO REVIEW: Increments the user's balance of the specified virtual currency by the stated amount",
        "remarks": "This API must be enabled for use as an option in the game manager website. It is disabled by default. See also PlayFabClientSubtractUserVirtualCurrencyAsync"
    },
    "PlayFabClientAndroidDevicePushNotificationRegistrationAsync": {
        "summary": "TODO REVIEW: Registers the Android device to receive push notifications",
        "remarks": "More information can be found on configuring your game for the Google Cloud Messaging service in the Google developer documentation, here: http://developer.android.com/google/gcm/client.html. The steps to configure and send Push Notifications is described in the PlayFab tutorials, here: https://docs.microsoft.com/gaming/playfab/features/engagement/push-notifications/quickstart."
    },
    "PlayFabClientAttributeInstallAsync": {
        "summary": "TODO REVIEW: Attributes an install for advertisment.",
        "remarks": "If you have an ad attribution partner enabled, this will post an install to their service to track the device. It uses the given device id to match based on clicks on ads."
    },
    "PlayFabClientCancelTradeAsync": {
        "summary": "TODO REVIEW: Cancels an open trade (one that has not yet been accepted or cancelled). Note that only the player who created the trade can cancel it via this API call, to prevent griefing of the trade system (cancelling trades in order to prevent other players from accepting them, for trades that can be claimed by more than one player).",
        "remarks": "See also PlayFabClientAcceptTradeAsync, PlayFabClientGetPlayerTradesAsync, PlayFabClientGetTradeStatusAsync, PlayFabClientOpenTradeAsync"
    },
    "PlayFabClientConfirmPurchaseAsync": {
        "summary": "TODO REVIEW: Confirms with the payment provider that the purchase was approved (if applicable) and adjusts inventory and virtual currency balances as appropriate",
        "remarks": "The final step in the purchasing process, this API finalizes the purchase with the payment provider, where applicable, adding virtual goods to the player inventory (including random drop table resolution and recursive addition of bundled items) and adjusting virtual currency balances for funds used or added. Note that this is a pull operation, and should be polled regularly when a purchase is in progress. Please note that the processing time for inventory grants and purchases increases fractionally the more items are in the inventory, and the more items are in the grant/purchase operation. See also PlayFabClientPayForPurchaseAsync, PlayFabClientStartPurchaseAsync"
    },
    "PlayFabClientConsumeItemAsync": {
        "summary": "TODO REVIEW: Consume uses of a consumable item. When all uses are consumed, it will be removed from the player's inventory."
    },
    "PlayFabClientConsumeMicrosoftStoreEntitlementsAsync": {
        "summary": "TODO REVIEW: Grants the player's current entitlements from Microsoft Store's Collection API"
    },
    "PlayFabClientConsumePS5EntitlementsAsync": {
        "summary": "TODO REVIEW: Checks for any new PS5 entitlements. If any are found, they are consumed (if they're consumables) and added as PlayFab items"
    },
    "PlayFabClientConsumePSNEntitlementsAsync": {
        "summary": "TODO REVIEW: Checks for any new consumable entitlements. If any are found, they are consumed and added as PlayFab items"
    },
    "PlayFabClientConsumeXboxEntitlementsAsync": {
        "summary": "TODO REVIEW: Grants the player's current entitlements from Xbox Live, consuming all availble items in Xbox and granting them to the player's PlayFab inventory. This call is idempotent and will not grant previously granted items to the player.",
        "remarks": "See also PlayFabClientLoginWithXboxAsync"
    },
    "PlayFabClientCreateSharedGroupAsync": {
        "summary": "TODO REVIEW: Requests the creation of a shared group object, containing key/value pairs which may be updated by all members of the group. Upon creation, the current user will be the only member of the group. Shared Groups are designed for sharing data between a very small number of players, please see our guide: https://docs.microsoft.com/gaming/playfab/features/social/groups/using-shared-group-data",
        "remarks": "If SharedGroupId is specified, the service will attempt to create a group with that identifier, and will return an error if it is already in use. If no SharedGroupId is specified, a random identifier will be assigned."
    },
    "PlayFabClientExecuteCloudScriptAsync": {
        "summary": "TODO REVIEW: Executes a CloudScript function, with the 'currentPlayerId' set to the PlayFab ID of the authenticated player."
    },
    "PlayFabClientGetAccountInfoAsync": {
        "summary": "TODO REVIEW: Retrieves the user's PlayFab account details"
    },
    "PlayFabClientGetAdPlacementsAsync": {
        "summary": "TODO REVIEW: Returns a list of ad placements and a reward for each",
        "remarks": "Returns a list of ad placements for the calling player. Each ad placement may include a reward if there was at least one valid reward for the player as well as the number of plays remaining and when the play count resets."
    },
    "PlayFabClientGetAllUsersCharactersAsync": {
        "summary": "TODO REVIEW: Lists all of the characters that belong to a specific user. CharacterIds are not globally unique; characterId must be evaluated with the parent PlayFabId to guarantee uniqueness.",
        "remarks": "Returns a list of every character that currently belongs to a user. See also PlayFabClientGetCharacterDataAsync"
    },
    "PlayFabClientGetCatalogItemsAsync": {
        "summary": "TODO REVIEW: Retrieves the specified version of the title's catalog of virtual goods, including all defined properties",
        "remarks": "See also PlayFabClientGetStoreItemsAsync, PlayFabClientGetUserInventoryAsync"
    },
    "PlayFabClientGetCharacterDataAsync": {
        "summary": "TODO REVIEW: Retrieves the title-specific custom data for the character which is readable and writable by the client",
        "remarks": "Data is stored as JSON key-value pairs. If the Keys parameter is provided, the data object returned will only contain the data specific to the indicated Keys. Otherwise, the full set of custom character data will be returned. See also PlayFabClientGetCharacterReadOnlyDataAsync, PlayFabClientGetUserDataAsync, PlayFabClientUpdateCharacterDataAsync"
    },
    "PlayFabClientGetCharacterInventoryAsync": {
        "summary": "TODO REVIEW: Retrieves the specified character's current inventory of virtual goods",
        "remarks": "All items currently in the character inventory will be returned, irrespective of how they were acquired (via purchasing, grants, coupons, etc.). Items that are expired, fully consumed, or are no longer valid are not considered to be in the user's current inventory, and so will not be not included. Also returns their virtual currency balances. See also PlayFabClientGetUserInventoryAsync"
    },
    "PlayFabClientGetCharacterLeaderboardAsync": {
        "summary": "TODO REVIEW: Retrieves a list of ranked characters for the given statistic, starting from the indicated point in the leaderboard",
        "remarks": "See also PlayFabClientGetCharacterStatisticsAsync, PlayFabClientGetLeaderboardAroundCharacterAsync, PlayFabClientUpdateCharacterStatisticsAsync"
    },
    "PlayFabClientGetCharacterReadOnlyDataAsync": {
        "summary": "TODO REVIEW: Retrieves the title-specific custom data for the character which can only be read by the client",
        "remarks": "Data is stored as JSON key-value pairs. If the Keys parameter is provided, the data object returned will only contain the data specific to the indicated Keys. Otherwise, the full set of custom character data will be returned. See also PlayFabClientGetCharacterDataAsync, PlayFabClientGetUserDataAsync, PlayFabClientUpdateCharacterDataAsync"
    },
    "PlayFabClientGetCharacterStatisticsAsync": {
        "summary": "TODO REVIEW: Retrieves the details of all title-specific statistics for the user",
        "remarks": "See also PlayFabClientGetCharacterLeaderboardAsync, PlayFabClientGetLeaderboardAroundCharacterAsync, PlayFabClientGetLeaderboardForUserCharactersAsync, PlayFabClientUpdateCharacterStatisticsAsync"
    },
    "PlayFabClientGetContentDownloadUrlAsync": {
        "summary": "TODO REVIEW: This API retrieves a pre-signed URL for accessing a content file for the title. A subsequent HTTP GET to the returned URL will attempt to download the content. A HEAD query to the returned URL will attempt to retrieve the metadata of the content. Note that a successful result does not guarantee the existence of this content - if it has not been uploaded, the query to retrieve the data will fail. See this post for more information: https://community.playfab.com/hc/community/posts/205469488-How-to-upload-files-to-PlayFab-s-Content-Service. Also, please be aware that the Content service is specifically PlayFab's CDN offering, for which standard CDN rates apply.",
        "remarks": "See also PlayFabAdminDeleteContentAsync, PlayFabServerGetContentDownloadUrlAsync, PlayFabAdminGetContentListAsync, PlayFabAdminGetContentUploadUrlAsync"
    },
    "PlayFabClientGetCurrentGamesAsync": {
        "summary": "TODO REVIEW: Get details about all current running game servers matching the given parameters.",
        "remarks": "See also PlayFabAdminAddServerBuildAsync, PlayFabClientGetGameServerRegionsAsync, PlayFabClientMatchmakeAsync, PlayFabAdminRemoveServerBuildAsync, PlayFabClientStartGameAsync"
    },
    "PlayFabClientGetFriendLeaderboardAsync": {
        "summary": "TODO REVIEW: Retrieves a list of ranked friends of the current player for the given statistic, starting from the indicated point in the leaderboard",
        "remarks": "See also PlayFabClientGetFriendLeaderboardAroundPlayerAsync, PlayFabClientGetLeaderboardAsync, PlayFabClientGetLeaderboardAroundPlayerAsync, PlayFabClientGetUserStatisticsAsync"
    },
    "PlayFabClientGetFriendLeaderboardAroundPlayerAsync": {
        "summary": "TODO REVIEW: Retrieves a list of ranked friends of the current player for the given statistic, centered on the requested PlayFab user. If PlayFabId is empty or null will return currently logged in user.",
        "remarks": "See also PlayFabClientGetFriendLeaderboardAsync, PlayFabClientGetLeaderboardAsync, PlayFabClientGetLeaderboardAroundPlayerAsync, PlayFabClientGetUserStatisticsAsync"
    },
    "PlayFabClientGetFriendsListAsync": {
        "summary": "TODO REVIEW: Retrieves the current friend list for the local user, constrained to users who have PlayFab accounts. Friends from linked accounts (Facebook, Steam) are also included. You may optionally exclude some linked services' friends.",
        "remarks": "See also PlayFabClientAddFriendAsync, PlayFabClientGetPlayerProfileAsync, PlayFabClientRemoveFriendAsync"
    },
    "PlayFabClientGetGameServerRegionsAsync": {
        "summary": "TODO REVIEW:  Get details about the regions hosting game servers matching the given parameters.",
        "remarks": "See also PlayFabAdminAddServerBuildAsync, PlayFabClientGetCurrentGamesAsync, PlayFabClientMatchmakeAsync, PlayFabAdminRemoveServerBuildAsync, PlayFabClientStartGameAsync"
    },
    "PlayFabClientGetLeaderboardAsync": {
        "summary": "TODO REVIEW: Retrieves a list of ranked users for the given statistic, starting from the indicated point in the leaderboard",
        "remarks": "See also PlayFabClientGetFriendLeaderboardAsync, PlayFabClientGetLeaderboardAroundPlayerAsync, PlayFabClientGetUserStatisticsAsync"
    },
    "PlayFabClientGetLeaderboardAroundCharacterAsync": {
        "summary": "TODO REVIEW: Retrieves a list of ranked characters for the given statistic, centered on the requested Character ID",
        "remarks": "See also PlayFabClientGetCharacterLeaderboardAsync, PlayFabClientGetLeaderboardAsync, PlayFabClientUpdateCharacterStatisticsAsync"
    },
    "PlayFabClientGetLeaderboardAroundPlayerAsync": {
        "summary": "TODO REVIEW: Retrieves a list of ranked users for the given statistic, centered on the requested player. If PlayFabId is empty or null will return currently logged in user.",
        "remarks": "See also PlayFabClientGetFriendLeaderboardAsync, PlayFabClientGetLeaderboardAsync, PlayFabClientGetUserStatisticsAsync"
    },
    "PlayFabClientGetLeaderboardForUserCharactersAsync": {
        "summary": "TODO REVIEW: Retrieves a list of all of the user's characters for the given statistic.",
        "remarks": "See also PlayFabClientGetCharacterLeaderboardAsync, PlayFabClientGetLeaderboardAsync, PlayFabServerGetLeaderboardAroundUserAsync"
    },
    "PlayFabClientGetPaymentTokenAsync": {
        "summary": "TODO REVIEW: For payments flows where the provider requires playfab (the fulfiller) to initiate the transaction, but the client completes the rest of the flow. In the Xsolla case, the token returned here will be passed to Xsolla by the client to create a cart. Poll GetPurchase using the returned OrderId once you've completed the payment.",
        "remarks": "See also PlayFabClientGetPurchaseAsync"
    },
    "PlayFabClientGetPhotonAuthenticationTokenAsync": {
        "summary": "TODO REVIEW: Gets a Photon custom authentication token that can be used to securely join the player into a Photon room. See https://docs.microsoft.com/gaming/playfab/features/multiplayer/photon/quickstart for more details."
    },
    "PlayFabClientGetPlayerCombinedInfoAsync": {
        "summary": "TODO REVIEW: Retrieves all of the user's different kinds of info."
    },
    "PlayFabClientGetPlayerProfileAsync": {
        "summary": "TODO REVIEW: Retrieves the player's profile",
        "remarks": "This API allows for access to details regarding a user in the PlayFab service, usually for purposes of customer support. Note that data returned may be Personally Identifying Information (PII), such as email address, and so care should be taken in how this data is stored and managed. Since this call will always return the relevant information for users who have accessed the title, the recommendation is to not store this data locally."
    },
    "PlayFabClientGetPlayerSegmentsAsync": {
        "summary": "TODO REVIEW: List all segments that a player currently belongs to at this moment in time."
    },
    "PlayFabClientGetPlayerStatisticsAsync": {
        "summary": "TODO REVIEW: Retrieves the indicated statistics (current version and values for all statistics, if none are specified), for the local player.",
        "remarks": "See also PlayFabAdminCreatePlayerStatisticDefinitionAsync, PlayFabClientGetPlayerStatisticVersionsAsync, PlayFabAdminUpdatePlayerStatisticDefinitionAsync, PlayFabClientUpdatePlayerStatisticsAsync"
    },
    "PlayFabClientGetPlayerStatisticVersionsAsync": {
        "summary": "TODO REVIEW: Retrieves the information on the available versions of the specified statistic.",
        "remarks": "See also PlayFabAdminCreatePlayerStatisticDefinitionAsync, PlayFabClientGetPlayerStatisticsAsync, PlayFabAdminUpdatePlayerStatisticDefinitionAsync, PlayFabClientUpdatePlayerStatisticsAsync"
    },
    "PlayFabClientGetPlayerTagsAsync": {
        "summary": "TODO REVIEW: Get all tags with a given Namespace (optional) from a player profile.",
        "remarks": "This API will return a list of canonical tags which includes both namespace and tag's name. If namespace is not provided, the result is a list of all canonical tags. TagName can be used for segmentation and Namespace is limited to 128 characters."
    },
    "PlayFabClientGetPlayerTradesAsync": {
        "summary": "TODO REVIEW: Gets all trades the player has either opened or accepted, optionally filtered by trade status.",
        "remarks": "See also PlayFabClientAcceptTradeAsync, PlayFabClientCancelTradeAsync, PlayFabClientGetTradeStatusAsync, PlayFabClientOpenTradeAsync"
    },
    "PlayFabClientGetPlayFabIDsFromFacebookIDsAsync": {
        "summary": "TODO REVIEW: Retrieves the unique PlayFab identifiers for the given set of Facebook identifiers."
    },
    "PlayFabClientGetPlayFabIDsFromFacebookInstantGamesIdsAsync": {
        "summary": "TODO REVIEW: Retrieves the unique PlayFab identifiers for the given set of Facebook Instant Game identifiers."
    },
    "PlayFabClientGetPlayFabIDsFromGameCenterIDsAsync": {
        "summary": "TODO REVIEW: Retrieves the unique PlayFab identifiers for the given set of Game Center identifiers (referenced in the Game Center Programming Guide as the Player Identifier)."
    },
    "PlayFabClientGetPlayFabIDsFromGenericIDsAsync": {
        "summary": "TODO REVIEW: Retrieves the unique PlayFab identifiers for the given set of generic service identifiers. A generic identifier is the service name plus the service-specific ID for the player, as specified by the title when the generic identifier was added to the player account.",
        "remarks": "See also PlayFabClientAddGenericIDAsync, PlayFabClientRemoveGenericIDAsync"
    },
    "PlayFabClientGetPlayFabIDsFromGoogleIDsAsync": {
        "summary": "TODO REVIEW: Retrieves the unique PlayFab identifiers for the given set of Google identifiers. The Google identifiers are the IDs for the user accounts, available as 'id' in the Google+ People API calls."
    },
    "PlayFabClientGetPlayFabIDsFromKongregateIDsAsync": {
        "summary": "TODO REVIEW: Retrieves the unique PlayFab identifiers for the given set of Kongregate identifiers. The Kongregate identifiers are the IDs for the user accounts, available as 'user_id' from the Kongregate API methods(ex: http://developers.kongregate.com/docs/client/getUserId)."
    },
    "PlayFabClientGetPlayFabIDsFromNintendoSwitchDeviceIdsAsync": {
        "summary": "TODO REVIEW: Retrieves the unique PlayFab identifiers for the given set of Nintendo Switch identifiers."
    },
    "PlayFabClientGetPlayFabIDsFromPSNAccountIDsAsync": {
        "summary": "TODO REVIEW: Retrieves the unique PlayFab identifiers for the given set of PlayStation Network identifiers."
    },
    "PlayFabClientGetPlayFabIDsFromSteamIDsAsync": {
        "summary": "TODO REVIEW: Retrieves the unique PlayFab identifiers for the given set of Steam identifiers. The Steam identifiers are the profile IDs for the user accounts, available as SteamId in the Steamworks Community API calls."
    },
    "PlayFabClientGetPlayFabIDsFromTwitchIDsAsync": {
        "summary": "TODO REVIEW: Retrieves the unique PlayFab identifiers for the given set of Twitch identifiers. The Twitch identifiers are the IDs for the user accounts, available as '_id' from the Twitch API methods (ex: https://github.com/justintv/Twitch-API/blob/master/v3_resources/users.md#get-usersuser)."
    },
    "PlayFabClientGetPlayFabIDsFromXboxLiveIDsAsync": {
        "summary": "TODO REVIEW: Retrieves the unique PlayFab identifiers for the given set of XboxLive identifiers."
    },
    "PlayFabClientGetPublisherDataAsync": {
        "summary": "TODO REVIEW: Retrieves the key-value store of custom publisher settings",
        "remarks": "This API is designed to return publisher-specific values which can be read, but not written to, by the client. This data is shared across all titles assigned to a particular publisher, and can be used for cross-game coordination. Only titles assigned to a publisher can use this API. For more information email helloplayfab@microsoft.com. Note that there may up to a minute delay in between updating title data and this API call returning the newest value."
    },
    "PlayFabClientGetPurchaseAsync": {
        "summary": "TODO REVIEW: Retrieves a purchase along with its current PlayFab status. Returns inventory items from the purchase that are still active.",
        "remarks": "See also PlayFabClientStartPurchaseAsync"
    },
    "PlayFabClientGetSharedGroupDataAsync": {
        "summary": "TODO REVIEW: Retrieves data stored in a shared group object, as well as the list of members in the group. Non-members of the group may use this to retrieve group data, including membership, but they will not receive data for keys marked as private. Shared Groups are designed for sharing data between a very small number of players, please see our guide: https://docs.microsoft.com/gaming/playfab/features/social/groups/using-shared-group-data"
    },
    "PlayFabClientGetStoreItemsAsync": {
        "summary": "TODO REVIEW: Retrieves the set of items defined for the specified store, including all prices defined",
        "remarks": "A store contains an array of references to items defined in one or more catalog versions of the game, along with the prices for the item, in both real world and virtual currencies. These prices act as an override to any prices defined in the catalog. In this way, the base definitions of the items may be defined in the catalog, with all associated properties, while the pricing can be set for each store, as needed. This allows for subsets of goods to be defined for different purposes (in order to simplify showing some, but not all catalog items to users, based upon different characteristics), along with unique prices. Note that all prices defined in the catalog and store definitions for the item are considered valid, and that a compromised client can be made to send a request for an item based upon any of these definitions. If no price is specified in the store for an item, the price set in the catalog should be displayed to the user. See also PlayFabClientGetCatalogItemsAsync"
    },
    "PlayFabClientGetTimeAsync": {
        "summary": "TODO REVIEW: Retrieves the current server time",
        "remarks": "This query retrieves the current time from one of the servers in PlayFab. Please note that due to clock drift between servers, there is a potential variance of up to 5 seconds."
    },
    "PlayFabClientGetTitleDataAsync": {
        "summary": "TODO REVIEW: Retrieves the key-value store of custom title settings",
        "remarks": "This API is designed to return title specific values which can be read, but not written to, by the client. For example, a developer could choose to store values which modify the user experience, such as enemy spawn rates, weapon strengths, movement speeds, etc. This allows a developer to update the title without the need to create, test, and ship a new build. If the player belongs to an experiment variant that uses title data overrides, the overrides are applied automatically and returned with the title data. Note that there may up to a minute delay in between updating title data and this API call returning the newest value."
    },
    "PlayFabClientGetTitleNewsAsync": {
        "summary": "TODO REVIEW: Retrieves the title news feed, as configured in the developer portal"
    },
    "PlayFabClientGetTitlePublicKeyAsync": {
        "summary": "TODO REVIEW: Returns the title's base 64 encoded RSA CSP blob.",
        "remarks": "An RSA CSP blob to be used to encrypt the payload of account creation requests when that API requires a signature header. For example if Client/LoginWithCustomId requires signature headers but the player does not have an account yet follow these steps: 1) Call Client/GetTitlePublicKey with one of the title's shared secrets. 2) Convert the Base64 encoded CSP blob to a byte array and create an RSA signing object. 3) Encrypt the UTF8 encoded JSON body of the registration request and place the Base64 encoded result into the EncryptedRequest and with the TitleId field, all other fields can be left empty when performing the API request. 4) Client receives authentication token as normal. Future requests to LoginWithCustomId will require the X-PlayFab-Signature header."
    },
    "PlayFabClientGetTradeStatusAsync": {
        "summary": "TODO REVIEW: Gets the current status of an existing trade.",
        "remarks": "See also PlayFabClientAcceptTradeAsync, PlayFabClientCancelTradeAsync, PlayFabClientGetPlayerTradesAsync, PlayFabClientOpenTradeAsync"
    },
    "PlayFabClientGetUserDataAsync": {
        "summary": "TODO REVIEW: Retrieves the title-specific custom data for the user which is readable and writable by the client",
        "remarks": "Data is stored as JSON key-value pairs. Every time the data is updated via any source, the version counter is incremented. If the Version parameter is provided, then this call will only return data if the current version on the system is greater than the value provided. If the Keys parameter is provided, the data object returned will only contain the data specific to the indicated Keys. Otherwise, the full set of custom user data will be returned. See also PlayFabClientGetUserReadOnlyDataAsync, PlayFabClientUpdateUserDataAsync"
    },
    "PlayFabClientGetUserInventoryAsync": {
        "summary": "TODO REVIEW: Retrieves the user's current inventory of virtual goods",
        "remarks": "See also PlayFabClientGetCatalogItemsAsync"
    },
    "PlayFabClientGetUserPublisherDataAsync": {
        "summary": "TODO REVIEW: Retrieves the publisher-specific custom data for the user which is readable and writable by the client",
        "remarks": "Data is stored as JSON key-value pairs. If the Keys parameter is provided, the data object returned will only contain the data specific to the indicated Keys. Otherwise, the full set of custom user data will be returned. See also PlayFabClientGetUserPublisherReadOnlyDataAsync, PlayFabClientUpdateUserPublisherDataAsync"
    },
    "PlayFabClientGetUserPublisherReadOnlyDataAsync": {
        "summary": "TODO REVIEW: Retrieves the publisher-specific custom data for the user which can only be read by the client",
        "remarks": "Data is stored as JSON key-value pairs. If the Keys parameter is provided, the data object returned will only contain the data specific to the indicated Keys. Otherwise, the full set of custom user data will be returned. See also PlayFabClientGetUserPublisherDataAsync, PlayFabClientUpdateUserPublisherDataAsync"
    },
    "PlayFabClientGetUserReadOnlyDataAsync": {
        "summary": "TODO REVIEW: Retrieves the title-specific custom data for the user which can only be read by the client",
        "remarks": "Data is stored as JSON key-value pairs. Every time the data is updated via any source, the version counter is incremented. If the Version parameter is provided, then this call will only return data if the current version on the system is greater than the value provided. If the Keys parameter is provided, the data object returned will only contain the data specific to the indicated Keys. Otherwise, the full set of custom user data will be returned. See also PlayFabClientGetUserDataAsync, PlayFabClientUpdateUserDataAsync"
    },
    "PlayFabClientGrantCharacterToUserAsync": {
        "summary": "TODO REVIEW: Grants the specified character type to the user. CharacterIds are not globally unique; characterId must be evaluated with the parent PlayFabId to guarantee uniqueness.",
        "remarks": "Grants a character to the user of the type specified by the item ID. The user must already have an instance of this item in their inventory in order to allow character creation. This item can come from a purchase or grant, which must be done before calling to create the character."
    },
    "PlayFabClientLinkAndroidDeviceIDAsync": {
        "summary": "TODO REVIEW: Links the Android device identifier to the user's PlayFab account",
        "remarks": "See also PlayFabClientLoginWithAndroidDeviceIDAsync, PlayFabClientUnlinkAndroidDeviceIDAsync"
    },
    "PlayFabClientLinkAppleAsync": {
        "summary": "TODO REVIEW: Links the Apple account associated with the token to the user's PlayFab account.",
        "remarks": "See also PlayFabClientLoginWithAppleAsync, PlayFabClientUnlinkAppleAsync"
    },
    "PlayFabClientLinkCustomIDAsync": {
        "summary": "TODO REVIEW: Links the custom identifier, generated by the title, to the user's PlayFab account",
        "remarks": "See also PlayFabClientLoginWithCustomIDAsync, PlayFabClientUnlinkCustomIDAsync"
    },
    "PlayFabClientLinkFacebookAccountAsync": {
        "summary": "TODO REVIEW: Links the Facebook account associated with the provided Facebook access token to the user's PlayFab account",
        "remarks": "Facebook sign-in is accomplished using the Facebook User Access Token. More information on the Token can be found in the Facebook developer documentation (https://developers.facebook.com/docs/facebook-login/access-tokens/). In Unity, for example, the Token is available as AccessToken in the Facebook SDK ScriptableObject FB. Note that titles should never re-use the same Facebook applications between PlayFab Title IDs, as Facebook provides unique user IDs per application and doing so can result in issues with the Facebook ID for the user in their PlayFab account information. If you must re-use an application in a new PlayFab Title ID, please be sure to first unlink all accounts from Facebook, or delete all users in the first Title ID. See also PlayFabClientLoginWithFacebookAsync, PlayFabClientUnlinkFacebookAccountAsync"
    },
    "PlayFabClientLinkFacebookInstantGamesIdAsync": {
        "summary": "TODO REVIEW: Links the Facebook Instant Games Id to the user's PlayFab account",
        "remarks": "See also PlayFabClientLoginWithFacebookInstantGamesIdAsync, PlayFabClientUnlinkFacebookInstantGamesIdAsync"
    },
    "PlayFabClientLinkGameCenterAccountAsync": {
        "summary": "TODO REVIEW: Links the Game Center account associated with the provided Game Center ID to the user's PlayFab account. Logging in with a Game Center ID is insecure if you do not include the optional PublicKeyUrl, Salt, Signature, and Timestamp parameters in this request. It is recommended you require these parameters on all Game Center calls by going to the Apple Add-ons page in the PlayFab Game Manager and enabling the 'Require secure authentication only for this app' option.",
        "remarks": "See also PlayFabClientUnlinkGameCenterAccountAsync"
    },
    "PlayFabClientLinkGoogleAccountAsync": {
        "summary": "TODO REVIEW: Links the currently signed-in user account to their Google account, using their Google account credentials",
        "remarks": "Google sign-in is accomplished by obtaining a Google OAuth 2.0 credential using the Google sign-in for Android APIs on the device and passing it to this API. See also PlayFabClientLoginWithGoogleAccountAsync, PlayFabClientUnlinkGoogleAccountAsync"
    },
    "PlayFabClientLinkIOSDeviceIDAsync": {
        "summary": "TODO REVIEW: Links the vendor-specific iOS device identifier to the user's PlayFab account",
        "remarks": "See also PlayFabClientLoginWithIOSDeviceIDAsync, PlayFabClientUnlinkIOSDeviceIDAsync"
    },
    "PlayFabClientLinkKongregateAsync": {
        "summary": "TODO REVIEW: Links the Kongregate identifier to the user's PlayFab account",
        "remarks": "See also PlayFabClientLoginWithKongregateAsync, PlayFabClientUnlinkKongregateAsync"
    },
    "PlayFabClientLinkNintendoServiceAccountAsync": {
        "summary": "TODO REVIEW: Links the Nintendo account associated with the token to the user's PlayFab account.",
        "remarks": "See also PlayFabClientLoginWithNintendoServiceAccountAsync, PlayFabClientUnlinkNintendoServiceAccountAsync"
    },
    "PlayFabClientLinkNintendoSwitchDeviceIdAsync": {
        "summary": "TODO REVIEW: Links the NintendoSwitchDeviceId to the user's PlayFab account",
        "remarks": "See also PlayFabClientLoginWithNintendoSwitchDeviceIdAsync, PlayFabClientUnlinkNintendoSwitchDeviceIdAsync"
    },
    "PlayFabClientLinkOpenIdConnectAsync": {
        "summary": "TODO REVIEW: Links an OpenID Connect account to a user's PlayFab account, based on an existing relationship between a title and an Open ID Connect provider and the OpenId Connect JWT from that provider.",
        "remarks": "See also PlayFabClientLoginWithOpenIdConnectAsync, PlayFabClientUnlinkOpenIdConnectAsync"
    },
    "PlayFabClientLinkPSNAccountAsync": {
        "summary": "TODO REVIEW: Links the PlayStation Network account associated with the provided access code to the user's PlayFab account",
        "remarks": "See also PlayFabClientLoginWithPSNAsync, PlayFabClientUnlinkPSNAccountAsync"
    },
    "PlayFabClientLinkSteamAccountAsync": {
        "summary": "TODO REVIEW: Links the Steam account associated with the provided Steam authentication ticket to the user's PlayFab account",
        "remarks": "Steam authentication is accomplished with the Steam Session Ticket. More information on the Ticket can be found in the Steamworks SDK, here: https://partner.steamgames.com/documentation/auth (requires sign-in). NOTE: For Steam authentication to work, the title must be configured with the Steam Application ID and Publisher Key in the PlayFab Game Manager (under Properties). Information on creating a Publisher Key (referred to as the Secret Key in PlayFab) for your title can be found here: https://partner.steamgames.com/documentation/webapi#publisherkey. See also PlayFabClientLoginWithSteamAsync, PlayFabClientUnlinkSteamAccountAsync"
    },
    "PlayFabClientLinkTwitchAsync": {
        "summary": "TODO REVIEW: Links the Twitch account associated with the token to the user's PlayFab account.",
        "remarks": "See also PlayFabClientLoginWithTwitchAsync, PlayFabClientUnlinkTwitchAsync"
    },
    "PlayFabClientLinkXboxAccountAsync": {
        "summary": "TODO REVIEW: Links the Xbox Live account associated with the provided access code to the user's PlayFab account",
        "remarks": "See also PlayFabClientLoginWithXboxAsync, PlayFabClientUnlinkXboxAccountAsync"
    },
    "PlayFabClientMatchmakeAsync": {
        "summary": "TODO REVIEW: Attempts to locate a game session matching the given parameters. If the goal is to match the player into a specific active session, only the LobbyId is required. Otherwise, the BuildVersion, GameMode, and Region are all required parameters. Note that parameters specified in the search are required (they are not weighting factors). If a slot is found in a server instance matching the parameters, the slot will be assigned to that player, removing it from the availabe set. In that case, the information on the game session will be returned, otherwise the Status returned will be GameNotFound.",
        "remarks": "See also PlayFabAdminAddServerBuildAsync, PlayFabClientGetCurrentGamesAsync, PlayFabClientGetGameServerRegionsAsync, PlayFabAdminRemoveServerBuildAsync, PlayFabClientStartGameAsync"
    },
    "PlayFabClientOpenTradeAsync": {
        "summary": "TODO REVIEW: Opens a new outstanding trade. Note that a given item instance may only be in one open trade at a time.",
        "remarks": "See also PlayFabClientAcceptTradeAsync, PlayFabClientCancelTradeAsync, PlayFabClientGetPlayerTradesAsync, PlayFabClientGetTradeStatusAsync"
    },
    "PlayFabClientPayForPurchaseAsync": {
        "summary": "TODO REVIEW: Selects a payment option for purchase order created via StartPurchase",
        "remarks": "This is the second step in the purchasing process, initiating the purchase transaction with the payment provider (if applicable). For payment provider scenarios, the title should next present the user with the payment provider'sinterface for payment. Once the player has completed the payment with the provider, the title should call ConfirmPurchase tofinalize the process and add the appropriate items to the player inventory. See also PlayFabClientConfirmPurchaseAsync, PlayFabClientStartPurchaseAsync"
    },
    "PlayFabClientPurchaseItemAsync": {
        "summary": "TODO REVIEW: Buys a single item with virtual currency. You must specify both the virtual currency to use to purchase, as well as what the client believes the price to be. This lets the server fail the purchase if the price has changed.",
        "remarks": "Please note that the processing time for inventory grants and purchases increases fractionally the more items are in the inventory, and the more items are in the grant/purchase operation (with each item in a bundle being a distinct add). See also PlayFabClientStartPurchaseAsync"
    },
    "PlayFabClientRedeemCouponAsync": {
        "summary": "TODO REVIEW: Adds the virtual goods associated with the coupon to the user's inventory. Coupons can be generated via the Economy->Catalogs tab in the PlayFab Game Manager.",
        "remarks": "Coupon codes can be created for any item, or set of items, in the catalog for the title. This operation causes the coupon to be consumed, and the specific items to be awarded to the user. Attempting to re-use an already consumed code, or a code which has not yet been created in the service, will result in an error."
    },
    "PlayFabClientRefreshPSNAuthTokenAsync": {
        "summary": "TODO REVIEW: Uses the supplied OAuth code to refresh the internally cached player PSN auth token"
    },
    "PlayFabClientRegisterForIOSPushNotificationAsync": {
        "summary": "TODO REVIEW: Registers the iOS device to receive push notifications",
        "remarks": "The steps to configure and send Push Notifications is described in the PlayFab tutorials, here: https://docs.microsoft.com/gaming/playfab/features/engagement/push-notifications/quickstart"
    },
    "PlayFabClientRemoveContactEmailAsync": {
        "summary": "TODO REVIEW: Removes a contact email from the player's profile.",
        "remarks": "This API removes an existing contact email from the player's profile."
    },
    "PlayFabClientRemoveFriendAsync": {
        "summary": "TODO REVIEW: Removes a specified user from the friend list of the local user",
        "remarks": "See also PlayFabClientAddFriendAsync, PlayFabClientSetFriendTagsAsync"
    },
    "PlayFabClientRemoveGenericIDAsync": {
        "summary": "TODO REVIEW: Removes the specified generic service identifier from the player's PlayFab account.",
        "remarks": "See also PlayFabClientAddGenericIDAsync, PlayFabClientGetPlayFabIDsFromGenericIDsAsync"
    },
    "PlayFabClientRemoveSharedGroupMembersAsync": {
        "summary": "TODO REVIEW: Removes users from the set of those able to update the shared data and the set of users in the group. Only users in the group can remove members. If as a result of the call, zero users remain with access, the group and its associated data will be deleted. Shared Groups are designed for sharing data between a very small number of players, please see our guide: https://docs.microsoft.com/gaming/playfab/features/social/groups/using-shared-group-data"
    },
    "PlayFabClientReportAdActivityAsync": {
        "summary": "TODO REVIEW: Report player's ad activity",
        "remarks": "Given a Placement ID and a Reward ID from the GetAdPlacements API call records a player's ad activity."
    },
    "PlayFabClientReportDeviceInfoAsync": {
        "summary": "TODO REVIEW: Write a PlayStream event to describe the provided player device information. This API method is not designed to be called directly by developers. Each PlayFab client SDK will eventually report this information automatically.",
        "remarks": "Any arbitrary information collected by the device"
    },
    "PlayFabClientReportPlayerAsync": {
        "summary": "TODO REVIEW: Submit a report for another player (due to bad bahavior, etc.), so that customer service representatives for the title can take action concerning potentially toxic players."
    },
    "PlayFabClientRestoreIOSPurchasesAsync": {
        "summary": "TODO REVIEW: Restores all in-app purchases based on the given restore receipt",
        "remarks": "The title should obtain a refresh receipt via restoreCompletedTransactions in the SKPaymentQueue of the Apple StoreKit and pass that in to this call. The resultant receipt contains new receipt instances for all non-consumable goods previously purchased by the user. This API call iterates through every purchase in the receipt and restores the items if they still exist in the catalog and can be validated."
    },
    "PlayFabClientRewardAdActivityAsync": {
        "summary": "TODO REVIEW: Reward player's ad activity",
        "remarks": "Given a Placement ID and a Reward ID from the GetAdPlacements API call will grant the reward to the player. This API call does not require that ReportAdActivity is called. The grant is performed in real-time, at the end of the call all items will have been granted."
    },
    "PlayFabClientSendAccountRecoveryEmailAsync": {
        "summary": "TODO REVIEW: Forces an email to be sent to the registered email address for the user's account, with a link allowing the user to change the password.If an account recovery email template ID is provided, an email using the custom email template will be used.",
        "remarks": "If the account in question is a 'temporary' account (for example, one that was created via a call to LoginFromIOSDeviceID), thisfunction will have no effect. Only PlayFab accounts which have valid email addresses will be able to receive a password reset email using this API."
    },
    "PlayFabClientSetFriendTagsAsync": {
        "summary": "TODO REVIEW: Updates the tag list for a specified user in the friend list of the local user",
        "remarks": "This operation is not additive. It will completely replace the tag list for the specified user. Please note that only users in the PlayFab friends list can be assigned tags. Attempting to set a tag on a friend only included in the friends list from a social site integration (such as Facebook or Steam) will return the AccountNotFound error. See also PlayFabClientAddFriendAsync, PlayFabClientRemoveFriendAsync"
    },
    "PlayFabClientSetPlayerSecretAsync": {
        "summary": "TODO REVIEW: Sets the player's secret if it is not already set. Player secrets are used to sign API requests. To reset a player's secret use the Admin or Server API method SetPlayerSecret.",
        "remarks": "APIs that require signatures require that the player have a configured Player Secret Key that is used to sign all requests. Players that don't have a secret will be blocked from making API calls until it is configured. To create a signature header add a SHA256 hashed string containing UTF8 encoded JSON body as it will be sent to the server, the current time in UTC formatted to ISO 8601, and the players secret formatted as 'body.date.secret'. Place the resulting hash into the header X-PlayFab-Signature, along with a header X-PlayFab-Timestamp of the same UTC timestamp used in the signature."
    },
    "PlayFabClientStartGameAsync": {
        "summary": "TODO REVIEW: Start a new game server with a given configuration, add the current player and return the connection information.",
        "remarks": "This API must be enabled for use as an option in the game manager website. It is disabled by default. See also PlayFabAdminAddServerBuildAsync, PlayFabClientGetCurrentGamesAsync, PlayFabClientGetGameServerRegionsAsync, PlayFabClientMatchmakeAsync, PlayFabAdminRemoveServerBuildAsync"
    },
    "PlayFabClientStartPurchaseAsync": {
        "summary": "TODO REVIEW: Creates an order for a list of items from the title catalog",
        "remarks": "This is the first step in the purchasing process. For security purposes, once the order (or 'cart') has been created, additional inventory objects may no longer be added. In addition, inventory objects will be locked to the current prices, regardless of any subsequent changes at the catalog level which may occur during the next two steps. See also PlayFabClientConfirmPurchaseAsync, PlayFabClientPayForPurchaseAsync"
    },
    "PlayFabClientSubtractUserVirtualCurrencyAsync": {
        "summary": "TODO REVIEW: Decrements the user's balance of the specified virtual currency by the stated amount. It is possible to make a VC balance negative with this API.",
        "remarks": "This API must be enabled for use as an option in the game manager website. It is disabled by default. See also PlayFabClientAddUserVirtualCurrencyAsync"
    },
    "PlayFabClientUnlinkAndroidDeviceIDAsync": {
        "summary": "TODO REVIEW: Unlinks the related Android device identifier from the user's PlayFab account",
        "remarks": "See also PlayFabClientLinkAndroidDeviceIDAsync, PlayFabClientLoginWithAndroidDeviceIDAsync"
    },
    "PlayFabClientUnlinkAppleAsync": {
        "summary": "TODO REVIEW: Unlinks the related Apple account from the user's PlayFab account.",
        "remarks": "See also PlayFabClientLinkAppleAsync, PlayFabClientLoginWithAppleAsync"
    },
    "PlayFabClientUnlinkCustomIDAsync": {
        "summary": "TODO REVIEW: Unlinks the related custom identifier from the user's PlayFab account",
        "remarks": "See also PlayFabClientLinkCustomIDAsync, PlayFabClientLoginWithCustomIDAsync"
    },
    "PlayFabClientUnlinkFacebookAccountAsync": {
        "summary": "TODO REVIEW: Unlinks the related Facebook account from the user's PlayFab account",
        "remarks": "See also PlayFabClientLinkFacebookAccountAsync"
    },
    "PlayFabClientUnlinkFacebookInstantGamesIdAsync": {
        "summary": "TODO REVIEW: Unlinks the related Facebook Instant Game Ids from the user's PlayFab account",
        "remarks": "See also PlayFabClientLinkFacebookInstantGamesIdAsync, PlayFabClientLoginWithFacebookInstantGamesIdAsync"
    },
    "PlayFabClientUnlinkGameCenterAccountAsync": {
        "summary": "TODO REVIEW: Unlinks the related Game Center account from the user's PlayFab account",
        "remarks": "See also PlayFabClientLinkGameCenterAccountAsync"
    },
    "PlayFabClientUnlinkGoogleAccountAsync": {
        "summary": "TODO REVIEW: Unlinks the related Google account from the user's PlayFab account (https://developers.google.com/android/reference/com/google/android/gms/auth/GoogleAuthUtil#public-methods).",
        "remarks": "See also PlayFabClientLinkGoogleAccountAsync, PlayFabClientLoginWithGoogleAccountAsync"
    },
    "PlayFabClientUnlinkIOSDeviceIDAsync": {
        "summary": "TODO REVIEW: Unlinks the related iOS device identifier from the user's PlayFab account",
        "remarks": "See also PlayFabClientLinkIOSDeviceIDAsync, PlayFabClientLoginWithIOSDeviceIDAsync"
    },
    "PlayFabClientUnlinkKongregateAsync": {
        "summary": "TODO REVIEW: Unlinks the related Kongregate identifier from the user's PlayFab account",
        "remarks": "See also PlayFabClientLinkKongregateAsync, PlayFabClientLoginWithKongregateAsync"
    },
    "PlayFabClientUnlinkNintendoServiceAccountAsync": {
        "summary": "TODO REVIEW: Unlinks the related Nintendo account from the user's PlayFab account.",
        "remarks": "See also PlayFabClientLinkNintendoServiceAccountAsync, PlayFabClientLoginWithNintendoServiceAccountAsync"
    },
    "PlayFabClientUnlinkNintendoSwitchDeviceIdAsync": {
        "summary": "TODO REVIEW: Unlinks the related NintendoSwitchDeviceId from the user's PlayFab account",
        "remarks": "See also PlayFabClientLinkNintendoSwitchDeviceIdAsync, PlayFabClientLoginWithNintendoSwitchDeviceIdAsync"
    },
    "PlayFabClientUnlinkOpenIdConnectAsync": {
        "summary": "TODO REVIEW: Unlinks an OpenID Connect account from a user's PlayFab account, based on the connection ID of an existing relationship between a title and an Open ID Connect provider.",
        "remarks": "See also PlayFabClientLinkOpenIdConnectAsync"
    },
    "PlayFabClientUnlinkPSNAccountAsync": {
        "summary": "TODO REVIEW: Unlinks the related PSN account from the user's PlayFab account",
        "remarks": "See also PlayFabClientLinkPSNAccountAsync"
    },
    "PlayFabClientUnlinkSteamAccountAsync": {
        "summary": "TODO REVIEW: Unlinks the related Steam account from the user's PlayFab account",
        "remarks": "See also PlayFabClientLinkSteamAccountAsync"
    },
    "PlayFabClientUnlinkTwitchAsync": {
        "summary": "TODO REVIEW: Unlinks the related Twitch account from the user's PlayFab account.",
        "remarks": "See also PlayFabClientLinkTwitchAsync, PlayFabClientLoginWithTwitchAsync"
    },
    "PlayFabClientUnlinkXboxAccountAsync": {
        "summary": "TODO REVIEW: Unlinks the related Xbox Live account from the user's PlayFab account",
        "remarks": "See also PlayFabClientLinkXboxAccountAsync"
    },
    "PlayFabClientUnlockContainerInstanceAsync": {
        "summary": "TODO REVIEW: Opens the specified container, with the specified key (when required), and returns the contents of the opened container. If the container (and key when relevant) are consumable (RemainingUses > 0), their RemainingUses will be decremented, consistent with the operation of ConsumeItem.",
        "remarks": "Specify the container and optionally the catalogVersion for the container to open"
    },
    "PlayFabClientUnlockContainerItemAsync": {
        "summary": "TODO REVIEW: Searches target inventory for an ItemInstance matching the given CatalogItemId, if necessary unlocks it using an appropriate key, and returns the contents of the opened container. If the container (and key when relevant) are consumable (RemainingUses > 0), their RemainingUses will be decremented, consistent with the operation of ConsumeItem.",
        "remarks": "Specify the type of container to open and optionally the catalogVersion for the container to open"
    },
    "PlayFabClientUpdateAvatarUrlAsync": {
        "summary": "TODO REVIEW: Update the avatar URL of the player"
    },
    "PlayFabClientUpdateCharacterDataAsync": {
        "summary": "TODO REVIEW: Creates and updates the title-specific custom data for the user's character which is readable and writable by the client",
        "remarks": "This function performs an additive update of the arbitrary strings containing the custom data for the character. In updating the custom data object, keys which already exist in the object will have their values overwritten, while keys with null values will be removed. New keys will be added, with the given values. No other key-value pairs will be changed apart from those specified in the call. See also PlayFabClientGetCharacterDataAsync, PlayFabClientGetCharacterReadOnlyDataAsync, PlayFabClientGetUserDataAsync"
    },
    "PlayFabClientUpdateCharacterStatisticsAsync": {
        "summary": "TODO REVIEW: Updates the values of the specified title-specific statistics for the specific character. By default, clients are not permitted to update statistics. Developers may override this setting in the Game Manager > Settings > API Features.",
        "remarks": "Enable this option with the 'Allow Client to Post Player Statistics' option in PlayFab GameManager for your title. However, this is not best practice, as this data will no longer be safely controlled by the server. This operation is additive. Character Statistics not currently defined will be added, while those already defined will be updated with the given values. All other user statistics will remain unchanged. Character statistics are used by the character-leaderboard apis, and accessible for custom game-logic. See also PlayFabClientGetCharacterLeaderboardAsync, PlayFabClientGetCharacterStatisticsAsync, PlayFabClientGetLeaderboardAroundCharacterAsync, PlayFabClientGetLeaderboardForUserCharactersAsync"
    },
    "PlayFabClientUpdatePlayerStatisticsAsync": {
        "summary": "TODO REVIEW: Updates the values of the specified title-specific statistics for the user. By default, clients are not permitted to update statistics. Developers may override this setting in the Game Manager > Settings > API Features.",
        "remarks": "Enable this option with the 'Allow Client to Post Player Statistics' option in PlayFab GameManager for your title. However, this is not best practice, as this data will no longer be safely controlled by the server. This operation is additive. Statistics not currently defined will be added, while those already defined will be updated with the given values. All other user statistics will remain unchanged. Note that if the statistic is intended to have a reset period, the UpdatePlayerStatisticDefinition API call can be used to define that reset period. Once a statistic has been versioned (reset), the now-previous version can still be written to for up a short, pre-defined period (currently 10 seconds), using the Version parameter in this call. See also PlayFabAdminCreatePlayerStatisticDefinitionAsync, PlayFabClientGetPlayerStatisticsAsync, PlayFabAdminUpdatePlayerStatisticDefinitionAsync"
    },
    "PlayFabClientUpdateSharedGroupDataAsync": {
        "summary": "TODO REVIEW: Adds, updates, and removes data keys for a shared group object. If the permission is set to Public, all fields updated or added in this call will be readable by users not in the group. By default, data permissions are set to Private. Regardless of the permission setting, only members of the group can update the data. Shared Groups are designed for sharing data between a very small number of players, please see our guide: https://docs.microsoft.com/gaming/playfab/features/social/groups/using-shared-group-data",
        "remarks": "Note that in the case of multiple calls to write to the same shared group data keys, the last write received by the PlayFab service will determine the value available to subsequent read operations. For scenarios requiring coordination of data updates, it is recommended that titles make use of user data with read permission set to public, or a combination of user data and shared group data."
    },
    "PlayFabClientUpdateUserDataAsync": {
        "summary": "TODO REVIEW: Creates and updates the title-specific custom data for the user which is readable and writable by the client",
        "remarks": "This function performs an additive update of the arbitrary strings containing the custom data for the user. In updating the custom data object, keys which already exist in the object will have their values overwritten, while keys with null values will be removed. New keys will be added, with the given values. No other key-value pairs will be changed apart from those specified in the call. See also PlayFabClientGetUserDataAsync, PlayFabClientGetUserReadOnlyDataAsync"
    },
    "PlayFabClientUpdateUserPublisherDataAsync": {
        "summary": "TODO REVIEW: Creates and updates the publisher-specific custom data for the user which is readable and writable by the client",
        "remarks": "This function performs an additive update of the arbitrary strings containing the custom data for the user. In updating the custom data object, keys which already exist in the object will have their values overwritten, while keys with null values will be removed. New keys will be added, with the given values. No other key-value pairs will be changed apart from those specified in the call. See also PlayFabClientGetUserPublisherDataAsync, PlayFabClientGetUserPublisherReadOnlyDataAsync"
    },
    "PlayFabClientUpdateUserTitleDisplayNameAsync": {
        "summary": "TODO REVIEW: Updates the title specific display name for the user",
        "remarks": "In addition to the PlayFab username, titles can make use of a DisplayName which is also a unique identifier, but specific to the title. This allows for unique names which more closely match the theme or genre of a title, for example."
    },
    "PlayFabClientValidateAmazonIAPReceiptAsync": {
        "summary": "TODO REVIEW: Validates with Amazon that the receipt for an Amazon App Store in-app purchase is valid and that it matches the purchased catalog item"
    },
    "PlayFabClientValidateGooglePlayPurchaseAsync": {
        "summary": "TODO REVIEW: Validates a Google Play purchase and gives the corresponding item to the player.",
        "remarks": "The packageName and productId are defined in the GooglePlay store. The productId must match the ItemId of the inventory item in the PlayFab catalog for the title. This enables the PlayFab service to securely validate that the purchase is for the correct item, in order to prevent uses from passing valid receipts as being for more expensive items (passing a receipt for a 99-cent purchase as being for a $19.99 purchase, for example). Each receipt may be validated only once to avoid granting the same item over and over from a single purchase."
    },
    "PlayFabClientValidateIOSReceiptAsync": {
        "summary": "TODO REVIEW: Validates with the Apple store that the receipt for an iOS in-app purchase is valid and that it matches the purchased catalog item",
        "remarks": "The CurrencyCode and PurchasePrice must match the price which was set up for the item in the Apple store. In addition, The ItemId of the inventory in the PlayFab Catalog must match the Product ID as it was set up in the Apple store. This enables the PlayFab service to securely validate that the purchase is for the correct item, in order to prevent uses from passing valid receipts as being for more expensive items (passing a receipt for a 99-cent purchase as being for a $19.99 purchase, for example)."
    },
    "PlayFabClientValidateWindowsStoreReceiptAsync": {
        "summary": "TODO REVIEW: Validates with Windows that the receipt for an Windows App Store in-app purchase is valid and that it matches the purchased catalog item"
    },
    "PlayFabClientWriteCharacterEventAsync": {
        "summary": "TODO REVIEW: Writes a character-based event into PlayStream.",
        "remarks": "This API is designed to write a multitude of different client-defined events into PlayStream. It supports a flexible JSON schema, which allowsfor arbitrary key-value pairs to describe any character-based event. The created event will be locked to the authenticated title and player. "
    },
    "PlayFabClientWritePlayerEventAsync": {
        "summary": "TODO REVIEW: Writes a player-based event into PlayStream.",
        "remarks": "This API is designed to write a multitude of different event types into PlayStream. It supports a flexible JSON schema, which allowsfor arbitrary key-value pairs to describe any player-based event. The created event will be locked to the authenticated title and player. "
    },
    "PlayFabClientWriteTitleEventAsync": {
        "summary": "TODO REVIEW: Writes a title-based event into PlayStream.",
        "remarks": "This API is designed to write a multitude of different client-defined events into PlayStream. It supports a flexible JSON schema, which allowsfor arbitrary key-value pairs to describe any title-based event. The created event will be locked to the authenticated title. "
    },
    "PlayFabMatchmakerAuthUserAsync": {
        "summary": "TODO REVIEW: Validates a user with the PlayFab service",
        "remarks": "This API allows the external match-making service to confirm that the user has a valid Session Ticket for the title, in order to securely enable match-making. The client passes the user's Session Ticket to the external match-making service, which then passes the Session Ticket in as the AuthorizationTicket in this call. See also PlayFabMatchmakerPlayerJoinedAsync, PlayFabMatchmakerPlayerLeftAsync, PlayFabMatchmakerStartGameAsync, PlayFabMatchmakerUserInfoAsync"
    },
    "PlayFabMatchmakerPlayerJoinedAsync": {
        "summary": "TODO REVIEW: Informs the PlayFab game server hosting service that the indicated user has joined the Game Server Instance specified",
        "remarks": "See also PlayFabMatchmakerAuthUserAsync, PlayFabMatchmakerPlayerLeftAsync, PlayFabMatchmakerStartGameAsync, PlayFabMatchmakerUserInfoAsync"
    },
    "PlayFabMatchmakerPlayerLeftAsync": {
        "summary": "TODO REVIEW: Informs the PlayFab game server hosting service that the indicated user has left the Game Server Instance specified",
        "remarks": "See also PlayFabMatchmakerAuthUserAsync, PlayFabMatchmakerPlayerJoinedAsync, PlayFabMatchmakerStartGameAsync, PlayFabMatchmakerUserInfoAsync"
    },
    "PlayFabMatchmakerStartGameAsync": {
        "summary": "TODO REVIEW: Instructs the PlayFab game server hosting service to instantiate a new Game Server Instance",
        "remarks": "See also PlayFabMatchmakerAuthUserAsync, PlayFabMatchmakerPlayerJoinedAsync, PlayFabMatchmakerPlayerLeftAsync, PlayFabMatchmakerUserInfoAsync"
    },
    "PlayFabMatchmakerUserInfoAsync": {
        "summary": "TODO REVIEW: Retrieves the relevant details for a specified user, which the external match-making service can then use to compute effective matches",
        "remarks": "See also PlayFabMatchmakerAuthUserAsync, PlayFabMatchmakerPlayerJoinedAsync, PlayFabMatchmakerPlayerLeftAsync, PlayFabMatchmakerStartGameAsync"
    },
    "PlayFabServerAddCharacterVirtualCurrencyAsync": {
        "summary": "TODO REVIEW: Increments the character's balance of the specified virtual currency by the stated amount",
        "remarks": "See also PlayFabServerAddUserVirtualCurrencyAsync, PlayFabServerSubtractCharacterVirtualCurrencyAsync"
    },
    "PlayFabServerAddFriendAsync": {
        "summary": "TODO REVIEW: Adds the Friend user to the friendlist of the user with PlayFabId. At least one of FriendPlayFabId,FriendUsername,FriendEmail, or FriendTitleDisplayName should be initialized.",
        "remarks": "See also PlayFabServerGetFriendsListAsync, PlayFabServerRemoveFriendAsync, PlayFabServerSetFriendTagsAsync"
    },
    "PlayFabServerAddGenericIDAsync": {
        "summary": "TODO REVIEW: Adds the specified generic service identifier to the player's PlayFab account. This is designed to allow for a PlayFab ID lookup of any arbitrary service identifier a title wants to add. This identifier should never be used as authentication credentials, as the intent is that it is easily accessible by other players.",
        "remarks": "See also PlayFabServerGetPlayFabIDsFromGenericIDsAsync, PlayFabServerRemoveGenericIDAsync"
    },
    "PlayFabServerAddPlayerTagAsync": {
        "summary": "TODO REVIEW: Adds a given tag to a player profile. The tag's namespace is automatically generated based on the source of the tag.",
        "remarks": "This API will trigger a player_tag_added event and add a tag with the given TagName and PlayFabID to the corresponding player profile. TagName can be used for segmentation and it is limited to 256 characters. Also there is a limit on the number of tags a title can have. See also PlayFabServerGetPlayerTagsAsync, PlayFabServerRemovePlayerTagAsync"
    },
    "PlayFabServerAddSharedGroupMembersAsync": {
        "summary": "TODO REVIEW: Adds users to the set of those able to update both the shared data, as well as the set of users in the group. Only users in the group (and the server) can add new members. Shared Groups are designed for sharing data between a very small number of players, please see our guide: https://docs.microsoft.com/gaming/playfab/features/social/groups/using-shared-group-data"
    },
    "PlayFabServerAddUserVirtualCurrencyAsync": {
        "summary": "TODO REVIEW: Increments the user's balance of the specified virtual currency by the stated amount",
        "remarks": "See also PlayFabServerSubtractUserVirtualCurrencyAsync"
    },
    "PlayFabServerAuthenticateSessionTicketAsync": {
        "summary": "TODO REVIEW: Validated a client's session ticket, and if successful, returns details for that user",
        "remarks": "Note that data returned may be Personally Identifying Information (PII), such as email address, and so care should be taken in how this data is stored and managed. Since this call will always return the relevant information for users who have accessed the title, the recommendation is to not store this data locally."
    },
    "PlayFabServerAwardSteamAchievementAsync": {
        "summary": "TODO REVIEW: Awards the specified users the specified Steam achievements"
    },
    "PlayFabServerBanUsersAsync": {
        "summary": "TODO REVIEW: Bans users by PlayFab ID with optional IP address, or MAC address for the provided game.",
        "remarks": "The existence of each user will not be verified. When banning by IP or MAC address, multiple players may be affected, so use this feature with caution. Returns information about the new bans. See also PlayFabServerGetUserBansAsync, PlayFabServerRevokeAllBansForUserAsync, PlayFabServerRevokeBansAsync, PlayFabServerUpdateBansAsync"
    },
    "PlayFabServerConsumeItemAsync": {
        "summary": "TODO REVIEW: Consume uses of a consumable item. When all uses are consumed, it will be removed from the player's inventory."
    },
    "PlayFabServerCreateSharedGroupAsync": {
        "summary": "TODO REVIEW: Requests the creation of a shared group object, containing key/value pairs which may be updated by all members of the group. When created by a server, the group will initially have no members. Shared Groups are designed for sharing data between a very small number of players, please see our guide: https://docs.microsoft.com/gaming/playfab/features/social/groups/using-shared-group-data",
        "remarks": "If SharedGroupId is specified, the service will attempt to create a group with that identifier, and will return an error if it is already in use. If no SharedGroupId is specified, a random identifier will be assigned."
    },
    "PlayFabServerDeleteCharacterFromUserAsync": {
        "summary": "TODO REVIEW: Deletes the specific character ID from the specified user.",
        "remarks": "This function will delete the specified character from the list allowed by the user, and will also delete any inventory or VC currently held by that character. It will NOT delete any statistics associated for this character, in order to preserve leaderboard integrity."
    },
    "PlayFabServerDeletePlayerAsync": {
        "summary": "TODO REVIEW: Removes a user's player account from a title and deletes all associated data",
        "remarks": "Deletes all data associated with the player, including statistics, custom data, inventory, purchases, virtual currency balances, characters and shared group memberships. Removes the player from all leaderboards and player search indexes. Does not delete PlayStream event history associated with the player. Does not delete the publisher user account that created the player in the title nor associated data such as username, password, email address, account linkages, or friends list. Note, this API queues the player for deletion and returns immediately. It may take several minutes or more before all player data is fully deleted. Until the player data is fully deleted, attempts to recreate the player with the same user account in the same title will fail with the 'AccountDeleted' error. This API must be enabled for use as an option in the game manager website. It is disabled by default."
    },
    "PlayFabServerDeletePushNotificationTemplateAsync": {
        "summary": "TODO REVIEW: Deletes push notification template for title"
    },
    "PlayFabServerDeleteSharedGroupAsync": {
        "summary": "TODO REVIEW: Deletes a shared group, freeing up the shared group ID to be reused for a new group. Shared Groups are designed for sharing data between a very small number of players, please see our guide: https://docs.microsoft.com/gaming/playfab/features/social/groups/using-shared-group-data"
    },
    "PlayFabServerDeregisterGameAsync": {
        "summary": "TODO REVIEW: Inform the matchmaker that a Game Server Instance is removed.",
        "remarks": "See also PlayFabServerRegisterGameAsync"
    },
    "PlayFabServerEvaluateRandomResultTableAsync": {
        "summary": "TODO REVIEW: Returns the result of an evaluation of a Random Result Table - the ItemId from the game Catalog which would have been added to the player inventory, if the Random Result Table were added via a Bundle or a call to UnlockContainer."
    },
    "PlayFabServerExecuteCloudScriptAsync": {
        "summary": "TODO REVIEW: Executes a CloudScript function, with the 'currentPlayerId' variable set to the specified PlayFabId parameter value."
    },
    "PlayFabServerGetAllSegmentsAsync": {
        "summary": "TODO REVIEW: Retrieves an array of player segment definitions. Results from this can be used in subsequent API calls such as GetPlayersInSegment which requires a Segment ID. While segment names can change the ID for that segment will not change.",
        "remarks": "Request has no paramaters. See also PlayFabServerGetPlayersInSegmentAsync"
    },
    "PlayFabServerGetAllUsersCharactersAsync": {
        "summary": "TODO REVIEW: Lists all of the characters that belong to a specific user. CharacterIds are not globally unique; characterId must be evaluated with the parent PlayFabId to guarantee uniqueness.",
        "remarks": "Returns a list of every character that currently belongs to a user."
    },
    "PlayFabServerGetCatalogItemsAsync": {
        "summary": "TODO REVIEW: Retrieves the specified version of the title's catalog of virtual goods, including all defined properties"
    },
    "PlayFabServerGetCharacterDataAsync": {
        "summary": "TODO REVIEW: Retrieves the title-specific custom data for the user which is readable and writable by the client",
        "remarks": "Data is stored as JSON key-value pairs. If the Keys parameter is provided, the data object returned will only contain the data specific to the indicated Keys. Otherwise, the full set of custom user data will be returned. See also PlayFabServerGetUserDataAsync, PlayFabServerUpdateCharacterDataAsync, PlayFabServerUpdateCharacterInternalDataAsync, PlayFabServerUpdateCharacterReadOnlyDataAsync"
    },
    "PlayFabServerGetCharacterInternalDataAsync": {
        "summary": "TODO REVIEW: Retrieves the title-specific custom data for the user's character which cannot be accessed by the client",
        "remarks": "Data is stored as JSON key-value pairs. If the Keys parameter is provided, the data object returned will only contain the data specific to the indicated Keys. Otherwise, the full set of custom user data will be returned. See also PlayFabServerGetUserInternalDataAsync, PlayFabServerUpdateCharacterDataAsync, PlayFabServerUpdateCharacterInternalDataAsync, PlayFabServerUpdateCharacterReadOnlyDataAsync"
    },
    "PlayFabServerGetCharacterInventoryAsync": {
        "summary": "TODO REVIEW: Retrieves the specified character's current inventory of virtual goods",
        "remarks": "All items currently in the character inventory will be returned, irrespective of how they were acquired (via purchasing, grants, coupons, etc.). Items that are expired, fully consumed, or are no longer valid are not considered to be in the user's current inventory, and so will not be not included. Also returns their virtual currency balances. See also PlayFabServerGetUserInventoryAsync"
    },
    "PlayFabServerGetCharacterLeaderboardAsync": {
        "summary": "TODO REVIEW: Retrieves a list of ranked characters for the given statistic, starting from the indicated point in the leaderboard",
        "remarks": "See also PlayFabServerGetCharacterStatisticsAsync, PlayFabServerGetLeaderboardAroundCharacterAsync, PlayFabServerUpdateCharacterStatisticsAsync"
    },
    "PlayFabServerGetCharacterReadOnlyDataAsync": {
        "summary": "TODO REVIEW: Retrieves the title-specific custom data for the user's character which can only be read by the client",
        "remarks": "Data is stored as JSON key-value pairs. If the Keys parameter is provided, the data object returned will only contain the data specific to the indicated Keys. Otherwise, the full set of custom data will be returned. See also PlayFabServerGetCharacterDataAsync, PlayFabServerGetCharacterInternalDataAsync, PlayFabServerGetUserReadOnlyDataAsync, PlayFabServerUpdateCharacterReadOnlyDataAsync"
    },
    "PlayFabServerGetCharacterStatisticsAsync": {
        "summary": "TODO REVIEW: Retrieves the details of all title-specific statistics for the specific character",
        "remarks": "Character statistics are similar to user statistics in that they are numeric values which may only be updated by a server operation, in order to minimize the opportunity for unauthorized changes. In addition to being available for use by the title, the statistics are used for all leaderboard operations in PlayFab. See also PlayFabServerGetLeaderboardAsync, PlayFabServerGetUserStatisticsAsync, PlayFabServerUpdateCharacterStatisticsAsync"
    },
    "PlayFabServerGetContentDownloadUrlAsync": {
        "summary": "TODO REVIEW: This API retrieves a pre-signed URL for accessing a content file for the title. A subsequent HTTP GET to the returned URL will attempt to download the content. A HEAD query to the returned URL will attempt to retrieve the metadata of the content. Note that a successful result does not guarantee the existence of this content - if it has not been uploaded, the query to retrieve the data will fail. See this post for more information: https://community.playfab.com/hc/community/posts/205469488-How-to-upload-files-to-PlayFab-s-Content-Service. Also, please be aware that the Content service is specifically PlayFab's CDN offering, for which standard CDN rates apply.",
        "remarks": "See also PlayFabAdminDeleteContentAsync, PlayFabClientGetContentDownloadUrlAsync, PlayFabAdminGetContentListAsync, PlayFabAdminGetContentUploadUrlAsync"
    },
    "PlayFabServerGetFriendLeaderboardAsync": {
        "summary": "TODO REVIEW: Retrieves a list of ranked friends of the given player for the given statistic, starting from the indicated point in the leaderboard",
        "remarks": "See also PlayFabClientGetLeaderboardAroundCurrentUserAsync, PlayFabServerGetLeaderboardAroundUserAsync, PlayFabServerGetUserStatisticsAsync"
    },
    "PlayFabServerGetFriendsListAsync": {
        "summary": "TODO REVIEW: Retrieves the current friends for the user with PlayFabId, constrained to users who have PlayFab accounts. Friends from linked accounts (Facebook, Steam) are also included. You may optionally exclude some linked services' friends.",
        "remarks": "See also PlayFabServerAddFriendAsync, PlayFabServerGetPlayerProfileAsync, PlayFabServerRemoveFriendAsync, PlayFabServerSetFriendTagsAsync"
    },
    "PlayFabServerGetLeaderboardAsync": {
        "summary": "TODO REVIEW: Retrieves a list of ranked users for the given statistic, starting from the indicated point in the leaderboard",
        "remarks": "See also PlayFabServerGetLeaderboardAroundUserAsync, PlayFabServerGetUserStatisticsAsync, PlayFabServerUpdateUserStatisticsAsync"
    },
    "PlayFabServerGetLeaderboardAroundCharacterAsync": {
        "summary": "TODO REVIEW: Retrieves a list of ranked characters for the given statistic, centered on the requested user",
        "remarks": "See also PlayFabServerGetCharacterLeaderboardAsync, PlayFabServerGetLeaderboardAsync, PlayFabServerUpdateCharacterStatisticsAsync"
    },
    "PlayFabServerGetLeaderboardAroundUserAsync": {
        "summary": "TODO REVIEW: Retrieves a list of ranked users for the given statistic, centered on the currently signed-in user",
        "remarks": "See also PlayFabServerGetLeaderboardAsync, PlayFabServerGetUserStatisticsAsync, PlayFabServerUpdateUserStatisticsAsync"
    },
    "PlayFabServerGetLeaderboardForUserCharactersAsync": {
        "summary": "TODO REVIEW: Retrieves a list of all of the user's characters for the given statistic.",
        "remarks": "See also PlayFabServerGetLeaderboardAsync, PlayFabServerGetLeaderboardAroundCharacterAsync, PlayFabServerUpdateCharacterStatisticsAsync"
    },
    "PlayFabServerGetPlayerCombinedInfoAsync": {
        "summary": "TODO REVIEW: Returns whatever info is requested in the response for the user. Note that PII (like email address, facebook id) may be returned. All parameters default to false."
    },
    "PlayFabServerGetPlayerProfileAsync": {
        "summary": "TODO REVIEW: Retrieves the player's profile",
        "remarks": "This API allows for access to details regarding a user in the PlayFab service, usually for purposes of customer support. Note that data returned may be Personally Identifying Information (PII), such as email address, and so care should be taken in how this data is stored and managed. Since this call will always return the relevant information for users who have accessed the title, the recommendation is to not store this data locally."
    },
    "PlayFabServerGetPlayerSegmentsAsync": {
        "summary": "TODO REVIEW: List all segments that a player currently belongs to at this moment in time.",
        "remarks": "See also PlayFabServerGetAllSegmentsAsync"
    },
    "PlayFabServerGetPlayersInSegmentAsync": {
        "summary": "TODO REVIEW: Allows for paging through all players in a given segment. This API creates a snapshot of all player profiles that match the segment definition at the time of its creation and lives through the Total Seconds to Live, refreshing its life span on each subsequent use of the Continuation Token. Profiles that change during the course of paging will not be reflected in the results. AB Test segments are currently not supported by this operation. NOTE: This API is limited to being called 30 times in one minute. You will be returned an error if you exceed this threshold.",
        "remarks": "Initial request must contain at least a Segment ID. Subsequent requests must contain the Segment ID as well as the Continuation Token. Failure to send the Continuation Token will result in a new player segment list being generated. Each time the Continuation Token is passed in the length of the Total Seconds to Live is refreshed. If too much time passes between requests to the point that a subsequent request is past the Total Seconds to Live an error will be returned and paging will be terminated. This API is resource intensive and should not be used in scenarios which might generate high request volumes. Only one request to this API at a time should be made per title. Concurrent requests to the API may be rejected with the APIConcurrentRequestLimitExceeded error. See also PlayFabServerGetAllSegmentsAsync"
    },
    "PlayFabServerGetPlayerStatisticsAsync": {
        "summary": "TODO REVIEW: Retrieves the current version and values for the indicated statistics, for the local player.",
        "remarks": "See also PlayFabAdminCreatePlayerStatisticDefinitionAsync, PlayFabServerGetPlayerStatisticVersionsAsync, PlayFabAdminUpdatePlayerStatisticDefinitionAsync, PlayFabServerUpdatePlayerStatisticsAsync"
    },
    "PlayFabServerGetPlayerStatisticVersionsAsync": {
        "summary": "TODO REVIEW: Retrieves the information on the available versions of the specified statistic.",
        "remarks": "See also PlayFabAdminCreatePlayerStatisticDefinitionAsync, PlayFabServerGetPlayerStatisticsAsync, PlayFabAdminUpdatePlayerStatisticDefinitionAsync, PlayFabServerUpdatePlayerStatisticsAsync"
    },
    "PlayFabServerGetPlayerTagsAsync": {
        "summary": "TODO REVIEW: Get all tags with a given Namespace (optional) from a player profile.",
        "remarks": "This API will return a list of canonical tags which includes both namespace and tag's name. If namespace is not provided, the result is a list of all canonical tags. TagName can be used for segmentation and Namespace is limited to 128 characters. See also PlayFabServerAddPlayerTagAsync, PlayFabServerRemovePlayerTagAsync"
    },
    "PlayFabServerGetPlayFabIDsFromFacebookIDsAsync": {
        "summary": "TODO REVIEW: Retrieves the unique PlayFab identifiers for the given set of Facebook identifiers."
    },
    "PlayFabServerGetPlayFabIDsFromFacebookInstantGamesIdsAsync": {
        "summary": "TODO REVIEW: Retrieves the unique PlayFab identifiers for the given set of Facebook Instant Games identifiers."
    },
    "PlayFabServerGetPlayFabIDsFromGenericIDsAsync": {
        "summary": "TODO REVIEW: Retrieves the unique PlayFab identifiers for the given set of generic service identifiers. A generic identifier is the service name plus the service-specific ID for the player, as specified by the title when the generic identifier was added to the player account.",
        "remarks": "See also PlayFabServerAddGenericIDAsync, PlayFabServerRemoveGenericIDAsync"
    },
    "PlayFabServerGetPlayFabIDsFromNintendoSwitchDeviceIdsAsync": {
        "summary": "TODO REVIEW: Retrieves the unique PlayFab identifiers for the given set of Nintendo Switch Device identifiers."
    },
    "PlayFabServerGetPlayFabIDsFromPSNAccountIDsAsync": {
        "summary": "TODO REVIEW: Retrieves the unique PlayFab identifiers for the given set of PlayStation Network identifiers."
    },
    "PlayFabServerGetPlayFabIDsFromSteamIDsAsync": {
        "summary": "TODO REVIEW: Retrieves the unique PlayFab identifiers for the given set of Steam identifiers. The Steam identifiers are the profile IDs for the user accounts, available as SteamId in the Steamworks Community API calls."
    },
    "PlayFabServerGetPlayFabIDsFromXboxLiveIDsAsync": {
        "summary": "TODO REVIEW: Retrieves the unique PlayFab identifiers for the given set of XboxLive identifiers."
    },
    "PlayFabServerGetPublisherDataAsync": {
        "summary": "TODO REVIEW: Retrieves the key-value store of custom publisher settings",
        "remarks": "This API is designed to return publisher-specific values which can be read, but not written to, by the client. This data is shared across all titles assigned to a particular publisher, and can be used for cross-game coordination. Only titles assigned to a publisher can use this API. For more information email helloplayfab@microsoft.com. Note that there may up to a minute delay in between updating title data and this API call returning the newest value. See also PlayFabServerSetPublisherDataAsync"
    },
    "PlayFabServerGetRandomResultTablesAsync": {
        "summary": "TODO REVIEW: Retrieves the configuration information for the specified random results tables for the title, including all ItemId values and weights",
        "remarks": "See also PlayFabServerEvaluateRandomResultTableAsync"
    },
    "PlayFabServerGetServerCustomIDsFromPlayFabIDsAsync": {
        "summary": "TODO REVIEW: Retrieves the associated PlayFab account identifiers for the given set of server custom identifiers."
    },
    "PlayFabServerGetSharedGroupDataAsync": {
        "summary": "TODO REVIEW: Retrieves data stored in a shared group object, as well as the list of members in the group. The server can access all public and private group data. Shared Groups are designed for sharing data between a very small number of players, please see our guide: https://docs.microsoft.com/gaming/playfab/features/social/groups/using-shared-group-data"
    },
    "PlayFabServerGetStoreItemsAsync": {
        "summary": "TODO REVIEW: Retrieves the set of items defined for the specified store, including all prices defined, for the specified player",
        "remarks": "A store contains an array of references to items defined in one or more catalog versions of the game, along with the prices for the item, in both real world and virtual currencies. These prices act as an override to any prices defined in the catalog. In this way, the base definitions of the items may be defined in the catalog, with all associated properties, while the pricing can be set for each store, as needed. This allows for subsets of goods to be defined for different purposes (in order to simplify showing some, but not all catalog items to users, based upon different characteristics), along with unique prices. Note that all prices defined in the catalog and store definitions for the item are considered valid, and that a compromised client can be made to send a request for an item based upon any of these definitions. If no price is specified in the store for an item, the price set in the catalog should be displayed to the user. See also PlayFabServerGetCatalogItemsAsync"
    },
    "PlayFabServerGetTimeAsync": {
        "summary": "TODO REVIEW: Retrieves the current server time",
        "remarks": "This query retrieves the current time from one of the servers in PlayFab. Please note that due to clock drift between servers, there is a potential variance of up to 5 seconds."
    },
    "PlayFabServerGetTitleDataAsync": {
        "summary": "TODO REVIEW: Retrieves the key-value store of custom title settings",
        "remarks": "This API is designed to return title specific values which can be read, but not written to, by the client. For example, a developer could choose to store values which modify the user experience, such as enemy spawn rates, weapon strengths, movement speeds, etc. This allows a developer to update the title without the need to create, test, and ship a new build. If an override label is specified in the request, the overrides are applied automatically and returned with the title data. Note that there may up to a minute delay in between updating title data and this API call returning the newest value. See also PlayFabServerSetTitleDataAsync"
    },
    "PlayFabServerGetTitleInternalDataAsync": {
        "summary": "TODO REVIEW: Retrieves the key-value store of custom internal title settings",
        "remarks": "This API is designed to return title specific values which are accessible only to the server. This can be used to tweak settings on game servers and Cloud Scripts without needed to update and re-deploy them. Note that there may up to a minute delay in between updating title data and this API call returning the newest value. See also PlayFabServerSetTitleInternalDataAsync"
    },
    "PlayFabServerGetTitleNewsAsync": {
        "summary": "TODO REVIEW: Retrieves the title news feed, as configured in the developer portal"
    },
    "PlayFabServerGetUserAccountInfoAsync": {
        "summary": "TODO REVIEW: Retrieves the relevant details for a specified user",
        "remarks": "This API allows for access to details regarding a user in the PlayFab service, usually for purposes of customer support. Note that data returned may be Personally Identifying Information (PII), such as email address, and so care should be taken in how this data is stored and managed. Since this call will always return the relevant information for users who have accessed the title, the recommendation is to not store this data locally. See also PlayFabServerGetUserInventoryAsync"
    },
    "PlayFabServerGetUserBansAsync": {
        "summary": "TODO REVIEW: Gets all bans for a user.",
        "remarks": "Get all bans for a user, including inactive and expired bans.  See also PlayFabServerBanUsersAsync, PlayFabServerRevokeAllBansForUserAsync, PlayFabServerRevokeBansAsync, PlayFabServerUpdateBansAsync"
    },
    "PlayFabServerGetUserDataAsync": {
        "summary": "TODO REVIEW: Retrieves the title-specific custom data for the user which is readable and writable by the client",
        "remarks": "Data is stored as JSON key-value pairs. If the Keys parameter is provided, the data object returned will only contain the data specific to the indicated Keys. Otherwise, the full set of custom user data will be returned. See also PlayFabServerGetUserInternalDataAsync, PlayFabServerGetUserReadOnlyDataAsync, PlayFabServerUpdateUserDataAsync, PlayFabServerUpdateUserInternalDataAsync, PlayFabServerUpdateUserReadOnlyDataAsync"
    },
    "PlayFabServerGetUserInternalDataAsync": {
        "summary": "TODO REVIEW: Retrieves the title-specific custom data for the user which cannot be accessed by the client",
        "remarks": "Data is stored as JSON key-value pairs. If the Keys parameter is provided, the data object returned will only contain the data specific to the indicated Keys. Otherwise, the full set of custom user data will be returned. See also PlayFabServerGetUserDataAsync, PlayFabServerGetUserReadOnlyDataAsync, PlayFabServerUpdateUserDataAsync, PlayFabServerUpdateUserInternalDataAsync, PlayFabServerUpdateUserReadOnlyDataAsync"
    },
    "PlayFabServerGetUserInventoryAsync": {
        "summary": "TODO REVIEW: Retrieves the specified user's current inventory of virtual goods",
        "remarks": "All items currently in the user inventory will be returned, irrespective of how they were acquired (via purchasing, grants, coupons, etc.). Items that are expired, fully consumed, or are no longer valid are not considered to be in the user's current inventory, and so will not be not included. See also PlayFabServerGetUserAccountInfoAsync"
    },
    "PlayFabServerGetUserPublisherDataAsync": {
        "summary": "TODO REVIEW: Retrieves the publisher-specific custom data for the user which is readable and writable by the client",
        "remarks": "Data is stored as JSON key-value pairs. If the Keys parameter is provided, the data object returned will only contain the data specific to the indicated Keys. Otherwise, the full set of custom user data will be returned. See also PlayFabServerGetUserPublisherInternalDataAsync, PlayFabServerGetUserPublisherReadOnlyDataAsync, PlayFabServerUpdateUserPublisherDataAsync, PlayFabServerUpdateUserPublisherInternalDataAsync, PlayFabServerUpdateUserPublisherReadOnlyDataAsync"
    },
    "PlayFabServerGetUserPublisherInternalDataAsync": {
        "summary": "TODO REVIEW: Retrieves the publisher-specific custom data for the user which cannot be accessed by the client",
        "remarks": "Data is stored as JSON key-value pairs. If the Keys parameter is provided, the data object returned will only contain the data specific to the indicated Keys. Otherwise, the full set of custom user data will be returned. See also PlayFabServerGetUserPublisherDataAsync, PlayFabServerGetUserPublisherReadOnlyDataAsync, PlayFabServerUpdateUserPublisherDataAsync, PlayFabServerUpdateUserPublisherInternalDataAsync, PlayFabServerUpdateUserPublisherReadOnlyDataAsync"
    },
    "PlayFabServerGetUserPublisherReadOnlyDataAsync": {
        "summary": "TODO REVIEW: Retrieves the publisher-specific custom data for the user which can only be read by the client",
        "remarks": "Data is stored as JSON key-value pairs. If the Keys parameter is provided, the data object returned will only contain the data specific to the indicated Keys. Otherwise, the full set of custom user data will be returned. See also PlayFabServerGetUserPublisherDataAsync, PlayFabServerGetUserPublisherInternalDataAsync, PlayFabServerUpdateUserPublisherDataAsync, PlayFabServerUpdateUserPublisherInternalDataAsync, PlayFabServerUpdateUserPublisherReadOnlyDataAsync"
    },
    "PlayFabServerGetUserReadOnlyDataAsync": {
        "summary": "TODO REVIEW: Retrieves the title-specific custom data for the user which can only be read by the client",
        "remarks": "Data is stored as JSON key-value pairs. If the Keys parameter is provided, the data object returned will only contain the data specific to the indicated Keys. Otherwise, the full set of custom user data will be returned. See also PlayFabServerGetUserDataAsync, PlayFabServerGetUserInternalDataAsync, PlayFabServerUpdateUserDataAsync, PlayFabServerUpdateUserInternalDataAsync, PlayFabServerUpdateUserReadOnlyDataAsync"
    },
    "PlayFabServerGrantCharacterToUserAsync": {
        "summary": "TODO REVIEW: Grants the specified character type to the user. CharacterIds are not globally unique; characterId must be evaluated with the parent PlayFabId to guarantee uniqueness.",
        "remarks": "Grants a character to the user of the type and name specified in the request."
    },
    "PlayFabServerGrantItemsToCharacterAsync": {
        "summary": "TODO REVIEW: Adds the specified items to the specified character's inventory",
        "remarks": "This function directly adds inventory items to the character's inventories. As a result of this operations, the user will not be charged any transaction fee, regardless of the inventory item catalog definition. Please note that the processing time for inventory grants and purchases increases fractionally the more items are in the inventory, and the more items are in the grant/purchase operation."
    },
    "PlayFabServerGrantItemsToUserAsync": {
        "summary": "TODO REVIEW: Adds the specified items to the specified user's inventory",
        "remarks": "This function directly adds inventory items to the user's inventories. As a result of this operations, the user will not be charged any transaction fee, regardless of the inventory item catalog definition. Please note that the processing time for inventory grants and purchases increases fractionally the more items are in the inventory, and the more items are in the grant/purchase operation."
    },
    "PlayFabServerGrantItemsToUsersAsync": {
        "summary": "TODO REVIEW: Adds the specified items to the specified user inventories",
        "remarks": "This function directly adds inventory items to user inventories. As a result of this operations, the user will not be charged any transaction fee, regardless of the inventory item catalog definition. Please note that the processing time for inventory grants and purchases increases fractionally the more items are in the inventory, and the more items are in the grant/purchase operation."
    },
    "PlayFabServerLinkPSNAccountAsync": {
        "summary": "TODO REVIEW: Links the PlayStation Network account associated with the provided access code to the user's PlayFab account",
        "remarks": "See also PlayFabServerUnlinkPSNAccountAsync"
    },
    "PlayFabServerLinkServerCustomIdAsync": {
        "summary": "TODO REVIEW: Links the custom server identifier, generated by the title, to the user's PlayFab account."
    },
    "PlayFabServerLinkXboxAccountAsync": {
        "summary": "TODO REVIEW: Links the Xbox Live account associated with the provided access code to the user's PlayFab account",
        "remarks": "See also PlayFabServerLoginWithXboxAsync, PlayFabServerUnlinkXboxAccountAsync"
    },
    "PlayFabServerModifyItemUsesAsync": {
        "summary": "TODO REVIEW: Modifies the number of remaining uses of a player's inventory item",
        "remarks": "This function can both add and remove uses of an inventory item. If the number of uses drops below zero, the item will be removed from active inventory."
    },
    "PlayFabServerMoveItemToCharacterFromCharacterAsync": {
        "summary": "TODO REVIEW: Moves an item from a character's inventory into another of the users's character's inventory.",
        "remarks": "Transfers an item from a character to another character that is owned by the same user. This will remove the item from the character's inventory (until and unless it is moved back), and will enable the other character to make use of the item instead. See also PlayFabServerGrantItemsToCharacterAsync, PlayFabServerMoveItemToCharacterFromUserAsync, PlayFabServerMoveItemToUserFromCharacterAsync"
    },
    "PlayFabServerMoveItemToCharacterFromUserAsync": {
        "summary": "TODO REVIEW: Moves an item from a user's inventory into their character's inventory.",
        "remarks": "Transfers an item from a user to a character she owns. This will remove the item from the user's inventory (until and unless it is moved back), and will enable the character to make use of the item instead. See also PlayFabServerGrantItemsToCharacterAsync, PlayFabServerMoveItemToUserFromCharacterAsync"
    },
    "PlayFabServerMoveItemToUserFromCharacterAsync": {
        "summary": "TODO REVIEW: Moves an item from a character's inventory into the owning user's inventory.",
        "remarks": "Transfers an item from a character to the owning user. This will remove the item from the character's inventory (until and unless it is moved back), and will enable the user to make use of the item instead. See also PlayFabServerGrantItemsToCharacterAsync, PlayFabServerMoveItemToCharacterFromUserAsync"
    },
    "PlayFabServerNotifyMatchmakerPlayerLeftAsync": {
        "summary": "TODO REVIEW: Informs the PlayFab match-making service that the user specified has left the Game Server Instance"
    },
    "PlayFabServerRedeemCouponAsync": {
        "summary": "TODO REVIEW: Adds the virtual goods associated with the coupon to the user's inventory. Coupons can be generated via the Economy->Catalogs tab in the PlayFab Game Manager.",
        "remarks": "Coupon codes can be created for any item, or set of items, in the catalog for the title. This operation causes the coupon to be consumed, and the specific items to be awarded to the user. Attempting to re-use an already consumed code, or a code which has not yet been created in the service, will result in an error."
    },
    "PlayFabServerRedeemMatchmakerTicketAsync": {
        "summary": "TODO REVIEW: Validates a Game Server session ticket and returns details about the user",
        "remarks": "This function is used by a Game Server Instance to validate with the PlayFab service that a user has been registered as connected to the server. The Ticket is provided to the client either as a result of a call to StartGame or Matchmake, each of which return a Ticket specific to the Game Server Instance. This function will fail in any case where the Ticket presented is not valid for the specific Game Server Instance making the call. Note that data returned may be Personally Identifying Information (PII), such as email address, and so care should be taken in how this data is stored and managed. Since this call will always return the relevant information for users who have accessed the title, the recommendation is to not store this data locally."
    },
    "PlayFabServerRefreshGameServerInstanceHeartbeatAsync": {
        "summary": "TODO REVIEW: Set the state of the indicated Game Server Instance. Also update the heartbeat for the instance."
    },
    "PlayFabServerRegisterGameAsync": {
        "summary": "TODO REVIEW: Inform the matchmaker that a new Game Server Instance is added.",
        "remarks": "See also PlayFabServerDeregisterGameAsync"
    },
    "PlayFabServerRemoveFriendAsync": {
        "summary": "TODO REVIEW: Removes the specified friend from the the user's friend list",
        "remarks": "See also PlayFabServerAddFriendAsync, PlayFabServerSetFriendTagsAsync"
    },
    "PlayFabServerRemoveGenericIDAsync": {
        "summary": "TODO REVIEW: Removes the specified generic service identifier from the player's PlayFab account.",
        "remarks": "See also PlayFabServerAddGenericIDAsync, PlayFabServerGetPlayFabIDsFromGenericIDsAsync"
    },
    "PlayFabServerRemovePlayerTagAsync": {
        "summary": "TODO REVIEW: Remove a given tag from a player profile. The tag's namespace is automatically generated based on the source of the tag.",
        "remarks": "This API will trigger a player_tag_removed event and remove a tag with the given TagName and PlayFabID from the corresponding player profile. TagName can be used for segmentation and it is limited to 256 characters See also PlayFabServerAddPlayerTagAsync, PlayFabServerGetPlayerTagsAsync"
    },
    "PlayFabServerRemoveSharedGroupMembersAsync": {
        "summary": "TODO REVIEW: Removes users from the set of those able to update the shared data and the set of users in the group. Only users in the group can remove members. If as a result of the call, zero users remain with access, the group and its associated data will be deleted. Shared Groups are designed for sharing data between a very small number of players, please see our guide: https://docs.microsoft.com/gaming/playfab/features/social/groups/using-shared-group-data"
    },
    "PlayFabServerReportPlayerAsync": {
        "summary": "TODO REVIEW: Submit a report about a player (due to bad bahavior, etc.) on behalf of another player, so that customer service representatives for the title can take action concerning potentially toxic players."
    },
    "PlayFabServerRevokeAllBansForUserAsync": {
        "summary": "TODO REVIEW: Revoke all active bans for a user.",
        "remarks": "Setting the active state of all non-expired bans for a user to Inactive. Expired bans with an Active state will be ignored, however. Returns information about applied updates only. See also PlayFabServerBanUsersAsync, PlayFabServerGetUserBansAsync, PlayFabServerRevokeBansAsync, PlayFabServerUpdateBansAsync"
    },
    "PlayFabServerRevokeBansAsync": {
        "summary": "TODO REVIEW: Revoke all active bans specified with BanId.",
        "remarks": "Setting the active state of all bans requested to Inactive regardless of whether that ban has already expired. BanIds that do not exist will be skipped. Returns information about applied updates only.  See also PlayFabServerBanUsersAsync, PlayFabServerGetUserBansAsync, PlayFabServerRevokeAllBansForUserAsync, PlayFabServerUpdateBansAsync"
    },
    "PlayFabServerRevokeInventoryItemAsync": {
        "summary": "TODO REVIEW: Revokes access to an item in a user's inventory",
        "remarks": "In cases where the inventory item in question is a 'crate', and the items it contained have already been dispensed, this will not revoke access or otherwise remove the items which were dispensed. See also PlayFabServerGetUserInventoryAsync"
    },
    "PlayFabServerRevokeInventoryItemsAsync": {
        "summary": "TODO REVIEW: Revokes access for up to 25 items across multiple users and characters.",
        "remarks": "In cases where the inventory item in question is a 'crate', and the items it contained have already been dispensed, this will not revoke access or otherwise remove the items which were dispensed. See also PlayFabServerGetUserInventoryAsync"
    },
    "PlayFabServerSavePushNotificationTemplateAsync": {
        "summary": "TODO REVIEW: Saves push notification template for title"
    },
    "PlayFabServerSendCustomAccountRecoveryEmailAsync": {
        "summary": "TODO REVIEW: Forces an email to be sent to the registered contact email address for the user's account based on an account recovery email template",
        "remarks": "PlayFab accounts which have valid email address or username will be able to receive a password reset email using this API.The email sent must be an account recovery email template. The username or email can be passed in to send the email"
    },
    "PlayFabServerSendEmailFromTemplateAsync": {
        "summary": "TODO REVIEW: Sends an email based on an email template to a player's contact email ",
        "remarks": "Sends an email for only players that have contact emails associated with them. Takes in an email template ID specifyingthe email template to send."
    },
    "PlayFabServerSendPushNotificationAsync": {
        "summary": "TODO REVIEW: Sends an iOS/Android Push Notification to a specific user, if that user's device has been configured for Push Notifications in PlayFab. If a user has linked both Android and iOS devices, both will be notified."
    },
    "PlayFabServerSendPushNotificationFromTemplateAsync": {
        "summary": "TODO REVIEW: Sends an iOS/Android Push Notification template to a specific user, if that user's device has been configured for Push Notifications in PlayFab. If a user has linked both Android and iOS devices, both will be notified."
    },
    "PlayFabServerSetFriendTagsAsync": {
        "summary": "TODO REVIEW: Updates the tag list for a specified user in the friend list of another user",
        "remarks": "This operation is not additive. It will completely replace the tag list for the specified user. Please note that only users in the PlayFab friends list can be assigned tags. Attempting to set a tag on a friend only included in the friends list from a social site integration (such as Facebook or Steam) will return the AccountNotFound error. See also PlayFabServerAddFriendAsync, PlayFabServerGetFriendsListAsync, PlayFabServerRemoveFriendAsync"
    },
    "PlayFabServerSetGameServerInstanceDataAsync": {
        "summary": "TODO REVIEW: Sets the custom data of the indicated Game Server Instance"
    },
    "PlayFabServerSetGameServerInstanceStateAsync": {
        "summary": "TODO REVIEW: Set the state of the indicated Game Server Instance."
    },
    "PlayFabServerSetGameServerInstanceTagsAsync": {
        "summary": "TODO REVIEW: Set custom tags for the specified Game Server Instance"
    },
    "PlayFabServerSetPlayerSecretAsync": {
        "summary": "TODO REVIEW: Sets the player's secret if it is not already set. Player secrets are used to sign API requests. To reset a player's secret use the Admin or Server API method SetPlayerSecret.",
        "remarks": "APIs that require signatures require that the player have a configured Player Secret Key that is used to sign all requests. Players that don't have a secret will be blocked from making API calls until it is configured. To create a signature header add a SHA256 hashed string containing UTF8 encoded JSON body as it will be sent to the server, the current time in UTC formatted to ISO 8601, and the players secret formatted as 'body.date.secret'. Place the resulting hash into the header X-PlayFab-Signature, along with a header X-PlayFab-Timestamp of the same UTC timestamp used in the signature."
    },
    "PlayFabServerSetPublisherDataAsync": {
        "summary": "TODO REVIEW: Updates the key-value store of custom publisher settings",
        "remarks": "This API is designed to store publisher-specific values which can be read, but not written to, by the client. This data is shared across all titles assigned to a particular publisher, and can be used for cross-game coordination. Only titles assigned to a publisher can use this API. This operation is additive. If a Key does not exist in the current dataset, it will be added with the specified Value. If it already exists, the Value for that key will be overwritten with the new Value. For more information email helloplayfab@microsoft.com See also PlayFabServerGetPublisherDataAsync"
    },
    "PlayFabServerSetTitleDataAsync": {
        "summary": "TODO REVIEW: Updates the key-value store of custom title settings",
        "remarks": "This API is designed to store title specific values which can be read, but not written to, by the client. For example, a developer could choose to store values which modify the user experience, such as enemy spawn rates, weapon strengths, movement speeds, etc. This allows a developer to update the title without the need to create, test, and ship a new build. This operation is additive. If a Key does not exist in the current dataset, it will be added with the specified Value. If it already exists, the Value for that key will be overwritten with the new Value. See also PlayFabServerGetTitleDataAsync"
    },
    "PlayFabServerSetTitleInternalDataAsync": {
        "summary": "TODO REVIEW: Updates the key-value store of custom title settings",
        "remarks": "This API is designed to store title specific values which are accessible only to the server. This can be used to tweak settings on game servers and Cloud Scripts without needed to update and re-deploy them. This operation is additive. If a Key does not exist in the current dataset, it will be added with the specified Value. If it already exists, the Value for that key will be overwritten with the new Value. See also PlayFabServerGetTitleInternalDataAsync"
    },
    "PlayFabServerSubtractCharacterVirtualCurrencyAsync": {
        "summary": "TODO REVIEW: Decrements the character's balance of the specified virtual currency by the stated amount. It is possible to make a VC balance negative with this API.",
        "remarks": "See also PlayFabServerAddCharacterVirtualCurrencyAsync, PlayFabServerSubtractUserVirtualCurrencyAsync"
    },
    "PlayFabServerSubtractUserVirtualCurrencyAsync": {
        "summary": "TODO REVIEW: Decrements the user's balance of the specified virtual currency by the stated amount. It is possible to make a VC balance negative with this API.",
        "remarks": "See also PlayFabServerAddUserVirtualCurrencyAsync"
    },
    "PlayFabServerUnlinkPSNAccountAsync": {
        "summary": "TODO REVIEW: Unlinks the related PSN account from the user's PlayFab account",
        "remarks": "See also PlayFabServerLinkPSNAccountAsync"
    },
    "PlayFabServerUnlinkServerCustomIdAsync": {
        "summary": "TODO REVIEW: Unlinks the custom server identifier from the user's PlayFab account.",
        "remarks": "See also PlayFabServerLinkServerCustomIdAsync, PlayFabServerLoginWithServerCustomIdAsync"
    },
    "PlayFabServerUnlinkXboxAccountAsync": {
        "summary": "TODO REVIEW: Unlinks the related Xbox Live account from the user's PlayFab account",
        "remarks": "See also PlayFabServerLinkXboxAccountAsync"
    },
    "PlayFabServerUnlockContainerInstanceAsync": {
        "summary": "TODO REVIEW: Opens a specific container (ContainerItemInstanceId), with a specific key (KeyItemInstanceId, when required), and returns the contents of the opened container. If the container (and key when relevant) are consumable (RemainingUses > 0), their RemainingUses will be decremented, consistent with the operation of ConsumeItem.",
        "remarks": "Specify the container and optionally the catalogVersion for the container to open"
    },
    "PlayFabServerUnlockContainerItemAsync": {
        "summary": "TODO REVIEW: Searches Player or Character inventory for any ItemInstance matching the given CatalogItemId, if necessary unlocks it using any appropriate key, and returns the contents of the opened container. If the container (and key when relevant) are consumable (RemainingUses > 0), their RemainingUses will be decremented, consistent with the operation of ConsumeItem.",
        "remarks": "Specify the type of container to open and optionally the catalogVersion for the container to open"
    },
    "PlayFabServerUpdateAvatarUrlAsync": {
        "summary": "TODO REVIEW: Update the avatar URL of the specified player"
    },
    "PlayFabServerUpdateBansAsync": {
        "summary": "TODO REVIEW: Updates information of a list of existing bans specified with Ban Ids.",
        "remarks": "For each ban, only updates the values that are set. Leave any value to null for no change. If a ban could not be found, the rest are still applied. Returns information about applied updates only. See also PlayFabServerBanUsersAsync, PlayFabServerGetUserBansAsync, PlayFabServerRevokeAllBansForUserAsync, PlayFabServerRevokeBansAsync"
    },
    "PlayFabServerUpdateCharacterDataAsync": {
        "summary": "TODO REVIEW: Updates the title-specific custom data for the user's character which is readable and writable by the client",
        "remarks": "This function performs an additive update of the arbitrary JSON object containing the custom data for the user. In updating the custom data object, keys which already exist in the object will have their values overwritten, while keys with null values will be removed. No other key-value pairs will be changed apart from those specified in the call. See also PlayFabServerGetCharacterDataAsync, PlayFabServerUpdateCharacterInternalDataAsync, PlayFabServerUpdateCharacterReadOnlyDataAsync, PlayFabServerUpdateUserDataAsync"
    },
    "PlayFabServerUpdateCharacterInternalDataAsync": {
        "summary": "TODO REVIEW: Updates the title-specific custom data for the user's character which cannot be accessed by the client",
        "remarks": "This function performs an additive update of the arbitrary JSON object containing the custom data for the user. In updating the custom data object, keys which already exist in the object will have their values overwritten, keys with null values will be removed. No other key-value pairs will be changed apart from those specified in the call. See also PlayFabServerGetCharacterInternalDataAsync, PlayFabServerUpdateCharacterDataAsync, PlayFabServerUpdateCharacterReadOnlyDataAsync, PlayFabServerUpdateUserInternalDataAsync"
    },
    "PlayFabServerUpdateCharacterReadOnlyDataAsync": {
        "summary": "TODO REVIEW: Updates the title-specific custom data for the user's character which can only be read by the client",
        "remarks": "This function performs an additive update of the arbitrary JSON object containing the custom data for the user. In updating the custom data object, keys which already exist in the object will have their values overwritten, keys with null values will be removed. No other key-value pairs will be changed apart from those specified in the call. See also PlayFabServerGetCharacterDataAsync, PlayFabServerGetCharacterInternalDataAsync, PlayFabServerGetCharacterReadOnlyDataAsync, PlayFabServerGetUserReadOnlyDataAsync"
    },
    "PlayFabServerUpdateCharacterStatisticsAsync": {
        "summary": "TODO REVIEW: Updates the values of the specified title-specific statistics for the specific character",
        "remarks": "Character statistics are similar to user statistics in that they are numeric values which may only be updated by a server operation, in order to minimize the opportunity for unauthorized changes. In addition to being available for use by the title, the statistics are used for all leaderboard operations in PlayFab."
    },
    "PlayFabServerUpdatePlayerStatisticsAsync": {
        "summary": "TODO REVIEW: Updates the values of the specified title-specific statistics for the user",
        "remarks": "This operation is additive. Statistics not currently defined will be added, while those already defined will be updated with the given values. All other user statistics will remain unchanged. See also PlayFabAdminCreatePlayerStatisticDefinitionAsync, PlayFabServerGetPlayerStatisticsAsync, PlayFabAdminUpdatePlayerStatisticDefinitionAsync"
    },
    "PlayFabServerUpdateSharedGroupDataAsync": {
        "summary": "TODO REVIEW: Adds, updates, and removes data keys for a shared group object. If the permission is set to Public, all fields updated or added in this call will be readable by users not in the group. By default, data permissions are set to Private. Regardless of the permission setting, only members of the group (and the server) can update the data. Shared Groups are designed for sharing data between a very small number of players, please see our guide: https://docs.microsoft.com/gaming/playfab/features/social/groups/using-shared-group-data",
        "remarks": "Note that in the case of multiple calls to write to the same shared group data keys, the last write received by the PlayFab service will determine the value available to subsequent read operations. For scenarios requiring coordination of data updates, it is recommended that titles make use of user data with read permission set to public, or a combination of user data and shared group data."
    },
    "PlayFabServerUpdateUserDataAsync": {
        "summary": "TODO REVIEW: Updates the title-specific custom data for the user which is readable and writable by the client",
        "remarks": "This function performs an additive update of the arbitrary JSON object containing the custom data for the user. In updating the custom data object, keys which already exist in the object will have their values overwritten, while keys with null values will be removed. No other key-value pairs will be changed apart from those specified in the call. See also PlayFabServerGetUserDataAsync, PlayFabServerGetUserInternalDataAsync, PlayFabServerGetUserReadOnlyDataAsync, PlayFabServerUpdateUserInternalDataAsync, PlayFabServerUpdateUserReadOnlyDataAsync"
    },
    "PlayFabServerUpdateUserInternalDataAsync": {
        "summary": "TODO REVIEW: Updates the title-specific custom data for the user which cannot be accessed by the client",
        "remarks": "This function performs an additive update of the arbitrary JSON object containing the custom data for the user. In updating the custom data object, keys which already exist in the object will have their values overwritten, keys with null values will be removed. No other key-value pairs will be changed apart from those specified in the call. See also PlayFabServerGetUserDataAsync, PlayFabServerGetUserInternalDataAsync, PlayFabServerGetUserReadOnlyDataAsync, PlayFabServerUpdateUserDataAsync, PlayFabServerUpdateUserReadOnlyDataAsync"
    },
    "PlayFabServerUpdateUserInventoryItemCustomDataAsync": {
        "summary": "TODO REVIEW: Updates the key-value pair data tagged to the specified item, which is read-only from the client.",
        "remarks": "This function performs an additive update of the arbitrary JSON object containing the custom data for the item instance which belongs to the specified user. In updating the custom data object, keys which already exist in the object will have their values overwritten, while keys with null values will be removed. No other key-value pairs will be changed apart from those specified in the call. See also PlayFabServerGetUserInventoryAsync, PlayFabServerUpdateUserInternalDataAsync"
    },
    "PlayFabServerUpdateUserPublisherDataAsync": {
        "summary": "TODO REVIEW: Updates the publisher-specific custom data for the user which is readable and writable by the client",
        "remarks": "This function performs an additive update of the arbitrary JSON object containing the custom data for the user. In updating the custom data object, keys which already exist in the object will have their values overwritten, while keys with null values will be removed. No other key-value pairs will be changed apart from those specified in the call. See also PlayFabServerGetUserPublisherDataAsync, PlayFabServerGetUserPublisherInternalDataAsync, PlayFabServerGetUserPublisherReadOnlyDataAsync, PlayFabServerUpdateUserPublisherInternalDataAsync, PlayFabServerUpdateUserPublisherReadOnlyDataAsync"
    },
    "PlayFabServerUpdateUserPublisherInternalDataAsync": {
        "summary": "TODO REVIEW: Updates the publisher-specific custom data for the user which cannot be accessed by the client",
        "remarks": "This function performs an additive update of the arbitrary JSON object containing the custom data for the user. In updating the custom data object, keys which already exist in the object will have their values overwritten, keys with null values will be removed. No other key-value pairs will be changed apart from those specified in the call. See also PlayFabServerGetUserPublisherDataAsync, PlayFabServerGetUserPublisherInternalDataAsync, PlayFabServerGetUserPublisherReadOnlyDataAsync, PlayFabServerUpdateUserPublisherDataAsync, PlayFabServerUpdateUserPublisherReadOnlyDataAsync"
    },
    "PlayFabServerUpdateUserPublisherReadOnlyDataAsync": {
        "summary": "TODO REVIEW: Updates the publisher-specific custom data for the user which can only be read by the client",
        "remarks": "This function performs an additive update of the arbitrary JSON object containing the custom data for the user. In updating the custom data object, keys which already exist in the object will have their values overwritten, keys with null values will be removed. No other key-value pairs will be changed apart from those specified in the call. See also PlayFabServerGetUserPublisherDataAsync, PlayFabServerGetUserPublisherInternalDataAsync, PlayFabServerGetUserPublisherReadOnlyDataAsync, PlayFabServerUpdateUserPublisherDataAsync, PlayFabServerUpdateUserPublisherInternalDataAsync"
    },
    "PlayFabServerUpdateUserReadOnlyDataAsync": {
        "summary": "TODO REVIEW: Updates the title-specific custom data for the user which can only be read by the client",
        "remarks": "This function performs an additive update of the arbitrary JSON object containing the custom data for the user. In updating the custom data object, keys which already exist in the object will have their values overwritten, keys with null values will be removed. No other key-value pairs will be changed apart from those specified in the call. See also PlayFabServerGetUserDataAsync, PlayFabServerGetUserInternalDataAsync, PlayFabServerGetUserReadOnlyDataAsync, PlayFabServerUpdateUserDataAsync, PlayFabServerUpdateUserInternalDataAsync"
    },
    "PlayFabServerWriteCharacterEventAsync": {
        "summary": "TODO REVIEW: Writes a character-based event into PlayStream.",
        "remarks": "This API is designed to write a multitude of different event types into PlayStream. It supports a flexible JSON schema, which allowsfor arbitrary key-value pairs to describe any character-based event. The created event will be locked to the authenticated title. "
    },
    "PlayFabServerWritePlayerEventAsync": {
        "summary": "TODO REVIEW: Writes a player-based event into PlayStream.",
        "remarks": "This API is designed to write a multitude of different event types into PlayStream. It supports a flexible JSON schema, which allowsfor arbitrary key-value pairs to describe any player-based event. The created event will be locked to the authenticated title. "
    },
    "PlayFabServerWriteTitleEventAsync": {
        "summary": "TODO REVIEW: Writes a title-based event into PlayStream.",
        "remarks": "This API is designed to write a multitude of different event types into PlayStream. It supports a flexible JSON schema, which allowsfor arbitrary key-value pairs to describe any title-based event. The created event will be locked to the authenticated title. "
    },
    "PlayFabAuthenticationValidateEntityTokenAsync": {
        "summary": "TODO REVIEW: Method for a server to validate a client provided EntityToken. Only callable by the title entity.",
        "remarks": "Given an entity token, validates that it hasn't expired or been revoked and will return details of the owner."
    },
    "PlayFabCloudScriptExecuteEntityCloudScriptAsync": {
        "summary": "TODO REVIEW: Cloud Script is one of PlayFab's most versatile features. It allows client code to request execution of any kind of custom server-side functionality you can implement, and it can be used in conjunction with virtually anything.",
        "remarks": "Executes CloudScript with the entity profile that is defined in the request."
    },
    "PlayFabCloudScriptExecuteFunctionAsync": {
        "summary": "TODO REVIEW: Cloud Script is one of PlayFab's most versatile features. It allows client code to request execution of any kind of custom server-side functionality you can implement, and it can be used in conjunction with virtually anything.",
        "remarks": "Executes an Azure Function with the profile of the entity that is defined in the request. See also PlayFabCloudScriptRegisterHttpFunctionAsync, PlayFabCloudScriptRegisterQueuedFunctionAsync"
    },
    "PlayFabCloudScriptListFunctionsAsync": {
        "summary": "TODO REVIEW: Lists all currently registered Azure Functions for a given title.",
        "remarks": "See also PlayFabCloudScriptListHttpFunctionsAsync, PlayFabCloudScriptListQueuedFunctionsAsync, PlayFabCloudScriptRegisterHttpFunctionAsync, PlayFabCloudScriptRegisterQueuedFunctionAsync"
    },
    "PlayFabCloudScriptListHttpFunctionsAsync": {
        "summary": "TODO REVIEW: Lists all currently registered HTTP triggered Azure Functions for a given title.",
        "remarks": "A title can have many functions, ListHttpFunctions will return a list of all the currently registered HTTP triggered functions for a given title. See also PlayFabCloudScriptListFunctionsAsync, PlayFabCloudScriptListQueuedFunctionsAsync, PlayFabCloudScriptRegisterHttpFunctionAsync"
    },
    "PlayFabCloudScriptListQueuedFunctionsAsync": {
        "summary": "TODO REVIEW: Lists all currently registered Queue triggered Azure Functions for a given title.",
        "remarks": "See also PlayFabCloudScriptListFunctionsAsync, PlayFabCloudScriptListHttpFunctionsAsync, PlayFabCloudScriptRegisterQueuedFunctionAsync"
    },
    "PlayFabCloudScriptPostFunctionResultForEntityTriggeredActionAsync": {
        "summary": "TODO REVIEW: Generate an entity PlayStream event for the provided function result.",
        "remarks": "See also PlayFabCloudScriptPostFunctionResultForFunctionExecutionAsync, PlayFabCloudScriptPostFunctionResultForPlayerTriggeredActionAsync, PlayFabCloudScriptPostFunctionResultForScheduledTaskAsync"
    },
    "PlayFabCloudScriptPostFunctionResultForFunctionExecutionAsync": {
        "summary": "TODO REVIEW: Generate an entity PlayStream event for the provided function result.",
        "remarks": "See also PlayFabCloudScriptPostFunctionResultForEntityTriggeredActionAsync, PlayFabCloudScriptPostFunctionResultForPlayerTriggeredActionAsync, PlayFabCloudScriptPostFunctionResultForScheduledTaskAsync"
    },
    "PlayFabCloudScriptPostFunctionResultForPlayerTriggeredActionAsync": {
        "summary": "TODO REVIEW: Generate a player PlayStream event for the provided function result.",
        "remarks": "See also PlayFabCloudScriptPostFunctionResultForEntityTriggeredActionAsync, PlayFabCloudScriptPostFunctionResultForFunctionExecutionAsync, PlayFabCloudScriptPostFunctionResultForScheduledTaskAsync"
    },
    "PlayFabCloudScriptPostFunctionResultForScheduledTaskAsync": {
        "summary": "TODO REVIEW: Generate a PlayStream event for the provided function result.",
        "remarks": "See also PlayFabCloudScriptPostFunctionResultForEntityTriggeredActionAsync, PlayFabCloudScriptPostFunctionResultForFunctionExecutionAsync, PlayFabCloudScriptPostFunctionResultForPlayerTriggeredActionAsync"
    },
    "PlayFabCloudScriptRegisterHttpFunctionAsync": {
        "summary": "TODO REVIEW: Registers an HTTP triggered Azure function with a title.",
        "remarks": "See also PlayFabCloudScriptExecuteFunctionAsync, PlayFabCloudScriptListFunctionsAsync, PlayFabCloudScriptListHttpFunctionsAsync, PlayFabCloudScriptRegisterQueuedFunctionAsync, PlayFabCloudScriptUnregisterFunctionAsync"
    },
    "PlayFabCloudScriptRegisterQueuedFunctionAsync": {
        "summary": "TODO REVIEW: Registers a queue triggered Azure Function with a title.",
        "remarks": "A title can have many functions, RegisterQueuedFunction associates a function name with a queue name and connection string. See also PlayFabCloudScriptExecuteFunctionAsync, PlayFabCloudScriptListFunctionsAsync, PlayFabCloudScriptListQueuedFunctionsAsync, PlayFabCloudScriptPostFunctionResultForEntityTriggeredActionAsync, PlayFabCloudScriptPostFunctionResultForFunctionExecutionAsync, PlayFabCloudScriptPostFunctionResultForPlayerTriggeredActionAsync, PlayFabCloudScriptPostFunctionResultForScheduledTaskAsync, PlayFabCloudScriptRegisterHttpFunctionAsync, PlayFabCloudScriptUnregisterFunctionAsync"
    },
    "PlayFabCloudScriptUnregisterFunctionAsync": {
        "summary": "TODO REVIEW: Unregisters an Azure Function with a title.",
        "remarks": "See also PlayFabCloudScriptRegisterHttpFunctionAsync, PlayFabCloudScriptRegisterQueuedFunctionAsync"
    },
    "PlayFabDataAbortFileUploadsAsync": {
        "summary": "TODO REVIEW: Abort pending file uploads to an entity's profile.",
        "remarks": "Aborts the pending upload of the requested files. See also PlayFabFileDeleteFilesAsync, PlayFabFileFinalizeFileUploadsAsync, PlayFabFileGetFilesAsync, PlayFabFileInitiateFileUploadsAsync"
    },
    "PlayFabDataDeleteFilesAsync": {
        "summary": "TODO REVIEW: Delete files on an entity's profile.",
        "remarks": "Deletes the requested files from the entity's profile. See also PlayFabFileAbortFileUploadsAsync, PlayFabFileFinalizeFileUploadsAsync, PlayFabFileGetFilesAsync, PlayFabFileInitiateFileUploadsAsync"
    },
    "PlayFabDataFinalizeFileUploadsAsync": {
        "summary": "TODO REVIEW: Finalize file uploads to an entity's profile.",
        "remarks": "Finalizes the upload of the requested files. Verifies that the files have been successfully uploaded and moves the file pointers from pending to live. See also PlayFabFileAbortFileUploadsAsync, PlayFabFileDeleteFilesAsync, PlayFabFileGetFilesAsync, PlayFabFileInitiateFileUploadsAsync"
    },
    "PlayFabDataGetFilesAsync": {
        "summary": "TODO REVIEW: Retrieves file metadata from an entity's profile.",
        "remarks": "Returns URLs that may be used to download the files for a profile for a limited length of time. Only returns files that have been successfully uploaded, files that are still pending will either return the old value, if it exists, or nothing. See also PlayFabFileAbortFileUploadsAsync, PlayFabFileDeleteFilesAsync, PlayFabFileFinalizeFileUploadsAsync, PlayFabFileInitiateFileUploadsAsync"
    },
    "PlayFabDataGetObjectsAsync": {
        "summary": "TODO REVIEW: Retrieves objects from an entity's profile.",
        "remarks": "Gets JSON objects from an entity profile and returns it.  See also PlayFabObjectSetObjectsAsync"
    },
    "PlayFabDataInitiateFileUploadsAsync": {
        "summary": "TODO REVIEW: Initiates file uploads to an entity's profile.",
        "remarks": "Returns URLs that may be used to upload the files for a profile 5 minutes. After using the upload calls FinalizeFileUploads must be called to move the file status from pending to live. See also PlayFabFileAbortFileUploadsAsync, PlayFabFileDeleteFilesAsync, PlayFabFileFinalizeFileUploadsAsync, PlayFabFileGetFilesAsync"
    },
    "PlayFabDataSetObjectsAsync": {
        "summary": "TODO REVIEW: Sets objects on an entity's profile.",
        "remarks": "Sets JSON objects on the requested entity profile. May include a version number to be used to perform optimistic concurrency operations during update. If the current version differs from the version in the request the request will be ignored. If no version is set on the request then the value will always be updated if the values differ. Using the version value does not guarantee a write though, ConcurrentEditError may still occur if multiple clients are attempting to update the same profile.  See also PlayFabObjectGetObjectsAsync"
    },
    "PlayFabEventsWriteEventsAsync": {
        "summary": "TODO REVIEW: Write batches of entity based events to PlayStream. The namespace of the Event must be 'custom' or start with 'custom.'."
    },
    "PlayFabEventsWriteTelemetryEventsAsync": {
        "summary": "TODO REVIEW: Write batches of entity based events to as Telemetry events (bypass PlayStream). The namespace must be 'custom' or start with 'custom.'"
    },
    "PlayFabExperimentationCreateExclusionGroupAsync": {
        "summary": "TODO REVIEW: Creates a new experiment exclusion group for a title."
    },
    "PlayFabExperimentationCreateExperimentAsync": {
        "summary": "TODO REVIEW: Creates a new experiment for a title."
    },
    "PlayFabExperimentationDeleteExclusionGroupAsync": {
        "summary": "TODO REVIEW: Deletes an existing exclusion group for a title."
    },
    "PlayFabExperimentationDeleteExperimentAsync": {
        "summary": "TODO REVIEW: Deletes an existing experiment for a title."
    },
    "PlayFabExperimentationGetExclusionGroupsAsync": {
        "summary": "TODO REVIEW: Gets the details of all exclusion groups for a title."
    },
    "PlayFabExperimentationGetExclusionGroupTrafficAsync": {
        "summary": "TODO REVIEW: Gets the details of all exclusion groups for a title."
    },
    "PlayFabExperimentationGetExperimentsAsync": {
        "summary": "TODO REVIEW: Gets the details of all experiments for a title."
    },
    "PlayFabExperimentationGetLatestScorecardAsync": {
        "summary": "TODO REVIEW: Gets the latest scorecard of the experiment for the title."
    },
    "PlayFabExperimentationGetTreatmentAssignmentAsync": {
        "summary": "TODO REVIEW: Gets the treatment assignments for a player for every running experiment in the title."
    },
    "PlayFabExperimentationStartExperimentAsync": {
        "summary": "TODO REVIEW: Starts an existing experiment for a title."
    },
    "PlayFabExperimentationStopExperimentAsync": {
        "summary": "TODO REVIEW: Stops an existing experiment for a title."
    },
    "PlayFabExperimentationUpdateExclusionGroupAsync": {
        "summary": "TODO REVIEW: Updates an existing exclusion group for a title."
    },
    "PlayFabExperimentationUpdateExperimentAsync": {
        "summary": "TODO REVIEW: Updates an existing experiment for a title."
    },
    "PlayFabInsightsGetDetailsAsync": {
        "summary": "TODO REVIEW: Gets the current values for the Insights performance and data storage retention, list of pending operations, and the performance and data storage retention limits."
    },
    "PlayFabInsightsGetLimitsAsync": {
        "summary": "TODO REVIEW: Retrieves the range of allowed values for performance and data storage retention values as well as the submeter details for each performance level."
    },
    "PlayFabInsightsGetOperationStatusAsync": {
        "summary": "TODO REVIEW: Gets the status of a SetPerformance or SetStorageRetention operation."
    },
    "PlayFabInsightsGetPendingOperationsAsync": {
        "summary": "TODO REVIEW: Gets a list of pending SetPerformance and/or SetStorageRetention operations for the title."
    },
    "PlayFabInsightsSetPerformanceAsync": {
        "summary": "TODO REVIEW: Sets the Insights performance level value for the title."
    },
    "PlayFabInsightsSetStorageRetentionAsync": {
        "summary": "TODO REVIEW: Sets the Insights data storage retention days value for the title."
    },
    "PlayFabGroupsAcceptGroupApplicationAsync": {
        "summary": "TODO REVIEW: Accepts an outstanding invitation to to join a group",
        "remarks": "Accepts an outstanding invitation to to join a group if the invited entity is not blocked by the group. Nothing is returned in the case of success. See also PlayFabGroupApplyToGroupAsync, PlayFabGroupListGroupApplicationsAsync, PlayFabGroupRemoveGroupApplicationAsync"
    },
    "PlayFabGroupsAcceptGroupInvitationAsync": {
        "summary": "TODO REVIEW: Accepts an invitation to join a group",
        "remarks": "Accepts an outstanding invitation to join the group if the invited entity is not blocked by the group. Only the invited entity or a parent in its chain (e.g. title) may accept the invitation on the invited entity's behalf. Nothing is returned in the case of success. See also PlayFabGroupInviteToGroupAsync, PlayFabGroupListGroupInvitationsAsync, PlayFabGroupListMembershipOpportunitiesAsync, PlayFabGroupRemoveGroupInvitationAsync"
    },
    "PlayFabGroupsAddMembersAsync": {
        "summary": "TODO REVIEW: Adds members to a group or role.",
        "remarks": "Adds members to a group or role. Existing members of the group will added to roles within the group, but if the user is not already a member of the group, only title claimants may add them to the group, and others must use the group application or invite system to add new members to a group. Returns nothing if successful. See also PlayFabGroupApplyToGroupAsync, PlayFabGroupInviteToGroupAsync, PlayFabGroupListGroupMembersAsync, PlayFabGroupRemoveMembersAsync"
    },
    "PlayFabGroupsApplyToGroupAsync": {
        "summary": "TODO REVIEW: Applies to join a group",
        "remarks": "Creates an application to join a group. Calling this while a group application already exists will return the same application instead of an error and will not refresh the time before the application expires. By default, if the entity has an invitation to join the group outstanding, this will accept the invitation to join the group instead and return an error indicating such, rather than creating a duplicate application to join that will need to be cleaned up later. Returns information about the application or an error indicating an invitation was accepted instead. See also PlayFabGroupAcceptGroupApplicationAsync, PlayFabGroupListGroupApplicationsAsync, PlayFabGroupRemoveGroupApplicationAsync"
    },
    "PlayFabGroupsBlockEntityAsync": {
        "summary": "TODO REVIEW: Blocks a list of entities from joining a group.",
        "remarks": "Blocks a list of entities from joining a group. Blocked entities may not create new applications to join, be invited to join, accept an invitation, or have an application accepted. Failure due to being blocked does not clean up existing applications or invitations to the group. No data is returned in the case of success. See also PlayFabGroupListGroupBlocksAsync, PlayFabGroupUnblockEntityAsync"
    },
    "PlayFabGroupsChangeMemberRoleAsync": {
        "summary": "TODO REVIEW: Changes the role membership of a list of entities from one role to another.",
        "remarks": "Changes the role membership of a list of entities from one role to another in in a single operation. The destination role must already exist. This is equivalent to adding the entities to the destination role and removing from the origin role. Returns nothing if successful. See also PlayFabGroupAddMembersAsync, PlayFabGroupCreateRoleAsync, PlayFabGroupRemoveMembersAsync"
    },
    "PlayFabGroupsCreateGroupAsync": {
        "summary": "TODO REVIEW: Creates a new group.",
        "remarks": "Creates a new group, as well as administration and member roles, based off of a title's group template. Returns information about the group that was created. See also PlayFabGroupAddMembersAsync, PlayFabGroupApplyToGroupAsync, PlayFabGroupDeleteGroupAsync, PlayFabGroupInviteToGroupAsync, PlayFabGroupListGroupMembersAsync, PlayFabGroupRemoveMembersAsync"
    },
    "PlayFabGroupsCreateRoleAsync": {
        "summary": "TODO REVIEW: Creates a new group role.",
        "remarks": "Creates a new role within an existing group, with no members. Both the role ID and role name must be unique within the group, but the name can be the same as the ID. The role ID is set at creation and cannot be changed. Returns information about the role that was created. See also PlayFabGroupDeleteRoleAsync"
    },
    "PlayFabGroupsDeleteGroupAsync": {
        "summary": "TODO REVIEW: Deletes a group and all roles, invitations, join requests, and blocks associated with it.",
        "remarks": "Deletes a group and all roles, invitations, join requests, and blocks associated with it. Permission to delete is only required the group itself to execute this action. The group and data cannot be cannot be recovered once removed, but any abuse reports about the group will remain. No data is returned in the case of success. See also PlayFabGroupCreateGroupAsync"
    },
    "PlayFabGroupsDeleteRoleAsync": {
        "summary": "TODO REVIEW: Deletes an existing role in a group.",
        "remarks": "Returns information about the role See also PlayFabGroupCreateRoleAsync"
    },
    "PlayFabGroupsGetGroupAsync": {
        "summary": "TODO REVIEW: Gets information about a group and its roles",
        "remarks": "Returns the ID, name, role list and other non-membership related information about a group. See also PlayFabGroupUpdateGroupAsync"
    },
    "PlayFabGroupsInviteToGroupAsync": {
        "summary": "TODO REVIEW: Invites a player to join a group",
        "remarks": "Invites a player to join a group, if they are not blocked by the group. An optional role can be provided to automatically assign the player to the role if they accept the invitation. By default, if the entity has an application to the group outstanding, this will accept the application instead and return an error indicating such, rather than creating a duplicate invitation to join that will need to be cleaned up later. Returns information about the new invitation or an error indicating an existing application to join was accepted. See also PlayFabGroupAcceptGroupInvitationAsync, PlayFabGroupListGroupInvitationsAsync, PlayFabGroupListMembershipOpportunitiesAsync, PlayFabGroupRemoveGroupInvitationAsync"
    },
    "PlayFabGroupsIsMemberAsync": {
        "summary": "TODO REVIEW: Checks to see if an entity is a member of a group or role within the group",
        "remarks": "Checks to see if an entity is a member of a group or role within the group. A result indicating if the entity is a member of the group is returned, or a permission error if the caller does not have permission to read the group's member list. See also PlayFabGroupGetGroupAsync"
    },
    "PlayFabGroupsListGroupApplicationsAsync": {
        "summary": "TODO REVIEW: Lists all outstanding requests to join a group",
        "remarks": "Lists all outstanding requests to join a group. Returns a list of all requests to join, as well as when the request will expire. To get the group applications for a specific entity, use ListMembershipOpportunities. See also PlayFabGroupAcceptGroupApplicationAsync, PlayFabGroupApplyToGroupAsync, PlayFabGroupRemoveGroupApplicationAsync"
    },
    "PlayFabGroupsListGroupBlocksAsync": {
        "summary": "TODO REVIEW: Lists all entities blocked from joining a group",
        "remarks": "Lists all entities blocked from joining a group. A list of blocked entities is returned See also PlayFabGroupBlockEntityAsync, PlayFabGroupUnblockEntityAsync"
    },
    "PlayFabGroupsListGroupInvitationsAsync": {
        "summary": "TODO REVIEW: Lists all outstanding invitations for a group",
        "remarks": "Lists all outstanding invitations for a group. Returns a list of entities that have been invited, as well as when the invitation will expire. To get the group invitations for a specific entity, use ListMembershipOpportunities. See also PlayFabGroupAcceptGroupInvitationAsync, PlayFabGroupInviteToGroupAsync, PlayFabGroupListMembershipOpportunitiesAsync, PlayFabGroupRemoveGroupInvitationAsync"
    },
    "PlayFabGroupsListGroupMembersAsync": {
        "summary": "TODO REVIEW: Lists all members for a group",
        "remarks": "Gets a list of members and the roles they belong to within the group. If the caller does not have permission to view the role, and the member is in no other role, the member is not displayed. Returns a list of entities that are members of the group. See also PlayFabGroupListMembershipAsync"
    },
    "PlayFabGroupsListMembershipAsync": {
        "summary": "TODO REVIEW: Lists all groups and roles for an entity",
        "remarks": "Lists the groups and roles that an entity is a part of, checking to see if group and role metadata and memberships should be visible to the caller. If the entity is not in any roles that are visible to the caller, the group is not returned in the results, even if the caller otherwise has permission to see that the entity is a member of that group. See also PlayFabGroupListGroupMembersAsync, PlayFabGroupListMembershipOpportunitiesAsync"
    },
    "PlayFabGroupsListMembershipOpportunitiesAsync": {
        "summary": "TODO REVIEW: Lists all outstanding invitations and group applications for an entity",
        "remarks": "Lists all outstanding group applications and invitations for an entity. Anyone may call this for any entity, but data will only be returned for the entity or a parent of that entity. To list invitations or applications for a group to check if a player is trying to join, use ListGroupInvitations and ListGroupApplications. See also PlayFabGroupListGroupApplicationsAsync, PlayFabGroupListGroupInvitationsAsync"
    },
    "PlayFabGroupsRemoveGroupApplicationAsync": {
        "summary": "TODO REVIEW: Removes an application to join a group",
        "remarks": "Removes an existing application to join the group. This is used for both rejection of an application as well as withdrawing an application. The applying entity or a parent in its chain (e.g. title) may withdraw the application, and any caller with appropriate access in the group may reject an application. No data is returned in the case of success. See also PlayFabGroupAcceptGroupApplicationAsync, PlayFabGroupApplyToGroupAsync, PlayFabGroupListGroupApplicationsAsync"
    },
    "PlayFabGroupsRemoveGroupInvitationAsync": {
        "summary": "TODO REVIEW: Removes an invitation join a group",
        "remarks": "Removes an existing invitation to join the group. This is used for both rejection of an invitation as well as rescinding an invitation. The invited entity or a parent in its chain (e.g. title) may reject the invitation by calling this method, and any caller with appropriate access in the group may rescind an invitation. No data is returned in the case of success. See also PlayFabGroupAcceptGroupInvitationAsync, PlayFabGroupInviteToGroupAsync, PlayFabGroupListGroupInvitationsAsync, PlayFabGroupListMembershipOpportunitiesAsync"
    },
    "PlayFabGroupsRemoveMembersAsync": {
        "summary": "TODO REVIEW: Removes members from a group.",
        "remarks": "Removes members from a group. A member can always remove themselves from a group, regardless of permissions. Returns nothing if successful. See also PlayFabGroupAddMembersAsync, PlayFabGroupListGroupMembersAsync"
    },
    "PlayFabGroupsUnblockEntityAsync": {
        "summary": "TODO REVIEW: Unblocks a list of entities from joining a group",
        "remarks": "Unblocks a list of entities from joining a group. No data is returned in the case of success. See also PlayFabGroupBlockEntityAsync, PlayFabGroupListGroupBlocksAsync"
    },
    "PlayFabGroupsUpdateGroupAsync": {
        "summary": "TODO REVIEW: Updates non-membership data about a group.",
        "remarks": "Updates data about a group, such as the name or default member role. Returns information about whether the update was successful. Only title claimants may modify the administration role for a group. See also PlayFabGroupCreateGroupAsync, PlayFabGroupDeleteGroupAsync, PlayFabGroupGetGroupAsync"
    },
    "PlayFabGroupsUpdateRoleAsync": {
        "summary": "TODO REVIEW: Updates metadata about a role.",
        "remarks": "Updates the role name. Returns information about whether the update was successful. See also PlayFabGroupCreateRoleAsync, PlayFabGroupDeleteRoleAsync"
    },
    "PlayFabLocalizationGetLanguageListAsync": {
        "summary": "TODO REVIEW: Retrieves the list of allowed languages, only accessible by title entities"
    },
    "PlayFabMultiplayerCancelAllMatchmakingTicketsForPlayerAsync": {
        "summary": "TODO REVIEW: Cancel all active tickets the player is a member of in a given queue.",
        "remarks": "Cancels all tickets of which the player is a member in a given queue that are not cancelled or matched. This API is useful if you lose track of what tickets the player is a member of (if the title crashes for instance) and want to 'reset'. The Entity field is optional if the caller is a player and defaults to that player. Players may not cancel tickets for other people. The Entity field is required if the caller is a server (authenticated as the title)."
    },
    "PlayFabMultiplayerCancelAllServerBackfillTicketsForPlayerAsync": {
        "summary": "TODO REVIEW: Cancel all active backfill tickets the player is a member of in a given queue.",
        "remarks": "Cancels all backfill tickets of which the player is a member in a given queue that are not cancelled or matched. This API is useful if you lose track of what tickets the player is a member of (if the server crashes for instance) and want to 'reset'."
    },
    "PlayFabMultiplayerCancelMatchmakingTicketAsync": {
        "summary": "TODO REVIEW: Cancel a matchmaking ticket.",
        "remarks": "Only servers and ticket members can cancel a ticket. The ticket can be in five different states when it is cancelled. 1: the ticket is waiting for members to join it, and it has not started matching. If the ticket is cancelled at this stage, it will never match. 2: the ticket is matching. If the ticket is cancelled, it will stop matching. 3: the ticket is matched. A matched ticket cannot be cancelled. 4: the ticket is already cancelled and nothing happens. 5: the ticket is waiting for a server. If the ticket is cancelled, server allocation will be stopped. A server may still be allocated due to a race condition, but that will not be reflected in the ticket. There may be race conditions between the ticket getting matched and the client making a cancellation request. The client must handle the possibility that the cancel request fails if a match is found before the cancellation request is processed. We do not allow resubmitting a cancelled ticket because players must consent to enter matchmaking again. Create a new ticket instead."
    },
    "PlayFabMultiplayerCancelServerBackfillTicketAsync": {
        "summary": "TODO REVIEW: Cancel a server backfill ticket.",
        "remarks": "Only servers can cancel a backfill ticket. The ticket can be in three different states when it is cancelled. 1: the ticket is matching. If the ticket is cancelled, it will stop matching. 2: the ticket is matched. A matched ticket cannot be cancelled. 3: the ticket is already cancelled and nothing happens. There may be race conditions between the ticket getting matched and the server making a cancellation request. The server must handle the possibility that the cancel request fails if a match is found before the cancellation request is processed. We do not allow resubmitting a cancelled ticket. Create a new ticket instead."
    },
    "PlayFabMultiplayerCreateBuildAliasAsync": {
        "summary": "TODO REVIEW: Creates a multiplayer server build alias.",
        "remarks": "Creates a multiplayer server build alias and returns the created alias. See also PlayFabMultiplayerServerDeleteBuildAliasAsync, PlayFabMultiplayerServerGetBuildAliasAsync, PlayFabMultiplayerServerUpdateBuildAliasAsync"
    },
    "PlayFabMultiplayerCreateBuildWithCustomContainerAsync": {
        "summary": "TODO REVIEW: Creates a multiplayer server build with a custom container.",
        "remarks": "Creates a multiplayer server build with a custom container and returns information about the build creation request. See also PlayFabMultiplayerServerCreateBuildWithManagedContainerAsync, PlayFabMultiplayerServerDeleteBuildAsync, PlayFabMultiplayerServerGetBuildAsync, PlayFabMultiplayerServerListBuildSummariesV2Async"
    },
    "PlayFabMultiplayerCreateBuildWithManagedContainerAsync": {
        "summary": "TODO REVIEW: Creates a multiplayer server build with a managed container.",
        "remarks": "Creates a multiplayer server build with a managed container and returns information about the build creation request. See also PlayFabMultiplayerServerDeleteBuildAsync, PlayFabMultiplayerServerGetBuildAsync, PlayFabMultiplayerServerListBuildSummariesV2Async"
    },
    "PlayFabMultiplayerCreateBuildWithProcessBasedServerAsync": {
        "summary": "TODO REVIEW: Creates a multiplayer server build with the server running as a process.",
        "remarks": "Creates a multiplayer server build with the game server running as a process and returns information about the build creation request. See also PlayFabMultiplayerServerCreateBuildWithManagedContainerAsync, PlayFabMultiplayerServerDeleteBuildAsync, PlayFabMultiplayerServerGetBuildAsync, PlayFabMultiplayerServerListBuildSummariesV2Async"
    },
    "PlayFabMultiplayerCreateMatchmakingTicketAsync": {
        "summary": "TODO REVIEW: Create a matchmaking ticket as a client.",
        "remarks": "The client specifies the creator's attributes and optionally a list of other users to match with."
    },
    "PlayFabMultiplayerCreateRemoteUserAsync": {
        "summary": "TODO REVIEW: Creates a remote user to log on to a VM for a multiplayer server build.",
        "remarks": "Creates a remote user to log on to a VM for a multiplayer server build in a specific region. Returns user credential information necessary to log on. See also PlayFabMultiplayerServerDeleteRemoteUserAsync, PlayFabMultiplayerServerGetRemoteLoginEndpointAsync"
    },
    "PlayFabMultiplayerCreateServerBackfillTicketAsync": {
        "summary": "TODO REVIEW: Create a backfill matchmaking ticket as a server. A backfill ticket represents an ongoing game. The matchmaking service automatically starts matching the backfill ticket against other matchmaking tickets. Backfill tickets cannot match with other backfill tickets.",
        "remarks": "The server specifies all the members, their teams and their attributes, and the server details if applicable."
    },
    "PlayFabMultiplayerCreateServerMatchmakingTicketAsync": {
        "summary": "TODO REVIEW: Create a matchmaking ticket as a server. The matchmaking service automatically starts matching the ticket against other matchmaking tickets.",
        "remarks": "The server specifies all the members and their attributes."
    },
    "PlayFabMultiplayerCreateTitleMultiplayerServersQuotaChangeAsync": {
        "summary": "TODO REVIEW: Creates a request to change a title's multiplayer server quotas.",
        "remarks": "Creates a request to change a title's multiplayer server quotas. See also PlayFabMultiplayerServerGetTitleMultiplayerServersQuotaChangeAsync, PlayFabMultiplayerServerListTitleMultiplayerServersQuotaChangesAsync"
    },
    "PlayFabMultiplayerDeleteAssetAsync": {
        "summary": "TODO REVIEW: Deletes a multiplayer server game asset for a title.",
        "remarks": "Deletes a multiplayer server game asset for a title. See also PlayFabMultiplayerServerGetAssetUploadUrlAsync, PlayFabMultiplayerServerListAssetSummariesAsync"
    },
    "PlayFabMultiplayerDeleteBuildAsync": {
        "summary": "TODO REVIEW: Deletes a multiplayer server build.",
        "remarks": "Deletes a multiplayer server build. See also PlayFabMultiplayerServerCreateBuildWithManagedContainerAsync, PlayFabMultiplayerServerGetBuildAsync, PlayFabMultiplayerServerListBuildSummariesV2Async"
    },
    "PlayFabMultiplayerDeleteBuildAliasAsync": {
        "summary": "TODO REVIEW: Deletes a multiplayer server build alias.",
        "remarks": "Deletes a multiplayer server build alias. See also PlayFabMultiplayerServerCreateBuildAliasAsync, PlayFabMultiplayerServerGetBuildAliasAsync, PlayFabMultiplayerServerUpdateBuildAliasAsync"
    },
    "PlayFabMultiplayerDeleteBuildRegionAsync": {
        "summary": "TODO REVIEW: Removes a multiplayer server build's region.",
        "remarks": "Removes a multiplayer server build's region. See also PlayFabMultiplayerServerDeleteBuildAsync, PlayFabMultiplayerServerGetBuildAsync, PlayFabMultiplayerServerListBuildSummariesV2Async, PlayFabMultiplayerServerUpdateBuildRegionAsync, PlayFabMultiplayerServerUpdateBuildRegionsAsync"
    },
    "PlayFabMultiplayerDeleteCertificateAsync": {
        "summary": "TODO REVIEW: Deletes a multiplayer server game certificate.",
        "remarks": "Deletes a multiplayer server game certificate. See also PlayFabMultiplayerServerListCertificateSummariesAsync, PlayFabMultiplayerServerUploadCertificateAsync"
    },
    "PlayFabMultiplayerDeleteContainerImageRepositoryAsync": {
        "summary": "TODO REVIEW: Deletes a container image repository.",
        "remarks": "Removes the specified container image repository. After this operation, a 'docker pull' will fail for all the tags of the specified image. Morever, ListContainerImages will not return the specified image. See also PlayFabMultiplayerServerListContainerImageTagsAsync"
    },
    "PlayFabMultiplayerDeleteRemoteUserAsync": {
        "summary": "TODO REVIEW: Deletes a remote user to log on to a VM for a multiplayer server build.",
        "remarks": "Deletes a remote user to log on to a VM for a multiplayer server build in a specific region. Returns user credential information necessary to log on. See also PlayFabMultiplayerServerCreateRemoteUserAsync, PlayFabMultiplayerServerGetRemoteLoginEndpointAsync"
    },
    "PlayFabMultiplayerEnableMultiplayerServersForTitleAsync": {
        "summary": "TODO REVIEW: Enables the multiplayer server feature for a title.",
        "remarks": "Enables the multiplayer server feature for a title and returns the enabled status. The enabled status can be Initializing, Enabled, and Disabled. It can up to 20 minutes or more for the title to be enabled for the feature. On average, it can take up to 20 minutes for the title to be enabled for the feature. See also PlayFabMultiplayerServerGetTitleEnabledForMultiplayerServersStatusAsync"
    },
    "PlayFabMultiplayerGetAssetDownloadUrlAsync": {
        "summary": "TODO REVIEW: Gets a URL that can be used to download the specified asset. A sample pre-authenticated url - https://sampleStorageAccount.blob.core.windows.net/gameassets/gameserver.zip?sv=2015-04-05&ss=b&srt=sco&sp=rw&st=<startDate>&se=<endDate>&spr=https&sig=<sampleSig>&api-version=2017-07-29",
        "remarks": "Gets a URL that can be used to download the specified asset. See also PlayFabMultiplayerServerGetAssetUploadUrlAsync, PlayFabMultiplayerServerListAssetSummariesAsync"
    },
    "PlayFabMultiplayerGetAssetUploadUrlAsync": {
        "summary": "TODO REVIEW: Gets the URL to upload assets to. A sample pre-authenticated url - https://sampleStorageAccount.blob.core.windows.net/gameassets/gameserver.zip?sv=2015-04-05&ss=b&srt=sco&sp=rw&st=<startDate>&se=<endDate>&spr=https&sig=<sampleSig>&api-version=2017-07-29",
        "remarks": "Gets the URL to upload assets to. See also PlayFabMultiplayerServerListAssetSummariesAsync, PlayFabMultiplayerServerListCertificateSummariesAsync, PlayFabMultiplayerServerUploadCertificateAsync"
    },
    "PlayFabMultiplayerGetBuildAsync": {
        "summary": "TODO REVIEW: Gets a multiplayer server build.",
        "remarks": "Returns the details about a multiplayer server build. See also PlayFabMultiplayerServerCreateBuildWithManagedContainerAsync, PlayFabMultiplayerServerDeleteBuildAsync, PlayFabMultiplayerServerListBuildSummariesV2Async"
    },
    "PlayFabMultiplayerGetBuildAliasAsync": {
        "summary": "TODO REVIEW: Gets a multiplayer server build alias.",
        "remarks": "Returns the details about a multiplayer server build alias. See also PlayFabMultiplayerServerCreateBuildAliasAsync, PlayFabMultiplayerServerDeleteBuildAliasAsync, PlayFabMultiplayerServerUpdateBuildAliasAsync"
    },
    "PlayFabMultiplayerGetContainerRegistryCredentialsAsync": {
        "summary": "TODO REVIEW: Gets the credentials to the container registry.",
        "remarks": "Gets credentials to the container registry where game developers can upload custom container images to before creating a new build. See also PlayFabMultiplayerServerCreateBuildWithCustomContainerAsync, PlayFabMultiplayerServerRolloverContainerRegistryCredentialsAsync"
    },
    "PlayFabMultiplayerGetMatchAsync": {
        "summary": "TODO REVIEW: Get a match.",
        "remarks": "When matchmaking has successfully matched together a collection of tickets, it produces a 'match' with an Id. The match contains all of the players that were matched together, and their team assigments. Only servers and ticket members can get the match."
    },
    "PlayFabMultiplayerGetMatchmakingTicketAsync": {
        "summary": "TODO REVIEW: Get a matchmaking ticket by ticket Id.",
        "remarks": "The ticket includes the invited players, their attributes if they have joined, the ticket status, the match Id when applicable, etc. Only servers, the ticket creator and the invited players can get the ticket."
    },
    "PlayFabMultiplayerGetMultiplayerServerDetailsAsync": {
        "summary": "TODO REVIEW: Gets multiplayer server session details for a build.",
        "remarks": "Gets multiplayer server session details for a build in a specific region. See also PlayFabMultiplayerServerRequestMultiplayerServerAsync"
    },
    "PlayFabMultiplayerGetMultiplayerServerLogsAsync": {
        "summary": "TODO REVIEW: Gets multiplayer server logs after a server has terminated.",
        "remarks": "Gets multiplayer server logs for a specific server id in a region. The logs are available only after a server has terminated. See also PlayFabMultiplayerServerGetMultiplayerServerDetailsAsync, PlayFabMultiplayerServerRequestMultiplayerServerAsync"
    },
    "PlayFabMultiplayerGetMultiplayerSessionLogsBySessionIdAsync": {
        "summary": "TODO REVIEW: Gets multiplayer server logs after a server has terminated.",
        "remarks": "Gets multiplayer server logs for a specific server id in a region. The logs are available only after a server has terminated. See also PlayFabMultiplayerServerGetMultiplayerServerDetailsAsync, PlayFabMultiplayerServerRequestMultiplayerServerAsync"
    },
    "PlayFabMultiplayerGetQueueStatisticsAsync": {
        "summary": "TODO REVIEW: Get the statistics for a queue.",
        "remarks": "Returns the matchmaking statistics for a queue. These include the number of players matching and the statistics related to the time to match statistics in seconds (average and percentiles). Statistics are refreshed once every 5 minutes. Servers can access all statistics no matter what the ClientStatisticsVisibility is configured to. Clients can access statistics according to the ClientStatisticsVisibility. Client requests are forbidden if all visibility fields are false."
    },
    "PlayFabMultiplayerGetRemoteLoginEndpointAsync": {
        "summary": "TODO REVIEW: Gets a remote login endpoint to a VM that is hosting a multiplayer server build.",
        "remarks": "Gets a remote login endpoint to a VM that is hosting a multiplayer server build in a specific region. See also PlayFabMultiplayerServerCreateRemoteUserAsync"
    },
    "PlayFabMultiplayerGetServerBackfillTicketAsync": {
        "summary": "TODO REVIEW: Get a matchmaking backfill ticket by ticket Id.",
        "remarks": "The ticket includes the players, their attributes, their teams, the ticket status, the match Id and the server details when applicable, etc. Only servers can get the ticket."
    },
    "PlayFabMultiplayerGetTitleEnabledForMultiplayerServersStatusAsync": {
        "summary": "TODO REVIEW: Gets the status of whether a title is enabled for the multiplayer server feature.",
        "remarks": "Gets the status of whether a title is enabled for the multiplayer server feature. The enabled status can be Initializing, Enabled, and Disabled. See also PlayFabMultiplayerServerEnableMultiplayerServersForTitleAsync"
    },
    "PlayFabMultiplayerGetTitleMultiplayerServersQuotaChangeAsync": {
        "summary": "TODO REVIEW: Gets a title's server quota change request.",
        "remarks": "Gets a title's server quota change request. See also PlayFabMultiplayerServerCreateTitleMultiplayerServersQuotaChangeAsync, PlayFabMultiplayerServerListTitleMultiplayerServersQuotaChangesAsync"
    },
    "PlayFabMultiplayerGetTitleMultiplayerServersQuotasAsync": {
        "summary": "TODO REVIEW: Gets the quotas for a title in relation to multiplayer servers.",
        "remarks": "Gets the quotas for a title in relation to multiplayer servers."
    },
    "PlayFabMultiplayerJoinMatchmakingTicketAsync": {
        "summary": "TODO REVIEW: Join a matchmaking ticket.",
        "remarks": "Add the player to a matchmaking ticket and specify all of its matchmaking attributes. Players can join a ticket if and only if their EntityKeys are already listed in the ticket's Members list. The matchmaking service automatically starts matching the ticket against other matchmaking tickets once all players have joined the ticket. It is not possible to join a ticket once it has started matching."
    },
    "PlayFabMultiplayerListArchivedMultiplayerServersAsync": {
        "summary": "TODO REVIEW: Lists archived multiplayer server sessions for a build.",
        "remarks": "Returns a list of archived multiplayer servers for a build in a specific region. See also PlayFabMultiplayerServerRequestMultiplayerServerAsync"
    },
    "PlayFabMultiplayerListAssetSummariesAsync": {
        "summary": "TODO REVIEW: Lists multiplayer server game assets for a title.",
        "remarks": "Returns a list of multiplayer server game asset summaries for a title. See also PlayFabMultiplayerServerGetAssetUploadUrlAsync, PlayFabMultiplayerServerListCertificateSummariesAsync, PlayFabMultiplayerServerUploadCertificateAsync"
    },
    "PlayFabMultiplayerListBuildAliasesAsync": {
        "summary": "TODO REVIEW: Lists details of all build aliases for a title. Accepts tokens for title and if game client access is enabled, allows game client to request list of builds with player entity token.",
        "remarks": "Returns a list of summarized details of all multiplayer server builds for a title. See also PlayFabMultiplayerServerCreateBuildWithManagedContainerAsync, PlayFabMultiplayerServerDeleteBuildAsync, PlayFabMultiplayerServerGetBuildAsync"
    },
    "PlayFabMultiplayerListBuildSummariesV2Async": {
        "summary": "TODO REVIEW: Lists summarized details of all multiplayer server builds for a title. Accepts tokens for title and if game client access is enabled, allows game client to request list of builds with player entity token.",
        "remarks": "Returns a list of summarized details of all multiplayer server builds for a title. See also PlayFabMultiplayerServerCreateBuildWithManagedContainerAsync, PlayFabMultiplayerServerDeleteBuildAsync, PlayFabMultiplayerServerGetBuildAsync"
    },
    "PlayFabMultiplayerListCertificateSummariesAsync": {
        "summary": "TODO REVIEW: Lists multiplayer server game certificates for a title.",
        "remarks": "Returns a list of multiplayer server game certificates for a title. See also PlayFabMultiplayerServerDeleteCertificateAsync, PlayFabMultiplayerServerUploadCertificateAsync"
    },
    "PlayFabMultiplayerListContainerImagesAsync": {
        "summary": "TODO REVIEW: Lists custom container images for a title.",
        "remarks": "Returns a list of the container images that have been uploaded to the container registry for a title. See also PlayFabMultiplayerServerGetContainerRegistryCredentialsAsync, PlayFabMultiplayerServerListContainerImageTagsAsync"
    },
    "PlayFabMultiplayerListContainerImageTagsAsync": {
        "summary": "TODO REVIEW: Lists the tags for a custom container image.",
        "remarks": "Returns a list of the tags for a particular container image that exists in the container registry for a title. See also PlayFabMultiplayerServerListContainerImagesAsync"
    },
    "PlayFabMultiplayerListMatchmakingTicketsForPlayerAsync": {
        "summary": "TODO REVIEW: List all matchmaking ticket Ids the user is a member of.",
        "remarks": "If the caller is a title, the EntityKey in the request is required. If the caller is a player, then it is optional. If it is provided it must match the caller's entity."
    },
    "PlayFabMultiplayerListMultiplayerServersAsync": {
        "summary": "TODO REVIEW: Lists multiplayer server sessions for a build.",
        "remarks": "Returns a list of multiplayer servers for a build in a specific region. See also PlayFabMultiplayerServerRequestMultiplayerServerAsync"
    },
    "PlayFabMultiplayerListPartyQosServersAsync": {
        "summary": "TODO REVIEW: Lists quality of service servers for party.",
        "remarks": "Returns a list of quality of service servers for party."
    },
    "PlayFabMultiplayerListQosServersForTitleAsync": {
        "summary": "TODO REVIEW: Lists quality of service servers for the title. By default, servers are only returned for regions where a Multiplayer Servers build has been deployed.",
        "remarks": "Returns a list of quality of service servers for a title."
    },
    "PlayFabMultiplayerListServerBackfillTicketsForPlayerAsync": {
        "summary": "TODO REVIEW: List all server backfill ticket Ids the user is a member of.",
        "remarks": "List all server backfill ticket Ids the user is a member of."
    },
    "PlayFabMultiplayerListTitleMultiplayerServersQuotaChangesAsync": {
        "summary": "TODO REVIEW: List all server quota change requests for a title.",
        "remarks": "List all server quota change requests for a title. See also PlayFabMultiplayerServerCreateTitleMultiplayerServersQuotaChangeAsync, PlayFabMultiplayerServerGetTitleMultiplayerServersQuotaChangeAsync"
    },
    "PlayFabMultiplayerListVirtualMachineSummariesAsync": {
        "summary": "TODO REVIEW: Lists virtual machines for a title.",
        "remarks": "Returns a list of virtual machines for a title."
    },
    "PlayFabMultiplayerRequestMultiplayerServerAsync": {
        "summary": "TODO REVIEW: Request a multiplayer server session. Accepts tokens for title and if game client access is enabled, allows game client to request a server with player entity token.",
        "remarks": "Requests a multiplayer server session from a particular build in any of the given preferred regions. See also PlayFabMultiplayerServerGetMultiplayerServerDetailsAsync"
    },
    "PlayFabMultiplayerRolloverContainerRegistryCredentialsAsync": {
        "summary": "TODO REVIEW: Rolls over the credentials to the container registry.",
        "remarks": "Gets new credentials to the container registry where game developers can upload custom container images to before creating a new build. See also PlayFabMultiplayerServerGetContainerRegistryCredentialsAsync"
    },
    "PlayFabMultiplayerShutdownMultiplayerServerAsync": {
        "summary": "TODO REVIEW: Shuts down a multiplayer server session.",
        "remarks": "Executes the shutdown callback from the GSDK and terminates the multiplayer server session. The callback in the GSDK will allow for graceful shutdown with a 15 minute timeoutIf graceful shutdown has not been completed before 15 minutes have elapsed, the multiplayer server session will be forcefully terminated on it's own. See also PlayFabMultiplayerServerGetMultiplayerServerDetailsAsync, PlayFabMultiplayerServerRequestMultiplayerServerAsync"
    },
    "PlayFabMultiplayerUntagContainerImageAsync": {
        "summary": "TODO REVIEW: Untags a container image.",
        "remarks": "Removes the specified tag from the image. After this operation, a 'docker pull' will fail for the specified image and tag combination. Morever, ListContainerImageTags will not return the specified tag. See also PlayFabMultiplayerServerListContainerImageTagsAsync"
    },
    "PlayFabMultiplayerUpdateBuildAliasAsync": {
        "summary": "TODO REVIEW: Creates a multiplayer server build alias.",
        "remarks": "Creates a multiplayer server build alias and returns the created alias. See also PlayFabMultiplayerServerCreateBuildAliasAsync, PlayFabMultiplayerServerDeleteBuildAliasAsync, PlayFabMultiplayerServerGetBuildAliasAsync"
    },
    "PlayFabMultiplayerUpdateBuildNameAsync": {
        "summary": "TODO REVIEW: Updates a multiplayer server build's name.",
        "remarks": "Updates a multiplayer server build's name. See also PlayFabMultiplayerServerDeleteBuildAsync, PlayFabMultiplayerServerGetBuildAsync, PlayFabMultiplayerServerListBuildSummariesV2Async, PlayFabMultiplayerServerUpdateBuildRegionAsync, PlayFabMultiplayerServerUpdateBuildRegionsAsync"
    },
    "PlayFabMultiplayerUpdateBuildRegionAsync": {
        "summary": "TODO REVIEW: Updates a multiplayer server build's region. If the region is not yet created, it will be created",
        "remarks": "Updates a multiplayer server build's region. See also PlayFabMultiplayerServerDeleteBuildAsync, PlayFabMultiplayerServerDeleteBuildRegionAsync, PlayFabMultiplayerServerGetBuildAsync, PlayFabMultiplayerServerListBuildSummariesV2Async, PlayFabMultiplayerServerUpdateBuildRegionsAsync"
    },
    "PlayFabMultiplayerUpdateBuildRegionsAsync": {
        "summary": "TODO REVIEW: Updates a multiplayer server build's regions.",
        "remarks": "Updates a multiplayer server build's regions. See also PlayFabMultiplayerServerDeleteBuildAsync, PlayFabMultiplayerServerDeleteBuildRegionAsync, PlayFabMultiplayerServerGetBuildAsync, PlayFabMultiplayerServerListBuildSummariesV2Async, PlayFabMultiplayerServerUpdateBuildRegionAsync"
    },
    "PlayFabMultiplayerUploadCertificateAsync": {
        "summary": "TODO REVIEW: Uploads a multiplayer server game certificate.",
        "remarks": "Uploads a multiplayer server game certificate. See also PlayFabMultiplayerServerDeleteCertificateAsync, PlayFabMultiplayerServerListCertificateSummariesAsync"
    },
    "PlayFabProfilesGetGlobalPolicyAsync": {
        "summary": "TODO REVIEW: Gets the global title access policy ",
        "remarks": "Retrieves the title access policy that is used before the profile's policy is inspected during a request. If never customized this will return the default starter policy built by PlayFab. See also PlayFabProfileGetProfileAsync"
    },
    "PlayFabProfilesGetProfileAsync": {
        "summary": "TODO REVIEW: Retrieves the entity's profile.",
        "remarks": "Given an entity type and entity identifier will retrieve the profile from the entity store. If the profile being retrieved is the caller's, then the read operation is consistent, if not it is an inconsistent read. An inconsistent read means that we do not guarantee all committed writes have occurred before reading the profile, allowing for a stale read. If consistency is important the Version Number on the result can be used to compare which version of the profile any reader has."
    },
    "PlayFabProfilesGetProfilesAsync": {
        "summary": "TODO REVIEW: Retrieves the entity's profile.",
        "remarks": "Given a set of entity types and entity identifiers will retrieve all readable profiles properties for the caller. Profiles that the caller is not allowed to read will silently not be included in the results."
    },
    "PlayFabProfilesGetTitlePlayersFromMasterPlayerAccountIdsAsync": {
        "summary": "TODO REVIEW: Retrieves the title player accounts associated with the given master player account.",
        "remarks": "Given a master player account id (PlayFab ID), returns all title player accounts associated with it."
    },
    "PlayFabProfilesSetGlobalPolicyAsync": {
        "summary": "TODO REVIEW: Sets the global title access policy ",
        "remarks": "Updates the title access policy that is used before the profile's policy is inspected during a request. Policies are compiled and cached for several minutes so an update here may not be reflected in behavior for a short time. See also PlayFabProfileGetProfileAsync"
    },
    "PlayFabProfilesSetProfileLanguageAsync": {
        "summary": "TODO REVIEW: Updates the entity's language. The precedence hierarchy for communication to the player is Title Player Account language, Master Player Account language, and then title default language if the first two aren't set or supported.",
        "remarks": "Given an entity profile, will update its language to the one passed in if the profile's version is equal to the one passed in."
    },
    "PlayFabProfilesSetProfilePolicyAsync": {
        "summary": "TODO REVIEW: Sets the profiles access policy",
        "remarks": "This will set the access policy statements on the given entity profile. This is not additive, any existing statements will be replaced with the statements in this request. See also PlayFabProfileGetProfileAsync"
    }

}